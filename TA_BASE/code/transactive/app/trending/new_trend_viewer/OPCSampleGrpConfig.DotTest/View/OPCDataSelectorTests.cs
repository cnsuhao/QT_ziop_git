using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCSampleGrpConfig.DotTest.Factories.View;
using OPCSampleGrpConfig.View;
using System;
using System.Windows.Forms;
using STEE.ISCS.MulLanguage.DotTest.Factories;
using OPCSampleGrpConfig.DotTest.Factories.Controller;
using STEE.ISCS.MVC;
//using DAO.Trending.DotTest.Factories;
using System.Collections.Generic;
using STEE.ISCS.MulLanguage;
using Entity.Trending;

namespace OPCSampleGrpConfig.DotTest.View
{
    [TestFixture()]
    public class OPCDataSelectorTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/UNeBA", "/Tsl2Q")]
        public void TestDispose01()
        {
            //using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            using (OPCDataSelector oPCDataSelector = new OPCDataSelector())
            {
                bool disposing = false;
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.SetField("components",new System.ComponentModel.Container());
                oPCDataSelectorAccessor.Call("Dispose", disposing);                
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/QXouQ", "+AZ6Rg")]
        public void TestInitializeComponent01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("InitializeComponent");

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/+pObQ", "++pZgw")]
        public void TestOPCDataSelectorConstructor01()
        {
            OPCDataSelector oPCDataSelector = new OPCDataSelector();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Gfpdw", "//NnNg")]
        public void TestPutObject01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                string objectName = OPCDataSelector.PARENTINTERVALNAME;
                string sampleGroupName = "Testing";
                oPCDataSelector.PutObject(objectName, sampleGroupName);
                #region PostCheck
                //Post Condition Check
                string name = (string)oPCDataSelectorAccessor.GetFieldAccessor("intervalNameTextBox").GetProperty("Text");
                Assert.AreEqual(sampleGroupName, name);
                #endregion 

                //test2 width of Text Box - long Sample Group name
                string sampleGroupNameLong = "Testing1234567890123456789901223345689732123455678912345676788zsdwehtrhjtydsfsdgferhgbtyjusadq";
                oPCDataSelector.PutObject(objectName, sampleGroupNameLong);

                //test3
                objectName = OPCDataSelector.OPCSAMPLEGRPDIC;
                Dictionary<string, string> SampleGroups = new Dictionary<string, string>();
                SampleGroups.Add("Test1", "Value1");
                SampleGroups.Add("Test2", "Value2");
                SampleGroups.Add("Test3", "Value3");
                oPCDataSelector.PutObject(objectName, SampleGroups);
                #region PostCheck
                //Post Condition Check
                Assert.AreEqual(SampleGroups, oPCDataSelectorAccessor.GetField("m_sampleGroupDic"));
                #endregion 



            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/CGdxA", "/zilEg")]
        public void TestTranslateCaption01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                //preinitialise strings
                OPCSampleGrpConfig.Common.FormCaptionHelper.GetInstance().AddCaptionsToStringHelper();
                //Test Procedure Call
                oPCDataSelector.TranslateCaption();
                #region PostConditionCheck
                //Post Condition Check
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DP_LIST, oPCDataSelectorAccessor.GetFieldAccessor("serverInfoBox").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.ADD, oPCDataSelectorAccessor.GetFieldAccessor("addToolStripMenuItem").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.SAVE, oPCDataSelectorAccessor.GetFieldAccessor("okCmd").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.SERVER_NAME_LIST, oPCDataSelectorAccessor.GetFieldAccessor("serverNameBox").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.OPC_SERVER_NAME, oPCDataSelectorAccessor.GetFieldAccessor("label8").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.CANCLE, oPCDataSelectorAccessor.GetFieldAccessor("cancelCmd").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DELETE, oPCDataSelectorAccessor.GetFieldAccessor("removeToolStripMenuItem").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.SELECTED_DP, oPCDataSelectorAccessor.GetFieldAccessor("groupBox1").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DATA_GRP_NAME, oPCDataSelectorAccessor.GetFieldAccessor("label1").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DP_NAME_SELECT, oPCDataSelectorAccessor.GetFieldAccessor("label2").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.SELECT_OPC_DP, oPCDataSelectorAccessor.GetProperty("Text"));
                #endregion

                //Test2 For chinese Language
                LanguageTypeHelper.GetInstance().SetLanaguageType(LanguageType.Chinese);
                //Test Procedure Call
                oPCDataSelector.TranslateCaption();
                #region PostConditionCheck
                //Post Condition Check
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DP_LIST, oPCDataSelectorAccessor.GetFieldAccessor("serverInfoBox").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.ADD, oPCDataSelectorAccessor.GetFieldAccessor("addToolStripMenuItem").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.SAVE, oPCDataSelectorAccessor.GetFieldAccessor("okCmd").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.SERVER_NAME_LIST, oPCDataSelectorAccessor.GetFieldAccessor("serverNameBox").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.OPC_SERVER_NAME, oPCDataSelectorAccessor.GetFieldAccessor("label8").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.CANCLE, oPCDataSelectorAccessor.GetFieldAccessor("cancelCmd").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DELETE, oPCDataSelectorAccessor.GetFieldAccessor("removeToolStripMenuItem").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.SELECTED_DP, oPCDataSelectorAccessor.GetFieldAccessor("groupBox1").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DATA_GRP_NAME, oPCDataSelectorAccessor.GetFieldAccessor("label1").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DP_NAME_SELECT, oPCDataSelectorAccessor.GetFieldAccessor("label2").GetProperty("Text"));
                Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.SELECT_OPC_DP, oPCDataSelectorAccessor.GetProperty("Text"));
                #endregion
                LanguageTypeHelper.GetInstance().SetLanaguageType(LanguageType.English);

                OPCSampleGrpConfig.Common.FormCaptionHelper.ReleaseInstance();


            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/pfqjg", "+D6AvQ")]
        public void TestAttachListener01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                using (IController ctl = OPCDataSelectorControllerFactory.CreateOPCDataSelectorController01())
                {
                    oPCDataSelector.AttachListener(ctl);                   

                    // ExpectedException custom attribute was generated instead of
                    // assertions since the test threw System.InvalidCastException
                }
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/ofELg", "+DKs1w")]
        public void TestInitializeControlsCaptions01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("InitializeControlsCaptions");           
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ghAbg", "+/V2Gw")]
        public void TestInitializeOpcItemDataGridView01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("InitializeOpcItemDataGridView");
                #region PostConditionCheck
                //Post Condition Check
                System.Windows.Forms.DataGridView gridCtrl = (System.Windows.Forms.DataGridView)oPCDataSelectorAccessor.GetField("opcItemDataGridView");
                Assert.AreEqual(4, gridCtrl.Columns.Count);
                Assert.AreEqual(OPCDataSelector.OPCITEM_KEYID_COLNAME, gridCtrl.Columns[0].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_DATAPTNAME_COLNAME, gridCtrl.Columns[1].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_DATAPTDESC_COLNAME, gridCtrl.Columns[2].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_GRPID_COLNAME, gridCtrl.Columns[3].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_KEYID_COLTEXT, gridCtrl.Columns[0].HeaderText);
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.OPC_DP_NAME, gridCtrl.Columns[1].HeaderText);
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DESCRIPTION, gridCtrl.Columns[2].HeaderText);
                Assert.AreEqual(OPCSampleGrpConfig.Common.EnglishString.DATA_GROUP_NAME, gridCtrl.Columns[3].HeaderText);
                Assert.IsFalse(gridCtrl.Columns[OPCDataSelector.OPCITEM_KEYID_COLINDEX].Visible);
                Assert.IsFalse(gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTDESC_COLINDEX].Visible);
                Assert.AreEqual(400, gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTNAME_COLINDEX].Width);
                Assert.AreEqual(275, gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTDESC_COLINDEX].Width);
                Assert.AreEqual(255, gridCtrl.Columns[OPCDataSelector.OPCITEM_GRPID_COLINDEX].Width);
                #endregion
            }
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                  //Test2 For chinese Language
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                LanguageTypeHelper.GetInstance().SetLanaguageType(LanguageType.Chinese);
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("InitializeOpcItemDataGridView");
                #region PostConditionCheck
                //Post Codition Check
                System.Windows.Forms.DataGridView gridCtrl = (System.Windows.Forms.DataGridView)oPCDataSelectorAccessor.GetField("opcItemDataGridView");
                Assert.AreEqual(4, gridCtrl.Columns.Count);
                Assert.AreEqual(OPCDataSelector.OPCITEM_KEYID_COLNAME, gridCtrl.Columns[0].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_DATAPTNAME_COLNAME, gridCtrl.Columns[1].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_DATAPTDESC_COLNAME, gridCtrl.Columns[2].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_GRPID_COLNAME, gridCtrl.Columns[3].Name);
                Assert.AreEqual(OPCDataSelector.OPCITEM_KEYID_COLTEXT, gridCtrl.Columns[0].HeaderText);
                //Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.OPC_DP_NAME, gridCtrl.Columns[1].HeaderText);
                //Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DESCRIPTION, gridCtrl.Columns[2].HeaderText);
                //Assert.AreEqual(OPCSampleGrpConfig.Common.ChineseString.DATA_GROUP_NAME, gridCtrl.Columns[3].HeaderText);
                Assert.IsFalse(gridCtrl.Columns[OPCDataSelector.OPCITEM_KEYID_COLINDEX].Visible);
                Assert.IsFalse(gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTDESC_COLINDEX].Visible);
                Assert.AreEqual(400, gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTNAME_COLINDEX].Width);
                Assert.AreEqual(275, gridCtrl.Columns[OPCDataSelector.OPCITEM_DATAPTDESC_COLINDEX].Width);
                Assert.AreEqual(255, gridCtrl.Columns[OPCDataSelector.OPCITEM_GRPID_COLINDEX].Width);
                #endregion
                LanguageTypeHelper.GetInstance().SetLanaguageType(LanguageType.English);
 
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [ExpectedException("System.NullReferenceException")]
        [TestAuthor("user")]
        [Test]
        [HashCode("/CYewg", "+sru6w")]
        public void TestBuildDataNodeStructure01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("BuildDataNodeStructure");
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)oPCDataSelectorAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                // ExpectedException custom attribute was generated instead of
                // assertions since the test threw System.NullReferenceException
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/8txLw", "+FBseg")]
        public void TestLoadDataPointGrid01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyDataLogDPTrend> etyDPList = new List<EtyDataLogDPTrend>();
                oPCDataSelectorAccessor.SetField("m_ConfigDataPointList", etyDPList);
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("LoadDataPointGrid");
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)oPCDataSelectorAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)oPCDataSelector.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)oPCDataSelector.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)oPCDataSelector.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)oPCDataSelector.AutoValidate);
                Assert.IsFalse((bool)oPCDataSelector.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)oPCDataSelector.CompanyName);
                Assert.IsFalse((bool)oPCDataSelector.Created);
                Assert.IsTrue((bool)oPCDataSelector.Enabled);
                Assert.IsTrue((bool)oPCDataSelector.HasChildren);
                Assert.IsFalse((bool)oPCDataSelector.InvokeRequired);
                Assert.IsFalse((bool)oPCDataSelector.IsHandleCreated);
                Assert.IsFalse((bool)oPCDataSelector.IsRestrictedWindow);
                Assert.IsTrue((bool)oPCDataSelector.MaximizeBox);
                Assert.AreEqual(1.0, (double)oPCDataSelector.Opacity, 1E-7);
                Assert.IsFalse((bool)oPCDataSelector.RecreatingHandle);
                Assert.IsTrue((bool)oPCDataSelector.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)oPCDataSelector.StartPosition);
                Assert.AreEqual("Select OPC Data Point", (string)oPCDataSelector.Text);
                Assert.IsFalse((bool)oPCDataSelector.TopMost);
                Assert.IsFalse((bool)oPCDataSelector.Visible);
                #endregion

                #region PostConditionCheck
                Assert.AreEqual(0, oPCDataSelectorAccessor.GetFieldAccessor("m_ConfigDataPointList").GetProperty("Count"));
                Assert.AreEqual(0, oPCDataSelectorAccessor.GetFieldAccessor("opcItemDataGridView").GetPropertyAccessor("Rows").GetProperty("Count"));
                #endregion

                //Test 2- exception throw for no column in grid control.

                EtyDataLogDPTrend ety1 = new EtyDataLogDPTrend();
                ety1.OPCDataPointName = "TestDP1";
                ety1.OPCSampleGrpId = 1;
                ety1.OPCDataPointDesc = "testing purpose";
                EtyDataLogDPTrend ety2 = new EtyDataLogDPTrend();
                ety2.OPCDataPointName = "TestDP2";
                ety2.OPCSampleGrpId = 2;
                ety2.OPCDataPointDesc = "testing purpose";
                etyDPList.Add(ety1);
                etyDPList.Add(ety2);
                oPCDataSelectorAccessor.SetField("m_ConfigDataPointList", etyDPList);
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("LoadDataPointGrid");

                //Test 3 - valid control
                oPCDataSelectorAccessor.Call("InitializeOpcItemDataGridView");
                Dictionary<string, string> SampleGrpDic = new Dictionary<string, string>();
                SampleGrpDic.Add("1", "SampleGrp1");
                SampleGrpDic.Add("2", "SAmpleGrp2");
                oPCDataSelectorAccessor.SetField("m_sampleGroupDic", SampleGrpDic);
                oPCDataSelectorAccessor.Call("LoadDataPointGrid");
                #region PostConditionCheck
                Assert.AreEqual(2, oPCDataSelectorAccessor.GetFieldAccessor("m_ConfigDataPointList").GetProperty("Count"));
                Assert.AreEqual(2, oPCDataSelectorAccessor.GetFieldAccessor("opcItemDataGridView").GetPropertyAccessor("Rows").GetProperty("Count"));
                #endregion

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+LXl6g", "/Ja/bg")]
        public void TestloadSelectedDatapoint01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyDataLogDPTrend> etyDPList = new List<EtyDataLogDPTrend>();
                oPCDataSelectorAccessor.SetField("m_SelectedDataPointList", etyDPList); 
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("loadSelectedDatapoint");
                #region PostConditionCheck
                Assert.AreEqual(0, oPCDataSelectorAccessor.GetFieldAccessor("m_SelectedDataPointList").GetProperty("Count"));
                Assert.AreEqual(0, oPCDataSelectorAccessor.GetFieldAccessor("selectDataPointListBox").GetPropertyAccessor("Items").GetProperty("Count"));
                #endregion

                //Test2

                EtyDataLogDPTrend ety1 = new EtyDataLogDPTrend();
                ety1.OPCDataPointName = "TestDP1";
                ety1.OPCSampleGrpId = 1;
                ety1.OPCDataPointDesc = "testing purpose";
                EtyDataLogDPTrend ety2 = new EtyDataLogDPTrend();
                ety2.OPCDataPointName = "TestDP2";
                ety2.OPCSampleGrpId = 2;
                ety2.OPCDataPointDesc = "testing purpose";
                EtyDataLogDPTrend ety3 = new EtyDataLogDPTrend();
                ety3.OPCDataPointName = "";
                etyDPList.Add(ety1);
                etyDPList.Add(ety2);
                etyDPList.Add(ety3);
                oPCDataSelectorAccessor.SetField("m_SelectedDataPointList", etyDPList);                
                //Test Procedure Call
                oPCDataSelectorAccessor.Call("loadSelectedDatapoint");
                #region PostConditionCheck
                Assert.AreEqual(3, oPCDataSelectorAccessor.GetFieldAccessor("m_SelectedDataPointList").GetProperty("Count"));
                Assert.AreEqual(3, oPCDataSelectorAccessor.GetFieldAccessor("selectDataPointListBox").GetPropertyAccessor("Items").GetProperty("Count"));
                #endregion

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+CgEAQ", "+gcnGA")]
        public void TestAddSelectedDataPoints01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                //Pre intialization
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("InitializeOpcItemDataGridView");

                oPCDataSelector.AddSelectedDataPoints();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/iVPow", "/aaPHA")]
        public void TestAddToSelectedListBox01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                using (IController ctl = OPCDataSelectorControllerFactory.CreateOPCDataSelectorController01())
                {
                    OPCSampleGrpConfig.Model.OPCDataSelectorModel model = OPCSampleGrpConfig.DotTest.Factories.Model.OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
                    Accessor controllerAccessor = ReflectionAccessor.Wrap(ctl);
                    controllerAccessor.Call("Attach", model, oPCDataSelector);

                    //TODO STUB
                    string opcItemID = "DP1";

                    oPCDataSelector.AddToSelectedListBox(opcItemID);
                }

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/1J7LA", "/EfZ0g")]
        public void TestRemoveSelectedDataPoints01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                oPCDataSelector.RemoveSelectedDataPoints();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/1J7LA", "/EfZ0g")]
        public void TestRemoveSelectedDataPoints02()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.SetField("selectDataPointListBox", null);
                oPCDataSelector.RemoveSelectedDataPoints();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/MZErA", "/RA7Ew")]
        public void TestRemoveSelectedDataPoint01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {//TODO STUB
                object value1 = DAO.Trending.DatalogDPTrendDAO.GetInstance();
                oPCDataSelector.RemoveSelectedDataPoint(value1);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(oPCDataSelector).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)oPCDataSelector.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)oPCDataSelector.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)oPCDataSelector.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)oPCDataSelector.AutoValidate);
                Assert.IsFalse((bool)oPCDataSelector.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)oPCDataSelector.CompanyName);
                Assert.IsFalse((bool)oPCDataSelector.Created);
                Assert.IsTrue((bool)oPCDataSelector.Enabled);
                Assert.IsTrue((bool)oPCDataSelector.HasChildren);
                Assert.IsFalse((bool)oPCDataSelector.InvokeRequired);
                Assert.IsFalse((bool)oPCDataSelector.IsHandleCreated);
                Assert.IsFalse((bool)oPCDataSelector.IsRestrictedWindow);
                Assert.IsTrue((bool)oPCDataSelector.MaximizeBox);
                Assert.AreEqual(1.0, (double)oPCDataSelector.Opacity, 1E-7);
                Assert.IsFalse((bool)oPCDataSelector.RecreatingHandle);
                Assert.IsTrue((bool)oPCDataSelector.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)oPCDataSelector.StartPosition);
                Assert.AreEqual("Select OPC Data Point", (string)oPCDataSelector.Text);
                Assert.IsFalse((bool)oPCDataSelector.TopMost);
                Assert.IsFalse((bool)oPCDataSelector.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/ioMKw", "/QSLgw")]
        public void TestGetSelectedDataPoints01()
        {//TODO STUB
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                List<string> list = oPCDataSelector.GetSelectedDataPoints();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ErIHA", "+ez5bQ")]
        public void TestCheckSelectionListModified01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.SetField("m_selectedDataPointsModified", false);
                bool b = oPCDataSelector.CheckSelectionListModified();
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record(b);
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(oPCDataSelector).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsFalse(b);
                Assert.AreEqual(global::System.Windows.Forms.AccessibleRole.Default, (AccessibleRole)oPCDataSelector.AccessibleRole);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)oPCDataSelector.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoSizeMode.GrowOnly, (AutoSizeMode)oPCDataSelector.AutoSizeMode);
                Assert.IsFalse((bool)oPCDataSelector.CanFocus);
                Assert.IsTrue((bool)oPCDataSelector.CausesValidation);
                Assert.IsFalse((bool)oPCDataSelector.Created);
                Assert.AreEqual(global::System.Windows.Forms.DockStyle.None, (DockStyle)oPCDataSelector.Dock);
                Assert.IsTrue((bool)oPCDataSelector.HasChildren);
                Assert.AreEqual(global::System.Windows.Forms.ImeMode.NoControl, (ImeMode)oPCDataSelector.ImeMode);
                Assert.IsFalse((bool)oPCDataSelector.IsHandleCreated);
                Assert.IsFalse((bool)oPCDataSelector.IsRestrictedWindow);
                Assert.IsTrue((bool)oPCDataSelector.MaximizeBox);
                Assert.AreEqual(1.0, (double)oPCDataSelector.Opacity, 1E-7);
                Assert.IsFalse((bool)oPCDataSelector.RecreatingHandle);
                Assert.IsTrue((bool)oPCDataSelector.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)oPCDataSelector.StartPosition);
                Assert.AreEqual("Select OPC Data Point", (string)oPCDataSelector.Text);
                Assert.IsFalse((bool)oPCDataSelector.TopMost);
                Assert.IsFalse((bool)oPCDataSelector.Visible);
                #endregion
                #region PotConditionCheck
                Assert.IsFalse(b);
                #endregion

                //test2
                oPCDataSelectorAccessor.SetField("m_selectedDataPointsModified", true);
                b = oPCDataSelector.CheckSelectionListModified();
                #region PotConditionCheck
                Assert.IsTrue(b);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+yincw", "/4IWQg")]
        public void TestSetServerNameText01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                string value1 = string.Empty;
                oPCDataSelector.SetServerNameText(value1);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(oPCDataSelector).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)oPCDataSelector.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)oPCDataSelector.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)oPCDataSelector.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)oPCDataSelector.AutoValidate);
                Assert.IsFalse((bool)oPCDataSelector.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)oPCDataSelector.CompanyName);
                Assert.IsFalse((bool)oPCDataSelector.Created);
                Assert.IsTrue((bool)oPCDataSelector.Enabled);
                Assert.IsTrue((bool)oPCDataSelector.HasChildren);
                Assert.IsFalse((bool)oPCDataSelector.InvokeRequired);
                Assert.IsFalse((bool)oPCDataSelector.IsHandleCreated);
                Assert.IsFalse((bool)oPCDataSelector.IsRestrictedWindow);
                Assert.IsTrue((bool)oPCDataSelector.MaximizeBox);
                Assert.AreEqual(1.0, (double)oPCDataSelector.Opacity, 1E-7);
                Assert.IsFalse((bool)oPCDataSelector.RecreatingHandle);
                Assert.IsTrue((bool)oPCDataSelector.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)oPCDataSelector.StartPosition);
                Assert.AreEqual("Select OPC Data Point", (string)oPCDataSelector.Text);
                Assert.IsFalse((bool)oPCDataSelector.TopMost);
                Assert.IsFalse((bool)oPCDataSelector.Visible);
                #endregion
                #region PostConditionCheck
                Assert.AreEqual(value1, oPCDataSelectorAccessor.GetFieldAccessor("serverNameBox").GetProperty("Text"));
                #endregion

                //Test2
                value1 = "ServernName11";
                //Test Procedure Call
                oPCDataSelector.SetServerNameText(value1);
                #region PostConditionCheck
                Assert.AreEqual(value1, oPCDataSelectorAccessor.GetFieldAccessor("serverNameBox").GetProperty("Text"));
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/wHqMg", "/d/cfQ")]
        public void TestGetSearchText01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                string str = oPCDataSelector.GetSearchText();
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record(str);
                recorder.Record((string)oPCDataSelector.AccessibleDefaultActionDescription);
                recorder.Record((string)oPCDataSelector.AccessibleDescription);
                recorder.Record((string)oPCDataSelector.AccessibleName);
                recorder.Record((AccessibleRole)oPCDataSelector.AccessibleRole);
                recorder.Record((bool)oPCDataSelector.AllowDrop);
                recorder.Record((bool)oPCDataSelector.AllowTransparency);
                recorder.Record((AnchorStyles)oPCDataSelector.Anchor);
                recorder.Record((AutoScaleMode)oPCDataSelector.AutoScaleMode);
                recorder.Record((bool)oPCDataSelector.AutoScroll);
                recorder.Record((bool)oPCDataSelector.AutoSize);
                recorder.Record((AutoSizeMode)oPCDataSelector.AutoSizeMode);
                recorder.Record((AutoValidate)oPCDataSelector.AutoValidate);
                recorder.Record((ImageLayout)oPCDataSelector.BackgroundImageLayout);
                recorder.Record((int)oPCDataSelector.Bottom);
                recorder.Record((bool)oPCDataSelector.CanFocus);
                recorder.Record((bool)oPCDataSelector.CanSelect);
                recorder.Record((bool)oPCDataSelector.Capture);
                recorder.Record((bool)oPCDataSelector.CausesValidation);
                recorder.Record((string)oPCDataSelector.CompanyName);
                recorder.Record((bool)oPCDataSelector.ContainsFocus);
                recorder.Record((bool)oPCDataSelector.ControlBox);
                recorder.Record((bool)oPCDataSelector.Created);
                recorder.Record((DialogResult)oPCDataSelector.DialogResult);
                recorder.Record((bool)oPCDataSelector.Disposing);
                recorder.Record((DockStyle)oPCDataSelector.Dock);
                recorder.Record((bool)oPCDataSelector.Enabled);
                recorder.Record((bool)oPCDataSelector.Focused);
                recorder.Record((FormBorderStyle)oPCDataSelector.FormBorderStyle);
                recorder.Record((bool)oPCDataSelector.HasChildren);
                recorder.Record((int)oPCDataSelector.Height);
                recorder.Record((bool)oPCDataSelector.HelpButton);
                recorder.Record((ImeMode)oPCDataSelector.ImeMode);
                recorder.Record((bool)oPCDataSelector.InvokeRequired);
                recorder.Record((bool)oPCDataSelector.IsAccessible);
                recorder.Record((bool)oPCDataSelector.IsDisposed);
                recorder.Record((bool)oPCDataSelector.IsHandleCreated);
                recorder.Record((bool)oPCDataSelector.IsMdiChild);
                recorder.Record((bool)oPCDataSelector.IsMdiContainer);
                recorder.Record((bool)oPCDataSelector.IsMirrored);
                recorder.Record((bool)oPCDataSelector.IsRestrictedWindow);
                recorder.Record((bool)oPCDataSelector.KeyPreview);
                recorder.Record((int)oPCDataSelector.Left);
                recorder.Record((bool)oPCDataSelector.MaximizeBox);
                recorder.Record((bool)oPCDataSelector.MinimizeBox);
                recorder.Record((bool)oPCDataSelector.Modal);
                recorder.Record((string)oPCDataSelector.Name);
                recorder.Record((double)oPCDataSelector.Opacity);
                recorder.Record((string)oPCDataSelector.ProductName);
                recorder.Record((string)oPCDataSelector.ProductVersion);
                recorder.Record((bool)oPCDataSelector.RecreatingHandle);
                recorder.Record((int)oPCDataSelector.Right);
                recorder.Record((RightToLeft)oPCDataSelector.RightToLeft);
                recorder.Record((bool)oPCDataSelector.RightToLeftLayout);
                recorder.Record((bool)oPCDataSelector.ShowIcon);
                recorder.Record((bool)oPCDataSelector.ShowInTaskbar);
                recorder.Record((SizeGripStyle)oPCDataSelector.SizeGripStyle);
                recorder.Record((FormStartPosition)oPCDataSelector.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(oPCDataSelector).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)oPCDataSelector.TabIndex);
                recorder.Record((bool)oPCDataSelector.TabStop);
                recorder.Record((string)oPCDataSelector.Text);
                recorder.Record((int)oPCDataSelector.Top);
                recorder.Record((bool)oPCDataSelector.TopLevel);
                recorder.Record((bool)oPCDataSelector.TopMost);
                recorder.Record((bool)oPCDataSelector.UseWaitCursor);
                recorder.Record((string)oPCDataSelector.ViewID);
                recorder.Record((string)oPCDataSelector.ViewType);
                recorder.Record((bool)oPCDataSelector.Visible);
                recorder.Record((int)oPCDataSelector.Width);
                recorder.Record((FormWindowState)oPCDataSelector.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.AreEqual("", str);
                Assert.AreEqual(global::System.Windows.Forms.AccessibleRole.Default, (AccessibleRole)oPCDataSelector.AccessibleRole);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)oPCDataSelector.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoSizeMode.GrowOnly, (AutoSizeMode)oPCDataSelector.AutoSizeMode);
                Assert.IsFalse((bool)oPCDataSelector.CanFocus);
                Assert.IsTrue((bool)oPCDataSelector.CausesValidation);
                Assert.IsFalse((bool)oPCDataSelector.Created);
                Assert.AreEqual(global::System.Windows.Forms.DockStyle.None, (DockStyle)oPCDataSelector.Dock);
                Assert.IsTrue((bool)oPCDataSelector.HasChildren);
                Assert.AreEqual(global::System.Windows.Forms.ImeMode.NoControl, (ImeMode)oPCDataSelector.ImeMode);
                Assert.IsFalse((bool)oPCDataSelector.IsHandleCreated);
                Assert.IsFalse((bool)oPCDataSelector.IsRestrictedWindow);
                Assert.IsTrue((bool)oPCDataSelector.MaximizeBox);
                Assert.AreEqual(1.0, (double)oPCDataSelector.Opacity, 1E-7);
                Assert.IsFalse((bool)oPCDataSelector.RecreatingHandle);
                Assert.IsTrue((bool)oPCDataSelector.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)oPCDataSelector.StartPosition);
                Assert.AreEqual("Select OPC Data Point", (string)oPCDataSelector.Text);
                Assert.IsFalse((bool)oPCDataSelector.TopMost);
                Assert.IsFalse((bool)oPCDataSelector.Visible);
                #endregion
                #region PostConditionCheck
                Assert.AreEqual(oPCDataSelectorAccessor.GetFieldAccessor("searchTextBox").GetProperty("Text"), str);
                #endregion
            }
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCDataSelector_Load01()
        {
            ViewManager.GetInstance().RegisterViewFactory(new OPCSampleGrpConfigViewFactory());
            OPCDataSelector oPCDataSelector = (OPCDataSelector)ViewManager.GetInstance().GetView(OPCDataSelector.OPCDATASELECTORFRM);
            oPCDataSelector.TranslateCaption();
            Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
            oPCDataSelectorAccessor.Call("OPCDataSelector_Load", null, null);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSetDataPointList01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyDataLogDPTrend> etyDP = new List<EtyDataLogDPTrend>();
                oPCDataSelector.SetDataPointList(etyDP);
            }
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSetSelectedDataPointList01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyDataLogDPTrend> etyDP = new List<EtyDataLogDPTrend>();
                oPCDataSelector.SetSelectedDataPointList(etyDP);
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSetTreeNodeList01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyOPCDataNode> etyDN = new List<EtyOPCDataNode>();
                oPCDataSelector.SetTreeNodeList(etyDN);
            }
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestopcItemDataGridView_MouseHover01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("opcItemDataGridView_MouseHover",null,null);
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestopcItemDataGridView_MouseEnter01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                oPCDataSelectorAccessor.Call("opcItemDataGridView_MouseEnter", null, null);
            }
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddTreeNode01()
        {
            using (OPCDataSelector oPCDataSelector = OPCDataSelectorFactory.CreateOPCDataSelector01())
            {
                //PreIntialization
                //Accessor oPCDataSelectorAccessor = ReflectionAccessor.Wrap(oPCDataSelector);
                List<EtyOPCDataNode> opcDataNodes = new List<EtyOPCDataNode>();
                EtyOPCDataNode ety = new EtyOPCDataNode();
                ety.OPCDataNodeName = "Testing1";
                ety.OPCDataNodeId = 1;
                opcDataNodes.Add(ety);
                EtyOPCDataNode ety1 = new EtyOPCDataNode();
                ety1.OPCDataNodeName = "Testing2";
                ety1.OPCDataNodeDesc= "SampleDesc";
                ety1.OPCDataNodeId = 2;
                opcDataNodes.Add(ety1);
                System.Windows.Forms.TreeView  tree = new TreeView();
                //Test Procedure Call
                oPCDataSelector.AddTreeNode(opcDataNodes, tree.Nodes);
                //Post Condition Check
                TreeNodeCollection nodeColl = tree.Nodes;
                Assert.IsTrue(nodeColl.ContainsKey(ety.OPCDataNodeName));
                Assert.IsTrue(nodeColl.ContainsKey(ety1.OPCDataNodeName));
                Assert.AreEqual(ety.OPCDataNodeName, nodeColl[0].Text);
                Assert.AreEqual(ety1.OPCDataNodeName+" - " +ety1.OPCDataNodeDesc ,nodeColl[1].Text);
                Assert.AreEqual(ety.OPCDataNodeId, nodeColl[0].Tag);
                Assert.AreEqual(ety1.OPCDataNodeId, nodeColl[1].Tag);
            }
        }








    }
}
