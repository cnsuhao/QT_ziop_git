using Dottest.Framework;
using NUnit.Framework;
using OPCSampleGrpConfig.View;
using OPCSampleGrpConfig.Model;
using OPCSampleGrpConfig.Controller;
using OPCSampleGrpConfig.DotTest.Factories.Controller;
using OPCSampleGrpConfig.DotTest.Factories.Model;
using OPCSampleGrpConfig.DotTest.Factories.View;
using STEE.ISCS.MVC;
using Dottest.Framework.RecordState;
using STEE.ISCS.MVC.DotTest.Factories;
using System;
using Entity.Trending;
using System.Collections.Generic;
using STEE.ISCS.MulLanguage;

namespace OPCSampleGrpConfig.DotTest.Controller
{
    [TestFixture()]
    public class OPCSampleGrpConfigStartControllerTests
    {
        OPCSampleGrpConfigStartController oPCSampleGrpConfigStartController = null;
        [SetUp]
        public void FixtureSetUp()
        {
            oPCSampleGrpConfigStartController = new OPCSampleGrpConfigStartController();
            IModel model = new OPCSampleGrpConfig.Model.OPCSampleGrpConfigStartModel();
            OPCSampleGrpConfig.View.OPCSampleGrpConfigStart viewob = OPCSampleGrpConfigStartFactory.CreateOPCSampleGrpConfigStart01();
            oPCSampleGrpConfigStartController.Attach(model, viewob);
        }

        [TearDown]
        public void FixtureTearUp()
        {
            oPCSampleGrpConfigStartController = null;
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/R0VQw", "/4pC+w")]
        public void TestAttachCallBack01()
        {
            IModel model = OPCSampleGrpConfigStartModelFactory.CreateOPCSampleGrpConfigStartModel01();
            IView view = OPCSampleGrpConfigStartFactory.CreateOPCSampleGrpConfigStart01();
            oPCSampleGrpConfigStartController.AttachCallBack(model, view);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+BKLbg", "/d1OJw")]
        public void TestNotifyObserver01()
        {
            NotifyObject notifyObj = new NotifyObject();
            oPCSampleGrpConfigStartController.NotifyObserver(notifyObj);


        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/zuVFA", "+7braQ")]
        public void TestGetDatabaseConnection01()
        {
            TrendingHelper.ConfigureFileHelper.GetInstance().init();
            string connectionString = TrendingHelper.ConfigureFileHelper.GetInstance().ConnectionStringConfig;
            DAO.Trending.Common.DBConnectionStrings.GetInstance().AddConnectionString(connectionString);
            bool b = oPCSampleGrpConfigStartController.GetDatabaseConnection();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/wlvGw", "/XP8qA")]
        public void TestLoadEditData01()
        {
            //Test1 empty samplegrpID
            string editIntervalGrpID = "1";
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);

            //Test Procedure Call
            oPCSampleGrpConfigStartControllerAccessor.Call("LoadEditData", editIntervalGrpID);
            //Post Condition Check
            #region PostConditionCheck
            //Accessor oPCSampleGrpConfigStartAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartControllerAccessor.GetField("m_view"));
            Assert.AreEqual("testing", oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("intervalNameTextBox").GetProperty("Text"));
            Assert.AreEqual("", oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("intervalDescTextBox").GetProperty("Text"));
            Assert.AreEqual(1, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("intervalUnitBox").GetProperty("Value"));
            Assert.AreEqual(OPCSampleGrpConfigStart.INTERVALETYPE_MINUTE_INDEX, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("intervalTypeBox").GetProperty("SelectedIndex"));
            Assert.AreEqual(1, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("deltaValueBox").GetProperty("Value"));
            Assert.AreEqual(false, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("dateTimePicker").GetProperty("Checked"));
            Assert.AreEqual(true, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("disableCheckBox").GetProperty("Checked"));
            Assert.AreEqual(false, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").GetFieldAccessor("intervalNameTextBox").GetProperty("Enabled"));
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/0RIBg", "/BD14w")]
        public void TestRetriveAllOPCGrp01()
        {
            string sortCol = string.Empty;
            string sortingOrder = string.Empty;
            bool reload = false;
            List<EtyDataLogDPGroupTrend> list = oPCSampleGrpConfigStartController.RetriveAllOPCGrp(sortCol, sortingOrder, reload);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<int>(delegate { return (int)list.Capacity; });
            recorder.Record<int>(delegate { return (int)list.Count; });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(list).GetProperty("System.Collections.Generic.ICollection<T>.IsReadOnly"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(list).GetProperty("System.Collections.ICollection.IsSynchronized"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(list).GetProperty("System.Collections.IList.IsFixedSize"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(list).GetProperty("System.Collections.IList.IsReadOnly"); });
            recorder.FinishRecording();
            #endregion
            // ExpectedException custom attribute was generated instead of
            // assertions since the test threw System.ArgumentOutOfRangeException

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+0iryA", "+0uStg")]
        public void TestRetriveTotalCount01()
        {
            //test 1
            oPCSampleGrpConfigStartController.RetriveTotalCount();

            //Test 2---
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_loadFromDB", false);
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            oPCSampleGrpConfigStartController.RetriveTotalCount();
            //Post Condition Check
            Assert.AreEqual(1, oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_DPGroupTrendList").GetProperty("Count"));

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+5ieaw", "+unGHA")]
        public void TestWriteEventLog01()
        {

            string messageContent = string.Empty;
            string moduleName = string.Empty;
            oPCSampleGrpConfigStartController.WriteEventLog(messageContent, moduleName);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestWriteEventLog02()
        {

            string messageContent = string.Empty;
            string moduleName = string.Empty;
            oPCSampleGrpConfigStartController.WriteEventLog(messageContent, moduleName);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/9g5Kg", "/7dQYA")]
        public void TestIsOPCSampleGrpExist01()
        {

            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            sampleGrp.LocationKey = 1;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            string oPCSampleGrpName = string.Empty;
            bool b = oPCSampleGrpConfigStartController.IsOPCSampleGrpExist(oPCSampleGrpName, 0);
            //Post Condition Check
            Assert.IsFalse(b);

            //test 2
            b = oPCSampleGrpConfigStartController.IsOPCSampleGrpExist("testing", 1);
            //Post Condition Check
            Assert.IsTrue(b);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [ExpectedException("System.FormatException")]
        [TestAuthor("user")]
        [Test]
        [HashCode("+iPa9A", "/+V1Xg")]
        public void TestGetOPCSampleGrp01()
        {

            string oPCSampleGroupId = string.Empty;
            EtyDataLogDPGroupTrend etyOPCSampleGroup = oPCSampleGrpConfigStartController.GetOPCSampleGrp(oPCSampleGroupId);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<double>(delegate { return (double)etyOPCSampleGroup.DeltaValue; });
            recorder.Record<bool>(delegate { return (bool)etyOPCSampleGroup.Disabled; });
            recorder.Record<double>(delegate { return (double)etyOPCSampleGroup.Interval; });
            recorder.Record<string>(delegate { return (string)etyOPCSampleGroup.IntervalType; });
            recorder.Record<bool>(delegate { return (bool)etyOPCSampleGroup.NewData; });
            recorder.Record<string>(delegate { return (string)etyOPCSampleGroup.SampleGrpDescription; });
            recorder.Record<double>(delegate { return (double)etyOPCSampleGroup.SampleGrpID; });
            recorder.Record<string>(delegate { return (string)etyOPCSampleGroup.SampleGrpName; });
            recorder.Record<string>(delegate { return (string)etyOPCSampleGroup.StartTime; });
            recorder.FinishRecording();
            #endregion
            // ExpectedException custom attribute was generated instead of
            // assertions since the test threw System.FormatException

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+7tO6A", "++u2zg")]
        public void TestOPCSampleGrpConfigStartControllerConstructor01()
        {
            OPCSampleGrpConfigStartController oPCSampleGrpConfigStartController = new OPCSampleGrpConfigStartController();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSetSampleGrpConfigLocation01()
        {
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            string param = "view-edit-1";
            System.Windows.Forms.Form frm = (System.Windows.Forms.Form)oPCSampleGrpConfigStartControllerAccessor.GetField("m_view");
            oPCSampleGrpConfigStartController.SetSampleGrpConfigLocation(ref frm, param);


            //test2 --- 
            oPCSampleGrpConfigStartController.SetSampleGrpConfigLocation(ref frm, "view-edit-2");


        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSaveCommand01()
        {
            //Test1 ----- null grp
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            //Test Procedure Call
            oPCSampleGrpConfigStartController.SaveCommand(null, null);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSaveCommand02()
        {
            //Test1 ----- null grp
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);

            //Test Procedure Call
            oPCSampleGrpConfigStartController.SaveCommand(null, null);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSaveCommand03()
        {
            //Test1 ----- null grp
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);

            //Test Procedure Call
            oPCSampleGrpConfigStartController.SaveCommand(null, null);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSaveCommand04()
        {
            //Test1 ----- null grp
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            //Test Procedure Call
            oPCSampleGrpConfigStartController.SaveCommand(null, null);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIntervalConfigDataGridView_CellDoubleClick01()
        {
            //Test1 ----- 
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            System.Windows.Forms.DataGridViewCellEventArgs e = new System.Windows.Forms.DataGridViewCellEventArgs(OPCSampleGrpConfigStart.OPCSAMPLEGRP_EDITCOLUMN_INDEX, 0);
            //Test Procedure Call
            oPCSampleGrpConfigStartController.IntervalConfigDataGridView_CellDoubleClick(null, e);

        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIntervalConfigDataGridView_CellDoubleClick05()
        {
            //Test1 ----- 
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            System.Windows.Forms.DataGridViewCellEventArgs e = new System.Windows.Forms.DataGridViewCellEventArgs(OPCSampleGrpConfigStart.OPCSAMPLEGRP_CONFIGCOLUMN_INDEX, 0);
            //Test Procedure Call
            oPCSampleGrpConfigStartController.IntervalConfigDataGridView_CellDoubleClick(null, e);
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIntervalConfigDataGridView_CellDoubleClick02()
        {
            //Test1 ----- 
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            System.Windows.Forms.DataGridViewCellEventArgs e = new System.Windows.Forms.DataGridViewCellEventArgs(OPCSampleGrpConfigStart.OPCSAMPLEGRP_CONFIGCOLUMN_INDEX, 0);
            ViewManager.GetInstance().RegisterViewFactory(new OPCSampleGrpConfigViewFactory());
            //Test Procedure Call
            oPCSampleGrpConfigStartController.IntervalConfigDataGridView_CellDoubleClick(null, e);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIntervalConfigDataGridView_CellDoubleClick03()
        {
            //Test1 ----- 
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            System.Windows.Forms.DataGridViewCellEventArgs e = new System.Windows.Forms.DataGridViewCellEventArgs(OPCSampleGrpConfigStart.OPCSAMPLEGRP_DELETECOLUMN_INDEX, 0);
            ViewManager.GetInstance().RegisterViewFactory(new OPCSampleGrpConfigViewFactory());
            //Test Procedure Call
            oPCSampleGrpConfigStartController.IntervalConfigDataGridView_CellDoubleClick(null, e);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIntervalConfigDataGridView_CellDoubleClick04()
        {
            //Test1 ----- 
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeControlsCaptions");
            oPCSampleGrpConfigStartControllerAccessor.GetFieldAccessor("m_view").Call("InitializeIntervalConfigDataGridView");
            List<EtyDataLogDPGroupTrend> oPCSampleGrpList = new List<EtyDataLogDPGroupTrend>();
            EtyDataLogDPGroupTrend sampleGrp = new EtyDataLogDPGroupTrend();
            sampleGrp.SampleGrpID = 1;
            sampleGrp.SampleGrpName = "testing";
            sampleGrp.Disabled = true;
            oPCSampleGrpList.Add(sampleGrp);
            oPCSampleGrpConfigStartControllerAccessor.SetField("m_DPGroupTrendList", oPCSampleGrpList);
            System.Windows.Forms.DataGridViewCellEventArgs e = new System.Windows.Forms.DataGridViewCellEventArgs(OPCSampleGrpConfigStart.OPCSAMPLEGRP_DELETECOLUMN_INDEX, 0);
            ViewManager.GetInstance().RegisterViewFactory(new OPCSampleGrpConfigViewFactory());
            //Test Procedure Call
            oPCSampleGrpConfigStartController.IntervalConfigDataGridView_CellDoubleClick(null, e);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddLoggerInterval_Paint_101()
        {        
            System.Drawing.Rectangle clipRect = new System.Drawing.Rectangle();
            Accessor oPCSampleGrpConfigStartControllerAccessor = ReflectionAccessor.Wrap(oPCSampleGrpConfigStartController);
            OPCSampleGrpConfig.View.OPCSampleGrpConfigStart mmView = (OPCSampleGrpConfig.View.OPCSampleGrpConfigStart)oPCSampleGrpConfigStartControllerAccessor.GetField("m_view");

            System.Drawing.Graphics graphics = mmView.CreateGraphics();
            System.Windows.Forms.PaintEventArgs e = new System.Windows.Forms.PaintEventArgs(graphics, clipRect);
            //Test Procedure Call
            oPCSampleGrpConfigStartController.AddLoggerInterval_Paint_1(null, e);
        }

    }
}
