using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCSampleGrpConfig.DotTest.Factories.Model;
using OPCSampleGrpConfig.Model;
using System;
using System.Collections.Generic;
using Entity.Trending;
using STEE.ISCS.MulLanguage;
using DAO.Trending;
using DAO.Trending.Common;
using DAO.Trending.Helper;
using OPCSampleGrpConfig.View;
//using Oracle.DataAccess.Client;

namespace OPCSampleGrpConfig.DotTest.Model
{
    [TestFixture()]
    public class OPCDataSelectorModelTests
    {
        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            OPCSampleGrpConfig.Common.FormCaptionHelper.GetInstance().AddCaptionsToStringHelper();
            TrendingHelper.ConfigureFileHelper.GetInstance().init();
            LanguageTypeHelper.GetInstance().SetLanaguageType(LanguageType.English);
            OPCSampleGrpConfigStartModel oPCSampleGrpConfigStartModel = OPCSampleGrpConfigStartModelFactory.CreateOPCSampleGrpConfigStartModel01();
            DBConnectionStrings.GetInstance().AddConnectionString(TrendingHelper.ConfigureFileHelper.GetInstance().ConnectionStringConfig);
        }

        [TestFixtureTearDown]
        public void FixtureTearUp()
        {
            OPCSampleGrpConfig.Common.FormCaptionHelper.ReleaseInstance();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+fvbOQ", "/F7GiA")]
        public void TestGetSampleGrps01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            Dictionary<string, string> dictionary = oPCDataSelectorModel.GetSampleGrps();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+xAEIQ", "+8ucWQ")]
        public void TestGetAllOPCDataNodes01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            string serverRootName = "Scada";
            string opcServerName = string.Empty;
            List<EtyOPCDataNode> list = oPCDataSelectorModel.GetAllOPCDataNodes(serverRootName, opcServerName);


        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+WysmA", "/fF44Q")]
        public void TestGetAllOPCDataPoints01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            string opcServerName = string.Empty;
            string filterString = string.Empty;
            List<EtyDataLogDPTrend> list = oPCDataSelectorModel.GetAllOPCDataPoints(opcServerName, filterString);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/JNZDQ", "/5xjgA")]
        public void TestGetChildOPCDataNodes01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            string parentNode = "12345678";
            string opcServerName = "TransactiveDatasource";
            //TODO Stub
            List<EtyOPCDataNode> list = oPCDataSelectorModel.GetChildOPCDataNodes(parentNode, opcServerName);

        }

       /* [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+m5esw", "/MHVdg")]
        public void TestUpdateSampleGrpFlag01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            //insert sample grp and datapoints 
            #region TestSetup
            //insert testing group

            EtyDataLogDPGroupTrend etySampleGrp = new EtyDataLogDPGroupTrend();
            etySampleGrp.NewData = true;
            etySampleGrp.SampleGrpName = "DOTTestParasoftTesting123";
            etySampleGrp.Interval = 1;
            etySampleGrp.IntervalType = "M";
            etySampleGrp.Disabled = false;
            DatalogDPGroupTrendDAO.GetInstance().InsertOPCGrpData(etySampleGrp);
            //getSampleId from DB
            List<EtyDataLogDPGroupTrend> list = DatalogDPGroupTrendDAO.GetInstance().GetAllOPCGrpsBySort(OPCSampleGrpConfigStart.OPCSAMPLEGRPDESC_COL_NAME, OPCSampleGrpConfigStart.OPCSAMPLEGRP_SORT_ASC);
            foreach (var item in list)
            {
                if (item.SampleGrpName.Equals("DOTTestParasoftTesting123"))
                {
                    etySampleGrp = item;
                    break;
                }
            }

            //insert testing Datapoint
            EtyDataLogDPTrend etyOPCDP = new EtyDataLogDPTrend();
            etyOPCDP.OPCDataPointName = "DOTTestParasoftDP1.Value";
            etyOPCDP.EntityKey = 20099999;
            etyOPCDP.OPCSampleGrpId = etySampleGrp.SampleGrpID;
            etyOPCDP.Disabled = false;
            DatalogDPTrendDAO.GetInstance().InsertOPCDataPoint(etyOPCDP);            
            #endregion

            bool hasDataPoint = true;
            //Test Procedure Call
            oPCDataSelectorModel.UpdateSampleGrpFlag(etySampleGrp.SampleGrpID.ToString(), hasDataPoint);

            //Post Test Condition Check
            #region PostConditioncheck
            bool bHasDP = false;

            //Get DataPoint from DB
            try
            {

                string localSQL = "SELECT HAS_DT_PT FROM OPC_DT_SAMPLE_GRP WHERE SAMPLE_GRP_NAME = 'DOTTestParasoftTesting123'";

                OracleDataReader drOracle = DBConnection.getInstance().ExecuteOracleQuery(localSQL, dbConn);

                if (drOracle != null && drOracle.Read())
                {
                    if (!drOracle.IsDBNull(0))
                    {
                        bHasDP = DAOHelper.ChangeStrToBool(drOracle.GetOracleString(0).ToString());                        
                    }
                }

                if (drOracle != null)
                {
                    drOracle.Close();
                    drOracle.Dispose();
                }
            }
            catch (Exception localException)
            {

            }

           // Assert.IsTrue(bHasDP);         
            #endregion

            #region CleanUp
            //Clean up inserted test data in DB
            //Delete testing DP
            dbConn = (OracleConnection)DBAccessor.Call("getConn");
            if (dbConn != null)
            {
                string localSQL = "Delete from OPC_DT_PT where DATA_PT_NAME = 'DOTTestParasoftDP1.Value'";
                DBConnection.getInstance().ExecuteAndReturnOracleNonQuery(localSQL, dbConn);
            }
            //Delete Testing sampleGrp
            DatalogDPGroupTrendDAO.GetInstance().DeleteOPCSampleGroupById(etySampleGrp.SampleGrpID.ToString());
            #endregion



        }*/

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("//dWGA", "/LeVrg")]
        public void TestGetDataPointsByName01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = OPCDataSelectorModelFactory.CreateOPCDataSelectorModel01();
            string opcServerName = string.Empty;
            string dataPtNameSubStr = string.Empty;
            List<EtyDataLogDPTrend> list = oPCDataSelectorModel.GetDataPointsByName(opcServerName, dataPtNameSubStr);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ECOJg", "+00PxQ")]
        public void TestOPCDataSelectorModelConstructor01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestUpdateDataPointDB01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            EtyDataLogDPTrend etyDP = new EtyDataLogDPTrend();
            //etyDP.OPCDataPointServer = "localserver";
            etyDP.EntityKey = 1;
            oPCDataSelectorModel.UpdateDataPointDB(etyDP);

            //test2
            etyDP.OPCDataPointName = "testing";
            oPCDataSelectorModel.UpdateDataPointDB(etyDP);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckConfiguredByOcc01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            bool bConfigured = oPCDataSelectorModel.CheckConfiguredByOcc("dataPoint1");
            //Assert.IsTrue(bConfigured);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIsOccLocation01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            bool bConfigured = oPCDataSelectorModel.IsOccLocation();   
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckStationGrp01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            bool bConfigured = oPCDataSelectorModel.CheckStationGrp("dataPoint1.Value", "DP19");            
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestUpdateVersionNum01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            bool bConfigured = oPCDataSelectorModel.UpdateVersionNum();
            Assert.IsTrue(bConfigured);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestBeginTransaction01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            oPCDataSelectorModel.BeginTransaction();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCommitTransaction01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            oPCDataSelectorModel.CommitTransaction();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRollBackTransaction01()
        {
            OPCDataSelectorModel oPCDataSelectorModel = new OPCDataSelectorModel();
            oPCDataSelectorModel.RollbackTransaction();
        }  

    }
}
