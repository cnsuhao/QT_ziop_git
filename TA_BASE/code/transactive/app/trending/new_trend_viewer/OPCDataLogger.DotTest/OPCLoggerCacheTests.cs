using Dottest.Framework;
using NUnit.Framework;
using OPCDataLogger;
using OPCDataLogger.DotTest.Factories;
using Dottest.Framework.RecordState;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace OPCDataLogger.DotTest
{
    [TestFixture()]
    public class OPCLoggerCacheTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+f8dHA", "/SbtIg")]
        public void TestGetInstance01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCache.GetInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9Vu7w", "+r1Liw")]
        public void TestReleaseInstance01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCache.GetInstance();
            OPCLoggerCache.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/qO3xQ", "/PLu2Q")]
        public void TestClearDataPoints01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            Dictionary<string, OPCDPGrpDetails> dataPointdic = new Dictionary<string, OPCDPGrpDetails>();
            dataPointdic.Add("Datapoint1.Value", new OPCDPGrpDetails());            
            oPCLoggerCacheAccessor.SetField("m_DataPointdic",dataPointdic);
            oPCLoggerCache.ClearDataPoints();
            //Post test condition check
            Assert.AreEqual(0, oPCLoggerCacheAccessor.GetFieldAccessor("m_DataPointdic").GetProperty("Count"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/xJ02Q", "+UrDdw")]
        public void TestOPCLoggerCacheConstructor01()
        {
            OPCLoggerCache oPCLoggerCache = (OPCLoggerCache)ReflectionAccessor.Construct("OPCLoggerCache");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/KIzzg", "/KeLuw")]
        public void TestFinalize01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            Accessor cacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            cacheAccessor.Call("Finalize");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9lF7w", "+xUZtA")]
        public void TestInitializeDataLogger01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            //Test1 ----- invalid database string
            oPCLoggerCacheAccessor.SetField("m_localConnectionString", "DataSource=;UserID=;Password=;");
            oPCLoggerCache.InitializeDataLogger();

            //Test2 ----- Valid database string but cannot connect to OPC
            //TODO Stub
            oPCLoggerCache.InitializeDataLogger();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeDataLogger02()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            //Test3 ----- Valid setup
            oPCLoggerCache.InitializeDataLogger();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/hggkQ", "+c7M5Q")]
        public void TestLoadDataPointTimeStamp01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            //TODO STUB DB Result
            oPCLoggerCache.LoadDataPointTimeStamp();
            //Post Test Condition Check
            Assert.AreNotEqual(0, oPCLoggerCacheAccessor.GetFieldAccessor("m_DataPointdic").GetProperty("Count"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+xMvHQ", "/KjMAQ")]
        public void TestInitializeAndConnectOPCServer01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            //TODO STUB
            bool b = oPCLoggerCache.InitializeAndConnectOPCServer();
            //Post Test Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+7d8GA", "+/TO2g")]
        public void TestGetNextSampleTime01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            DateTime currenttime = DateTime.Now;
            string startTime = string.Format("{0}:{1}", currenttime.Hour, currenttime.Minute); 
            double intervalInSecs = 120;
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCLoggerCache);
            DateTime dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", startTime, intervalInSecs);
            //Post Test Condition Check
            DateTime time = new DateTime(currenttime.Year,currenttime.Month,currenttime.Day,currenttime.Hour, currenttime.Minute,0);
            Assert.AreEqual(time, dateTime);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/d5YMw", "/uT7oQ")]
        public void TestConnectDPToOPC01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            oPCLoggerCache.ConnectDPToOPC();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+R62Tw", "/Zankg")]
        public void TestterminateThread01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            oPCLoggerCache.terminateThread();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+01saw", "+WQYfQ")]
        public void TestGetOPCLoggerDataPoints01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            Dictionary<string, OPCDPGrpDetails> dictionary = oPCLoggerCache.GetOPCLoggerDataPoints();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+SB27Q", "/t0IAg")]
        public void TestisNumeric01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            string val = "22";
            NumberStyles numberStyle = NumberStyles.AllowTrailingSign;
            bool b = oPCLoggerCache.isNumeric(val, numberStyle);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/8biFw", "/LEZDQ")]
        public void TestisBoolean01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache01();
            string val = "1";
            bool b = oPCLoggerCache.isBoolean(val);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Mq/Kw", "+Kgmug")]
        public void TestGetLoggerInterval01()
        {
            OPCLoggerCache oPCLoggerCache = OPCLoggerCacheFactory.CreateOPCLoggerCache02();
            int i = oPCLoggerCache.GetLoggerInterval();
        }

    }
}
