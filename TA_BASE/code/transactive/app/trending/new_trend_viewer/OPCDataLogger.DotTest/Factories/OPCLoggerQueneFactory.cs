using Dottest.Framework;
using NUnit.Framework;
using OPCDataLogger;
using System;

namespace OPCDataLogger.DotTest.Factories
{
    [TestFixture(), ObjectFactoryType()]
    public class OPCLoggerQueneFactory
    {
        private static OPCLoggerQuene s_oPCLoggerQuene = null;
        [ObjectFactoryMethod]
        [HashCode("+X2NKw", "/DNZ5Q")]
        internal static OPCLoggerQuene CreateOPCLoggerQuene01()
        {
            string serverName = string.Empty;
            string hostName = string.Empty;
            OPCLoggerQuene oPCLoggerQuene = new OPCLoggerQuene(serverName, hostName);
            return oPCLoggerQuene;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateOPCLoggerQuene01()
        {
            OPCLoggerQuene oPCLoggerQuene = CreateOPCLoggerQuene01();
            Assert.IsNotNull(oPCLoggerQuene);
        }


        [ObjectFactoryMethod]
        [HashCode("+X2NKw", "/DNZ5Q")]
        internal static OPCLoggerQuene CreateOPCLoggerQuene02()
        {
            if (s_oPCLoggerQuene == null)
           {
               s_oPCLoggerQuene = new OPCLoggerQuene("ISCS","Hostname");
           }
            return s_oPCLoggerQuene;
        }

        internal static void ReleaseOPCLoggerQuene02()
        {
            if(s_oPCLoggerQuene != null)
            {
                s_oPCLoggerQuene = null;
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateOPCLoggerQuene02()
        {
            OPCLoggerQuene oPCLoggerQuene = CreateOPCLoggerQuene01();
            Assert.IsNotNull(oPCLoggerQuene);
        }

    }
}
