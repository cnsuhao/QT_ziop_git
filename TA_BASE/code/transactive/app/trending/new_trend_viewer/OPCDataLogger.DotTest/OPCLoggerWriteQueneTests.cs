using Dottest.Framework;
using NUnit.Framework;
using OPCDataLogger;
using System.Collections.Generic;

namespace OPCDataLogger.DotTest
{
    [TestFixture()]
    public class OPCLoggerWriteQueneTests
    {
        public static System.Threading.AutoResetEvent m_signal = new System.Threading.AutoResetEvent(false);

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/VOjcQ", "/pV2pA")]
        public void TestOPCLoggerWriteQueneConstructor01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestFinalise01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            Queue<Entity.Trending.EtyTrendLog> quene = new  Queue<Entity.Trending.EtyTrendLog>();
            quene.Enqueue(new Entity.Trending.EtyTrendLog());
            oPCLoggerWriteQueneAccessor.SetField("m_writeQuene", quene);
            //Test Procedure Call
            oPCLoggerWriteQueneAccessor.Call("Finalize");
            //Post Test Condition Check
            Assert.IsNull(oPCLoggerWriteQueneAccessor.GetField("m_writeQuene"));
            Assert.IsNull(oPCLoggerWriteQueneAccessor.GetField("m_addItemSignal"));
            Assert.IsNull(oPCLoggerWriteQueneAccessor.GetField("m_thread"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestClearQuene01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            Queue<Entity.Trending.EtyTrendLog> quene = new Queue<Entity.Trending.EtyTrendLog>();
            quene.Enqueue(new Entity.Trending.EtyTrendLog());
            oPCLoggerWriteQueneAccessor.SetField("m_writeQuene", quene);
            //Test Procedure Call
            oPCLoggerWriteQueneAccessor.Call("ClearQuene");
            //Post Condition Check
            Assert.AreEqual(0,oPCLoggerWriteQueneAccessor.GetFieldAccessor("m_writeQuene").GetProperty("Count"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRun01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = DotTest.Factories.OPCLoggerWriteQueneFactory.CreateOPCLoggerWriteQuene01();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            //Test Procedure Call
            //push a item
            Entity.Trending.EtyTrendLog etyTrendLog = new Entity.Trending.EtyTrendLog();
            oPCLoggerWriteQuene.PushToQuene(etyTrendLog);
            oPCLoggerWriteQuene.PushToQuene(new Entity.Trending.EtyTrendLog());
            oPCLoggerWriteQuene.PushToQuene(new Entity.Trending.EtyTrendLog());
            System.Threading.ThreadStart func = new System.Threading.ThreadStart(oPCLoggerWriteQuene.Run);
            System.Threading.Thread t1 = new System.Threading.Thread(func);
            t1.Start();
            //m_signal.WaitOne();
            //Post Condition Check
           // Assert.AreEqual(0, oPCLoggerWriteQueneAccessor.GetFieldAccessor("m_writeQuene").GetProperty("Count"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIsQueneEmpty01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            //Test Procedure Call
            bool b = (bool)oPCLoggerWriteQueneAccessor.Call("IsQueneEmpty");
            //Post Condition Check
            Assert.IsTrue(b);
        }

        public void threadProc()
        {

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestTerminateAndWait01()
        {
            //Testing -- exception thrown by join method for thread NotinStart state
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            System.Threading.ThreadStart ss = new System.Threading.ThreadStart(threadProc);
            System.Threading.Thread thr1 = new System.Threading.Thread(ss);
            oPCLoggerWriteQueneAccessor.SetField("m_thread", thr1);
            //Test Procedure Call
            oPCLoggerWriteQuene.TerminateAndWait();
            //Post Condition Check
            Assert.IsTrue((bool)oPCLoggerWriteQueneAccessor.GetField("m_terminate"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestTerminateAndWait02()
        {
            //testing ----- valid state
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            oPCLoggerWriteQueneAccessor.SetField("m_thread", System.Threading.Thread.CurrentThread);
            //Test Procedure Call
            oPCLoggerWriteQuene.TerminateAndWait();
            //Post Condition Check
            Assert.IsTrue((bool)oPCLoggerWriteQueneAccessor.GetField("m_terminate"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIsTerminated01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            //Test Procedure Call
            oPCLoggerWriteQuene.IsTerminated();
            //Post Condition Check
            Assert.IsFalse((bool)oPCLoggerWriteQueneAccessor.GetField("m_terminate"));
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestPushToQuene01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            Queue<Entity.Trending.EtyTrendLog> writeQuene = new Queue<Entity.Trending.EtyTrendLog>();
            for (int i = 0; i < 100001; i++)
            {
                writeQuene.Enqueue(new Entity.Trending.EtyTrendLog());
            }
            oPCLoggerWriteQueneAccessor.SetField("m_writeQuene", writeQuene);
            //TODO stub for Max Count
            //Test Procedure Call
           oPCLoggerWriteQuene.PushToQuene(new Entity.Trending.EtyTrendLog());
            //Post Condition Check 
           Assert.AreEqual(100001, oPCLoggerWriteQueneAccessor.GetFieldAccessor("m_writeQuene").GetProperty("Count"));

        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckDatabaseConnection01()
        {
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            oPCLoggerWriteQueneAccessor.SetField("m_dbDisconnected", true);
            //Test Procedure Call
            oPCLoggerWriteQueneAccessor.Call("CheckDatabaseConnection");
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckDatabaseConnection02()
        {
            //Test --- connection is not openned
            OPCLoggerWriteQuene oPCLoggerWriteQuene = new OPCLoggerWriteQuene();
            Accessor oPCLoggerWriteQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerWriteQuene);
            oPCLoggerWriteQueneAccessor.SetField("m_dbDisconnected", true);
            //Test Procedure Call
            oPCLoggerWriteQueneAccessor.Call("CheckDatabaseConnection");
        }




    }
}
