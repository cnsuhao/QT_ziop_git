using Dottest.Framework;
using NUnit.Framework;
using OPCDataLogger;
using System;
using OPCDataLogger.DotTest.Factories;
using Dottest.Framework.RecordState;
using System.Collections.Generic;

namespace OPCDataLogger.DotTest
{
    [TestFixture()]
    public class OPCLoggerQueneTests
    {
        public static System.Threading.AutoResetEvent m_OPCLoggerQuenesignal = new System.Threading.AutoResetEvent(false);

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+fiIOQ", "/bnk2Q")]
        public void TestOPCLoggerQueneConstructor01()
        {
            string serverName = string.Empty;
            string hostName = string.Empty;
            //Test Procedure Call
            OPCLoggerQuene oPCLoggerQuene = new OPCLoggerQuene(serverName, hostName);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/aqgvg", "+4LDEQ")]
        public void TestsetServiceRunning01()
        {
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            bool flag = false;
            //Test Procedure Call
            oPCLoggerQuene.setServiceRunning(flag);
            //Post Condition Check
            Assert.AreEqual(flag, oPCLoggerQueneAccessor.GetField("m_serviceStarted"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+R5yzA", "+d14Ww")]
        public void TestRun01()
        {
            //Testing ----- Valid SetUp
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene02();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_serviceStarted", true);
            Dictionary<string, OPCDPGrpDetails> opcdic = new Dictionary<string, OPCDPGrpDetails>();
            OPCDPGrpDetails deta1 = new OPCDPGrpDetails();
            opcdic.Add("testingDP1", new OPCDPGrpDetails());
            Accessor oPCMagerAccessor = ReflectionAccessor.Wrap(OPCDataPointManager.GetInstance());
            oPCMagerAccessor.SetField("m_DataPointdic", opcdic);
            System.Threading.ThreadStart func = new System.Threading.ThreadStart( oPCLoggerQuene.Run);
            System.Threading.Thread t1 = new System.Threading.Thread(func);
            t1.Start();
            //wait till test completes
            m_OPCLoggerQuenesignal.WaitOne();

            //PostCondition Check
            //check insert log of data point in WriteQuene.
            Assert.AreEqual(1, oPCMagerAccessor.GetFieldAccessor("m_writeQuene").GetFieldAccessor("m_writeQuene").GetProperty("Count"));


            //release all instances
            OPCDataPointManager.ReleaseInstance();            
            OPCLoggerQueneFactory.ReleaseOPCLoggerQuene02();
            
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRun02()
        {
            //Testing ----- invalid datapoint Value from OPCProxy
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene02();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_serviceStarted", true);
            Dictionary<string, OPCDPGrpDetails> opcdic = new Dictionary<string, OPCDPGrpDetails>();
            OPCDPGrpDetails deta1 = new OPCDPGrpDetails();
            opcdic.Add("testingDP1", new OPCDPGrpDetails());
            Accessor oPCMagerAccessor = ReflectionAccessor.Wrap(OPCDataPointManager.GetInstance());
            oPCMagerAccessor.SetField("m_DataPointdic", opcdic);
            System.Threading.ThreadStart func = new System.Threading.ThreadStart(oPCLoggerQuene.Run);
            System.Threading.Thread t1 = new System.Threading.Thread(func);
            t1.Start();
            //wait till test completes
            m_OPCLoggerQuenesignal.WaitOne();

            //PostCondition Check
            //check no data point in WriteQuene.
            Assert.AreEqual(0, oPCMagerAccessor.GetFieldAccessor("m_writeQuene").GetFieldAccessor("m_writeQuene").GetProperty("Count"));


            //release all instances
            OPCDataPointManager.ReleaseInstance();
            OPCLoggerQueneFactory.ReleaseOPCLoggerQuene02();

          
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRun03()
        {
            //Testing ----- valid datapoint value but old value is 1 and new value is 0 and deltaValue = 1
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene02();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_serviceStarted", true);
            Dictionary<string, OPCDPGrpDetails> opcdic = new Dictionary<string, OPCDPGrpDetails>();
            OPCDPGrpDetails deta1 = new OPCDPGrpDetails();
            deta1.Delta = 1;
            deta1.OldValue = "1";
            opcdic.Add("testingDP1", deta1);
            Accessor oPCMagerAccessor = ReflectionAccessor.Wrap(OPCDataPointManager.GetInstance());
            oPCMagerAccessor.SetField("m_DataPointdic", opcdic);
            System.Threading.ThreadStart func = new System.Threading.ThreadStart(oPCLoggerQuene.Run);
            System.Threading.Thread t1 = new System.Threading.Thread(func);
            t1.Start();
            //wait till test completes
            m_OPCLoggerQuenesignal.WaitOne();

            //PostCondition Check
            //check no data point in WriteQuene.
            Assert.AreEqual(1, oPCMagerAccessor.GetFieldAccessor("m_writeQuene").GetFieldAccessor("m_writeQuene").GetProperty("Count"));

            //release all instances
            OPCDataPointManager.ReleaseInstance();
            OPCLoggerQueneFactory.ReleaseOPCLoggerQuene02();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRun04()
        {
            //Testing ----- Exception cases
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene02();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_serviceStarted", true);
            Dictionary<string, OPCDPGrpDetails> opcdic = new Dictionary<string, OPCDPGrpDetails>();
            opcdic.Add("testingDP1", null);
            Accessor oPCMagerAccessor = ReflectionAccessor.Wrap(OPCDataPointManager.GetInstance());
            oPCMagerAccessor.SetField("m_DataPointdic", opcdic);
            System.Threading.ThreadStart func = new System.Threading.ThreadStart(oPCLoggerQuene.Run);
            System.Threading.Thread t1 = new System.Threading.Thread(func);
            t1.Start();
            //wait till test completes
            m_OPCLoggerQuenesignal.WaitOne();
            //release all instances
            OPCDataPointManager.ReleaseInstance();
            OPCLoggerQueneFactory.ReleaseOPCLoggerQuene02();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRun05()
        {
            //Testing ----- Initialization data logger failed
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene02();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_serviceStarted", true);
            oPCLoggerQuene.Run();
           //release all instances
            OPCDataPointManager.ReleaseInstance();
            OPCLoggerQueneFactory.ReleaseOPCLoggerQuene02();

        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+1342g", "/u3soQ")]
        public void TestCheckOracleConnection01()
        {
            //testing ---- exception throw for null exception string
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string exceptionString = null;
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            oPCLoggerQueneAccessor.Call("CheckOracleConnection", exceptionString);
            //Post Condition Check
            Assert.IsFalse((bool)oPCLoggerQueneAccessor.GetField("m_dbDisconnected"));


            //testing ---- no exception passed
            exceptionString = "";            
            //Test Procedure Call
            oPCLoggerQueneAccessor.Call("CheckOracleConnection", exceptionString);
            //Post Condition Check
            Assert.IsFalse((bool)oPCLoggerQueneAccessor.GetField("m_dbDisconnected"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckOracleConnection02()
        {
            // testing ---- exception is passed
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string exceptionString = "Database Connection Failure testing";
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.Call("CheckOracleConnection", exceptionString);

            //test2 --- exception passed but flag already set.
            oPCLoggerQueneAccessor.SetField("m_dbDisconnected", true);
            oPCLoggerQueneAccessor.Call("CheckOracleConnection", exceptionString);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+rcJmQ", "+xBQ3g")]
        public void TestTestOracleConnection01()
        {
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            bool b = (bool)oPCLoggerQueneAccessor.Call("TestOracleConnection");

            //Test 2 --- databse connection failed again
            oPCLoggerQueneAccessor.SetField("m_dbDisconnected",true);
            b = (bool)oPCLoggerQueneAccessor.Call("TestOracleConnection");

            //Test3 -- Database connection OK
            oPCLoggerQueneAccessor.SetField("m_dbDisconnected", true);
            b = (bool)oPCLoggerQueneAccessor.Call("TestOracleConnection");

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+6bEVA", "/RvYsQ")]
        public void TestCheckSampleGroupFlag01()
        {
            //Testing --- SampleGrp Config Variable changed and throws exception in removeOPCItems and intialization
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            oPCLoggerQueneAccessor.Call("CheckSampleGroupFlag");
            //Post Condition Check
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckSampleGroupFlag02()
        {
            // Testing -- SampleGrp config Changed and valid setup for re initializations.
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.Call("CheckSampleGroupFlag");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/B7hBA", "+cNRXQ")]
        public void TestCheckOPCConnection01()
        {
            // Test ---- OPC Server is not connected
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            bool b = (bool)oPCLoggerQueneAccessor.Call("CheckOPCConnection");
            //Post Condition Check
            Assert.IsFalse(b);
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCheckOPCConnection02()
        {
            // Test ---- OPC Server is Connected
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            bool b = (bool)oPCLoggerQueneAccessor.Call("CheckOPCConnection");
            //Post Condition Check
            Assert.IsTrue(b);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+KK6Eg", "+TLZOQ")]
        public void TestCanLogDataPT01()
        {
            //Testing --- NextSampleTime is null ... first time logging the datapoint
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            OPCDPGrpDetails opcDPGrp = OPCDPGrpDetailsFactory.CreateOPCDPGrpDetails01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            bool b = (bool)oPCLoggerQueneAccessor.Call("CanLogDataPT", opcDPGrp);
            //Post Condition Check
            Assert.IsTrue(b);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCanLogDataPT02()
        {
            //testing -- current time is greater than next sample time of datapoint
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            OPCDPGrpDetails opcDPGrp = OPCDPGrpDetailsFactory.CreateOPCDPGrpDetails01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            opcDPGrp.NextSampleTime = DateTime.Now;
            //Test Procedure Call
            bool b = (bool)oPCLoggerQueneAccessor.Call("CanLogDataPT", opcDPGrp);
            //Post Condition Check
            Assert.IsTrue(b);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCanLogDataPT03()
        {
            //testing -- current time is less than next sample time of datapoint
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            OPCDPGrpDetails opcDPGrp = OPCDPGrpDetailsFactory.CreateOPCDPGrpDetails01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            opcDPGrp.NextSampleTime = DateTime.Now;
            //Test Procedure Call
            bool b = (bool)oPCLoggerQueneAccessor.Call("CanLogDataPT", opcDPGrp);
            //Post Condition Check
            Assert.IsFalse(b);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+PPY7g", "+ZcNRw")]
        public void TestGetOPCValue01()
        {
            //Testing --- DataPoint not connected to OPC Server Proxy
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string dataPointname = "SampleDP1";
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            string str = (string)oPCLoggerQueneAccessor.Call("GetOPCValue", dataPointname);
            //Post Condition Check
            Assert.AreEqual("",str);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]    
        public void TestGetOPCValue02()
        {
            // Testing --- Datapoint value returned is boolean type
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string dataPointname = "SampleDP1";         
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            string str = (string)oPCLoggerQueneAccessor.Call("GetOPCValue", dataPointname);
            //Post Condition Check
            Assert.AreEqual("1", str);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetOPCValue03()
        {
            //Testing ---- DataPoint value returned is numeric type
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string dataPointname = "SampleDP1";
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            string str = (string)oPCLoggerQueneAccessor.Call("GetOPCValue", dataPointname);
            //Post Condition Check
            Assert.AreEqual("22", str);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetOPCValue04()
        {
            //Testing --- DataPoint value returned is other type than boolean and numeric
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            string dataPointname = "SampleDP1";
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            //Test Procedure Call
            string str = (string)oPCLoggerQueneAccessor.Call("GetOPCValue", dataPointname);
            //Post Condition Check
            Assert.AreEqual("0", str);
        }

        public void threadProc()
        {

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestTerminateAndWait01()
        {
            //Testing -- thread with not started state --- throws exception
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            System.Threading.ThreadStart ss = new System.Threading.ThreadStart(threadProc);
            System.Threading.Thread thr1 = new System.Threading.Thread(ss);
            oPCLoggerQueneAccessor.SetField("m_thread", thr1);
            //Test Procedure Call
            oPCLoggerQuene.TerminateAndWait();
            //Post Condition Call
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestTerminateAndWait02()
        {
            //Testing -- normal flow
            OPCLoggerQuene oPCLoggerQuene = OPCLoggerQueneFactory.CreateOPCLoggerQuene01();
            Accessor oPCLoggerQueneAccessor = ReflectionAccessor.Wrap(oPCLoggerQuene);
            oPCLoggerQueneAccessor.SetField("m_thread", System.Threading.Thread.CurrentThread);
            //Test Procedure Call
            oPCLoggerQuene.TerminateAndWait();
            //Post Condition Call
        }

    }
}
