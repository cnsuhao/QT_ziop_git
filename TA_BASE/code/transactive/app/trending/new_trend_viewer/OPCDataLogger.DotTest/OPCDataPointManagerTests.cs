using Dottest.Framework;
using NUnit.Framework;
using OPCDataLogger;
using OPCDataLogger.DotTest.Factories;
using Dottest.Framework.RecordState;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace OPCDataLogger.DotTest
{
    [TestFixture()]
    public class OPCDataPointManagerTests
    {
        bool bExitApplicationCalled = false;
        [TestFixtureSetUp]
        public void SuiteSetUp()
        {
            //release if has been used by any other test suites.
            OPCDataPointManager.ReleaseInstance();
        }

        [SetUp]
        public void TestSetup()
        {            
            ConfigureFileHelper.GetInstance().init();
            bExitApplicationCalled = false;
        }

        [TearDown]
        public void TesttearDown()
        {
            OPCDataPointManager.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+QtfHQ", "/Vgb4w")]
        public void TestGetInstance01()
        {
            // Having valid TimeinMilliSecs -- logging sleep time in config file
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+jMwlw", "/XahIQ")]
        public void TestReleaseInstance01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            OPCDataPointManager.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/qO3xQ", "/PLu2Q")]
        public void TestClearDataPoints01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCDataPointManagerAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            Dictionary<string, OPCDPGrpDetails> dataPointdic = new Dictionary<string, OPCDPGrpDetails>();
            dataPointdic.Add("Datapoint1.Value", new OPCDPGrpDetails());
            oPCDataPointManagerAccessor.SetField("m_DataPointdic", dataPointdic);
            oPCDataPointManager.ClearDataPoints();
            //Post test condition check
            Assert.AreEqual(0, oPCDataPointManagerAccessor.GetFieldAccessor("m_DataPointdic").GetProperty("Count"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/xJ02Q", "+UrDdw")]
        public void TestOPCLoggerCacheConstructor01()
        {
            OPCDataPointManager oPCDataPointManager = (OPCDataPointManager)ReflectionAccessor.Construct("OPCDataLogger.OPCDataPointManager");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/KIzzg", "/KeLuw")]
        public void TestFinalize01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor managerAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            OPCDataPointManager.ReleaseInstance();
            managerAccessor.Call("Finalize");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9lF7w", "+xUZtA")]
        public void TestInitializeDataLogger01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            //Test1 ----- invalid database string
            oPCLoggerCacheAccessor.SetField("m_localConnectionString", "DataSource=;UserID=;Password=;");
            oPCDataPointManager.ExitApplicationEvent += new OPCDataPointManager.VoidEventHandler(oPCDataPointManager_ExitApplicationEvent);
            //Test Procedure Call
            oPCDataPointManager.InitializeDataLogger(false); 
            //Post Condition Check
            Assert.IsTrue(bExitApplicationCalled);
        }

        void oPCDataPointManager_ExitApplicationEvent()
        {
           bExitApplicationCalled = true;
        }
        
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeDataLogger02()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            //Test3 ----- Valid setup
            oPCDataPointManager.InitializeDataLogger(false);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9lF7w", "+xUZtA")]
        public void TestInitializeDataLogger03()
        {
            //Test2 ----- Valid database string but cannot connect to OPC
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            oPCDataPointManager.ExitApplicationEvent += new OPCDataPointManager.VoidEventHandler(oPCDataPointManager_ExitApplicationEvent);
            //Test Procedure Call
            oPCDataPointManager.InitializeDataLogger(false);
            //Post Condition Check
            Assert.IsTrue(bExitApplicationCalled);

            bExitApplicationCalled = false;

            //Test ----- Valid database string but cannot connect to OPC but not first called
            //Test Procedure Call
            oPCDataPointManager.InitializeDataLogger(true);
            //Post Condition Check
            Assert.IsFalse(bExitApplicationCalled);
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeDataLogger04()
        { 
            //Test ----- Exception thrown
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);           
            oPCLoggerCacheAccessor.SetField("m_localConnectionString", "DataSource=;UserID=;Password=;");
            //Test Procedure Call
            oPCDataPointManager.InitializeDataLogger(false);
            //Post Condition Check            
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/hggkQ", "+c7M5Q")]
        public void TestLoadDataPointTimeStamp01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            oPCDataPointManager.LoadDataPointTimeStamp();
            //Post Test Condition Check
            Assert.AreEqual(1, oPCLoggerCacheAccessor.GetFieldAccessor("m_DataPointdic").GetProperty("Count"));
            Dictionary<string, OPCDPGrpDetails> dic = (Dictionary<string, OPCDPGrpDetails>)oPCLoggerCacheAccessor.GetField("m_DataPointdic");
            string key1 = "SampleName";
            OPCDPGrpDetails opcDetails = dic[key1];
            Assert.AreEqual(60,opcDetails.Interval);
            //TODO           

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+xMvHQ", "/KjMAQ")]
        public void TestInitializeAndConnectOPCServer01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);           
            bool b = oPCDataPointManager.InitializeAndConnectOPCServer();
            //Post Test Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+7d8GA", "+/TO2g")]
        public void TestGetNextSampleTime01()
        {
            //Test --- First time called for intialization of the logger datapoints
            // Current time is greater than start time
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            DateTime currenttime = System.DateTime.Now;
            currenttime = new DateTime(currenttime.Year, currenttime.Month, currenttime.Day, (currenttime.Hour-1) , currenttime.Minute, 0,0);
            double intervalInSecs = 120;
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            DateTime dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", currenttime, intervalInSecs, true);
            //Post Test Condition Check
            currenttime = System.DateTime.Now;
            currenttime = new DateTime(currenttime.Year, currenttime.Month, currenttime.Day, currenttime.Hour, currenttime.Minute, 0, 0);
            DateTime time = currenttime.AddSeconds(120);
            Assert.AreEqual(time, dateTime);


            ////Test 2 --- Second time called for calculating next log time
            // Current time is greater than planned log time  
            //current time is System.DateTime dt = new DateTime(2013, 01, 29, 14, 25, 50);
            currenttime = System.DateTime.Now;
            currenttime = new DateTime(currenttime.Year, currenttime.Month, currenttime.Day, currenttime.Hour , currenttime.Minute-1, 0,0);
            DateTime dateTime1 = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", currenttime, intervalInSecs, false);
            //Post Test Condition Check
            currenttime = currenttime.AddSeconds(120);
            Assert.AreEqual(currenttime, dateTime1);
        
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]       
        public void TestGetNextSampleTime02()
        {
            //Test --- First time called for intialization of the logger datapoints
            // Current time is correct log time
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            DateTime starttime =  new DateTime(2013, 01, 29, 10, 25, 00);
            double intervalInSecs = 50;
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            DateTime dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", starttime, intervalInSecs, true);
            //Post Test Condition Check
            Assert.AreEqual(System.DateTime.Now, dateTime);


            ////Test 2 --- Second time called for calculating next log time
            // Current time is greater than planned log time            
            DateTime plannedTime = new DateTime(2013, 01, 29, 14, 25, 50);
            DateTime dateTime1 = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", plannedTime, intervalInSecs, false);
            //Post Test Condition Check
            DateTime currenttime = System.DateTime.Now;
            currenttime = currenttime.AddSeconds(intervalInSecs);
            Assert.AreEqual(currenttime, dateTime1);

            //Test --- current time is less than start time
            starttime = new DateTime(2013, 01, 29, 20, 25, 00);
            dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", starttime, intervalInSecs, true);
            //Post Test Condition Check
            Assert.AreEqual(starttime, dateTime);


            //Test --- current time is less than planned time
            //not possible case in real time
            plannedTime = new DateTime(2013, 01, 29, 15, 21, 50);
            dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", plannedTime, intervalInSecs, false);
            //Post Test Condition Check
            plannedTime = plannedTime.AddSeconds(50);
            Assert.AreEqual(plannedTime, dateTime);

            //Test --- currenttime is planned time with reminder 0
            plannedTime = new DateTime(2013, 01, 29, 14, 24, 10);
            dateTime = (DateTime)oPCLoggerCacheAccessor.Call("GetNextSampleTime", plannedTime, intervalInSecs, false);
            //Post Test Condition Check
            plannedTime = System.DateTime.Now;
            plannedTime = plannedTime.AddSeconds(50);
            Assert.AreEqual(plannedTime, dateTime);




        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/d5YMw", "/uT7oQ")]
        public void TestConnectDPToOPC01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            Dictionary<string, OPCDPGrpDetails> dataPointdic = new Dictionary<string,OPCDPGrpDetails>();
            dataPointdic.Add("DP1", new OPCDPGrpDetails());
            oPCLoggerCacheAccessor.SetField("m_DataPointdic", dataPointdic);
            oPCDataPointManager.ConnectDPToOPC();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestConnectDPToOPC02()
        {
            //Test2 ---- Exception
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Accessor oPCLoggerCacheAccessor = ReflectionAccessor.Wrap(oPCDataPointManager);
            Dictionary<string, OPCDPGrpDetails> dataPointdic = new Dictionary<string, OPCDPGrpDetails>();
            dataPointdic.Add("DP1", new OPCDPGrpDetails());
            oPCLoggerCacheAccessor.SetField("m_DataPointdic", dataPointdic);
            oPCDataPointManager.ConnectDPToOPC();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+R62Tw", "/Zankg")]
        public void TestTerminateAndWait01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance(); 
            oPCDataPointManager.TerminateAndWait();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+01saw", "+WQYfQ")]
        public void TestGetOPCLoggerDataPoints01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance(); 
            Dictionary<string, OPCDPGrpDetails> dictionary = oPCDataPointManager.GetOPCLoggerDataPoints();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+SB27Q", "/t0IAg")]
        public void TestisNumeric01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            string val = "22";
            NumberStyles numberStyle = NumberStyles.AllowTrailingSign;
            bool b = oPCDataPointManager.isNumeric(val, numberStyle);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/8biFw", "/LEZDQ")]
        public void TestisBoolean01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance(); 
            string val = "1";
            bool b = oPCDataPointManager.isBoolean(val);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Mq/Kw", "+Kgmug")]
        public void TestGetLoggerInterval01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            int i = oPCDataPointManager.GetLoggerInterval();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestPushToWriteQuene01()
        {
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            Entity.Trending.EtyTrendLog tre = new Entity.Trending.EtyTrendLog();
            oPCDataPointManager.PushToWriteQuene(tre);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeOPCSetting01()
        {
            //Test ---- Exception thrown
            OPCDataPointManager oPCDataPointManager = OPCDataPointManager.GetInstance();
            oPCDataPointManager.InitializeOPCSetting("1223");
        }



    }
}
