using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;
using System;

namespace DotTest.OPCTrendLib
{
    [TestFixture()]
    public class ParserExceptionTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9UOog", "+5W04g")]
        public void TestParserExceptionConstructor01()
        {
            string msg = string.Empty;
            ParserException parserException = new ParserException(msg);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)parserException.HelpLink);
            recorder.Record((string)parserException.Message);
            recorder.Record((string)parserException.Source);
            recorder.Record((string)parserException.StackTrace);
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/m/Wyw", "/rdfuQ")]
        public void TestParserExceptionConstructor02()
        {
            Error errorCode = Error.IndentiferExpected;
            int pos = int.MinValue;
            ParserException parserException = new ParserException(errorCode, pos);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)parserException.HelpLink);
            recorder.Record((string)parserException.Message);
            recorder.Record((string)parserException.Source);
            recorder.Record((string)parserException.StackTrace);
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/d/Xcg", "+rli3g")]
        public void TestInternalError01()
        {
            ParserException parserException = ParserException.InternalError();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<string>(delegate { return (string)parserException.HelpLink; });
            recorder.Record<string>(delegate { return (string)parserException.Message; });
            recorder.Record<string>(delegate { return (string)parserException.Source; });
            recorder.Record<string>(delegate { return (string)parserException.StackTrace; });
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/3CW7A", "+itT5Q")]
        public void TestNoParenBefore01()
        {
            string paren = string.Empty;
            ParserException parserException = ParserException.NoParenBefore(paren);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<string>(delegate { return (string)parserException.HelpLink; });
            recorder.Record<string>(delegate { return (string)parserException.Message; });
            recorder.Record<string>(delegate { return (string)parserException.Source; });
            recorder.Record<string>(delegate { return (string)parserException.StackTrace; });
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/OEcrQ", "/paNuA")]
        public void TestParenNotMatch01()
        {
            char paren = char.MinValue;
            ParserException parserException = ParserException.ParenNotMatch(paren);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<string>(delegate { return (string)parserException.HelpLink; });
            recorder.Record<string>(delegate { return (string)parserException.Message; });
            recorder.Record<string>(delegate { return (string)parserException.Source; });
            recorder.Record<string>(delegate { return (string)parserException.StackTrace; });
            recorder.FinishRecording();
            #endregion
        }

    }
}
