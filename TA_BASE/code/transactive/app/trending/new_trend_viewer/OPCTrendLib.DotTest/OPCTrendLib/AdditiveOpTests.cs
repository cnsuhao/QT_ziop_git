using Dottest.Framework;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using OPCTrendLib;

namespace DotTest.OPCTrendLib
{
    [TestFixture()]
    class AdditiveOpTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessArg01()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(4);
            Result res2 = new Result(2);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessArg02()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(4.0);
            Result res2 = new Result(2);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessArg03()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(4);
            Result res2 = new Result(2.0);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [ExpectedException(typeof(System.NotSupportedException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg01()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(Evaluator),null);
            Result res2 = new Result(2);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }


        [ExpectedException(typeof(System.NotSupportedException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg02()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(evaluater);
            Result res2 = new Result(typeof(int),null);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [ExpectedException(typeof(System.InvalidCastException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg03()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(null,null);
            Result res2 = new Result(typeof(int), 1);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        //[ExpectedException(typeof(System.InvalidCastException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg04()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(null, null);
            Result res2 = new Result(typeof(Evaluator), evaluater);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            //opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg05()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(null, null);
            Result res2 = new Result(typeof(string), "Testing");
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg06()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(string), "Testing");
            Result res2 = new Result(null, null);           
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        [ExpectedException(typeof(System.InvalidCastException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg07()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(int), 1);
            Result res2 = new Result(null, null);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            opAccessor.Call("ProcessArg", evaluater, argArray);
        }

        //[ExpectedException(typeof(System.InvalidCastException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_ProcessArg08()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(Evaluator), evaluater);
            Result res2 = new Result(null, null);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            //opAccessor.Call("ProcessArg", evaluater, argArray);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestDoEval01()
        {
            //testing --- not primitive types are compared
            AdditiveOp op = new AdditiveOp();
            op.ToString();
            Accessor opAccessor = ReflectionAccessor.Wrap(op);
            Evaluator evaluater = new Evaluator();
            Result[] argArray = new Result[2];
            Result res1 = new Result("string");
            Result res2 = new Result(2);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            Result result = (Result)opAccessor.Call("DoEval", evaluater, argArray);
            //Post Condition Check
            Assert.AreEqual("string2", result.Value);

            //testing -- null type
            argArray = new Result[2];
            res1 = new Result(null,null);
            res2 = new Result(null, null);
            argArray[0] = res1;
            argArray[1] = res2;
            //Test Procedure Call
            result = (Result)opAccessor.Call("DoEval", evaluater, argArray);
            //Post Condition Check

        }
    }
}

