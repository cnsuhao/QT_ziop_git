using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;

namespace DotTest.OPCTrendLib
{
    [TestFixture()]
    public class CompareOpTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/tUJyg", "+jZElA")]
        public void TestCompareOpConstructor01()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            compareOp.ToString();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessResult01()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            Accessor compareOpAccessor = ReflectionAccessor.Wrap(compareOp);
            compareOpAccessor.Call("ProcessResult",1);

            //test2 ---- result-0
            compareOpAccessor.Call("ProcessResult", 0);

            //test3 --- result-0 and CompareResult.Equal
            compareOpAccessor.SetField("_compareResult", CompareResult.Equal);
            compareOpAccessor.Call("ProcessResult", 0);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestDoEval01()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            Accessor compareOpAccessor = ReflectionAccessor.Wrap(compareOp);
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(int),null);
            Result res2 = new Result(typeof(int),null);
            argArray[0] = res1;
            argArray[1] = res2;
            compareOpAccessor.Call("DoEval", new Evaluator(), argArray);
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestDoEval02()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            Accessor compareOpAccessor = ReflectionAccessor.Wrap(compareOp);
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(int), null);
            Result res2 = new Result(typeof(int), 2);
            argArray[0] = res1;
            argArray[1] = res2;
            compareOpAccessor.Call("DoEval", new Evaluator(), argArray);
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessArg01()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            Accessor compareOpAccessor = ReflectionAccessor.Wrap(compareOp);
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(int), 1);
            Result res2 = new Result(typeof(short), 2);
            argArray[0] = res1;
            argArray[1] = res2;
            compareOpAccessor.Call("ProcessArg", new Evaluator(), argArray);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestProcessArg02()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            Accessor compareOpAccessor = ReflectionAccessor.Wrap(compareOp);
            Result[] argArray = new Result[2];
            Result res1 = new Result(typeof(int), 1);
            Result res2 = new Result(typeof(long), 2);
            argArray[0] = res1;
            argArray[1] = res2;
            compareOpAccessor.Call("ProcessArg", new Evaluator(), argArray);
        }



    }
}
