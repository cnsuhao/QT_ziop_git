using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;

namespace DotTest.OPCTrendLib
{
    [TestFixture()]
    public class ParameterVariableHolderTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestParameters01()
        {
            ParameterVariableHolder parameterHolder = new ParameterVariableHolder();
            Accessor parameterHolderAccessor = ReflectionAccessor.Wrap(parameterHolder);
            //Test Procedure Call
            ParameterCollection paraCollection = parameterHolder.Parameters;
            //Post Condition Check
            Assert.AreEqual(parameterHolderAccessor.GetField("_parameters"), paraCollection);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestExists01()
        {
            ParameterVariableHolder parameterHolder = new ParameterVariableHolder();
            Accessor parameterHolderAccessor = ReflectionAccessor.Wrap(parameterHolder);
            System.Collections.Hashtable parametertable = new System.Collections.Hashtable();
            parametertable.Add("Name1", "Value1");
            parametertable.Add("Name2", "Value2");
            parameterHolderAccessor.GetFieldAccessor("_parameters").SetField("_parameters", parametertable);
            //Test Procedure Call
            bool bRes = parameterHolder.Exists("Name2");
            //Post Condition Check
            Assert.IsTrue(bRes);


            //Test Procedure Call
            bRes = parameterHolder.Exists("Name4");
            //Post Condition Check
            Assert.IsFalse(bRes);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetVariable01()
        {
            IVariableHolder parameterHolder = new ParameterVariableHolder();
            Accessor parameterHolderAccessor = ReflectionAccessor.Wrap(parameterHolder);
            System.Collections.Hashtable parametertable = new System.Collections.Hashtable();
            Parameter p1 = new Parameter("Value1",typeof(string));
            Parameter p2 = new Parameter("Value2", typeof(string));
            parametertable.Add("Name1", p1);
            parametertable.Add("Name2", p2);
            parameterHolderAccessor.GetFieldAccessor("_parameters").SetField("_parameters", parametertable);
            //Test Procedure Call
            string bRes = (string)parameterHolder.GetVariable("Name2");
            //Post Condition Check
            Assert.AreEqual("Value2", bRes);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestClear01()
        {
            IVariableHolder parameterHolder = new ParameterVariableHolder();
            Accessor parameterHolderAccessor = ReflectionAccessor.Wrap(parameterHolder);
            System.Collections.Hashtable parametertable = new System.Collections.Hashtable();
            Parameter p1 = new Parameter("Value1", typeof(string));
            Parameter p2 = new Parameter("Value2", typeof(string));
            parametertable.Add("Name1", p1);
            parametertable.Add("Name2", p2);
            parameterHolderAccessor.GetFieldAccessor("_parameters").SetField("_parameters", parametertable);
            //Test Procedure Call
            parameterHolderAccessor.GetFieldAccessor("_parameters").Call("Clear");
            //Post Condition Check
            Assert.AreEqual(0, parameterHolderAccessor.GetFieldAccessor("_parameters").GetFieldAccessor("_parameters").GetProperty("Count"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestSetParameter01()
        {
            ParameterCollection paramCollection = new ParameterCollection();
            Accessor paramCollectionAccessor = ReflectionAccessor.Wrap(paramCollection);
            System.Collections.Hashtable parametertable = new System.Collections.Hashtable();
            Parameter p1 = new Parameter("Value1", typeof(string));
            Parameter p2 = new Parameter("Value2", typeof(string));
            parametertable.Add("Name1", p1);
            parametertable.Add("Name2", p2);
            paramCollectionAccessor.SetField("_parameters", parametertable);
            Parameter p3 = new Parameter("Value3", typeof(string));
            //Test Procedure Call
            paramCollection["Name2"] = p3;
            //Post Condition Check
            Assert.AreEqual(p3, paramCollection["Name2"]);

            //testing --- set null value
            //Test Procedure Call
            paramCollection["Name2"] = null;
            //Post Condition Check
            Assert.AreEqual(1, paramCollectionAccessor.GetFieldAccessor("_parameters").GetProperty("Count"));
        }

    }
}
