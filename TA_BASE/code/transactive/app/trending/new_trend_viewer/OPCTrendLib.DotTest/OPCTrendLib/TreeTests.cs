using Dottest.Framework;
using NUnit.Framework;
using OPCTrendLib;

namespace DotTest.OPCTrendLib
{
    [TestFixture()]
    public class TreeTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+J2GjA", "/x3Ueg")]
        public void TestTreeConstructor01()
        {
            Tree tree = new Tree();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestPrint01()
        {
            Tree tree = new Tree();
            System.IO.TextWriter writeFile = new System.IO.StreamWriter("c:\\textwriter.txt");
            BooleanAnd expression = new BooleanAnd();
            ExprNode expr = new ExprNode(expression);
            System.Collections.ArrayList operands = new System.Collections.ArrayList();
            Constant operand1 = new Constant(1);
            ExprNode expr1 = new ExprNode(operand1);
            Constant operand2 = new Constant(2);
            ExprNode expr2 = new ExprNode(operand2);
            operands.Add(expr1);
            operands.Add(expr2);
            Accessor exprAccessor = ReflectionAccessor.Wrap(expr);
            exprAccessor.SetField("_operands", operands);
            tree.Root = expr;
            //Test Procedure
            tree.Print(writeFile);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOperator01()
        {
            Tree tree = new Tree();
            ArithmeticMultiply expression = new ArithmeticMultiply();
            ExprNode Addexpr = new ExprNode(expression);
            System.Collections.ArrayList operands = new System.Collections.ArrayList();
            Constant operand1 = new Constant(1);
            ExprNode expr1 = new ExprNode(operand1);
            Constant operand2 = new Constant(2);
            ExprNode expr2 = new ExprNode(operand2);
            operands.Add(expr1);
            operands.Add(expr2);
            Accessor exprAccessor = ReflectionAccessor.Wrap(Addexpr);
            exprAccessor.SetField("_operands", operands);    
            BooleanAnd Multiexpression = new BooleanAnd();            
            tree.Root = Addexpr;
            Accessor treeAccessor = ReflectionAccessor.Wrap(tree);
            treeAccessor.SetField("_top", Addexpr);
            //Test Procedure Call
            tree.AddOperator(Multiexpression);        
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOperator02()
        {
            Tree tree = new Tree();
            ArithmeticMultiply expression = new ArithmeticMultiply();
            ExprNode root = new ExprNode(expression);
            ExprNode topnode = new ExprNode(expression);
            ArithmeticSubtract sub = new ArithmeticSubtract();
            ExprNode parentnode = new ExprNode(sub);
            tree.Root = root;
            Accessor topAccessor = ReflectionAccessor.Wrap(topnode);
            topAccessor.SetField("_parent", parentnode);
            BooleanAnd booleanAndExpr = new BooleanAnd();            
            Accessor treeAccessor = ReflectionAccessor.Wrap(tree);
            treeAccessor.SetField("_top", topnode);
            //Test Procedure Call
            tree.AddOperator(booleanAndExpr);
        }

        [ExpectedException(typeof(ParserException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_AddOperator01()
        {
            Tree tree = new Tree();
            ArithmeticMultiply expression = new ArithmeticMultiply();
            ExprNode root = new ExprNode(expression);
            Constant operand = new Constant(1);
            ExprNode topnode = new ExprNode(operand);
            ArithmeticSubtract sub = new ArithmeticSubtract();
            ExprNode parentnode = new ExprNode(sub);
            tree.Root = root;
            Accessor topAccessor = ReflectionAccessor.Wrap(topnode);
            topAccessor.SetField("_parent", parentnode);
            BooleanAnd booleanAndExpr = new BooleanAnd();
            Accessor treeAccessor = ReflectionAccessor.Wrap(tree);
            treeAccessor.SetField("_top", topnode);
            //Test Procedure Call
            tree.AddOperator(booleanAndExpr);
        }

        [ExpectedException(typeof(ParserException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_AddOperator02()
        {
            Tree tree = new Tree();
            ArithmeticMultiply expression = new ArithmeticMultiply();
            BooleanAnd booleanAndExpr = new BooleanAnd();
            ExprNode root = new ExprNode(expression);
            ExprNode topnode = new ExprNode(booleanAndExpr);
            ArithmeticSubtract sub = new ArithmeticSubtract();
            ExprNode parentnode = new ExprNode(sub);
            tree.Root = root;
            Accessor topAccessor = ReflectionAccessor.Wrap(topnode);
            topAccessor.SetField("_parent", parentnode);
            Accessor treeAccessor = ReflectionAccessor.Wrap(tree);
            treeAccessor.SetField("_top", topnode);
            //Test Procedure Call
            tree.AddOperator(expression);
        }

        [ExpectedException(typeof(ParserException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_Pop01()
        {
            Tree tree = new Tree();            
            //Test Procedure Call
            tree.Pop(',');

            //testing -- 
            //Test Procedure Call
            tree.Pop('{');

        }

        [ExpectedException(typeof(ParserException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_Complete01()
        {
            Tree tree = new Tree();
            tree.Push('+');            
            //Test Procedure Call
            tree.Complete();                 
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_Complete02()
        {
            Tree tree = new Tree();
            ExprNode rootnode = new ExprNode(null);
            tree.Root = rootnode;
            //Test Procedure Call
            tree.Complete();
        }

        [ExpectedException(typeof(ParserException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestErr_Complete03()
        {
            Tree tree = new Tree();
            ExprNode rootnode = new ExprNode(null);
            Constant operand1 = new Constant(1);
            ExprNode expr1 = new ExprNode(operand1);
            Constant operand2 = new Constant(2);
            ExprNode expr2 = new ExprNode(operand2);
            System.Collections.ArrayList operands = new System.Collections.ArrayList();
            operands.Add(expr1);
            operands.Add(expr2);
            Accessor exprAccessor = ReflectionAccessor.Wrap(rootnode);
            exprAccessor.SetField("_operands", operands);  
            tree.Root = rootnode;
            //Test Procedure Call
            tree.Complete();
        }


    }
}
