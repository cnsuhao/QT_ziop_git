using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;

namespace DotTest.Factories.OPCTrendLib
{
    [TestFixture(), ObjectFactoryType()]
    public class CompareOpFactory
    {
        [ObjectFactoryMethod]
        [HashCode("+iZStw", "+jCp4g")]
        internal static CompareOp CreateCompareOp01()
        {
            CompareResult compareResult = CompareResult.Less;
            CompareOp compareOp = new CompareOp(compareResult);
            return compareOp;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateCompareOp01()
        {
            CompareOp compareOp = CreateCompareOp01();
            Assert.IsNotNull(compareOp);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((OperatorPriority)compareOp.Priority);
            recorder.FinishRecording();
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("+iZStw", "+AhY4A")]
        internal static CompareOp CreateCompareOp02()
        {
            CompareResult compareResult = CompareResult.Greater;
            CompareOp compareOp = new CompareOp(compareResult);
            return compareOp;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateCompareOp02()
        {
            CompareOp compareOp = CreateCompareOp02();
            Assert.IsNotNull(compareOp);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((OperatorPriority)compareOp.Priority);
            recorder.FinishRecording();
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("+iZStw", "+GBmdw")]
        internal static CompareOp CreateCompareOp03()
        {
            CompareResult compareResult = CompareResult.Equal;
            CompareOp compareOp = new CompareOp(compareResult);
            return compareOp;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateCompareOp03()
        {
            CompareOp compareOp = CreateCompareOp03();
            Assert.IsNotNull(compareOp);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((OperatorPriority)compareOp.Priority);
            recorder.FinishRecording();
            #endregion
        }

    }
}
