using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;
using System;

namespace DotTest.Factories.OPCTrendLib
{
    [TestFixture(), ObjectFactoryType()]
    public class ContextFactory
    {
        [ObjectFactoryMethod]
        [HashCode("/D5rXA", "/u/xHg")]
        internal static Context CreateContext01()
        {
            Token token = Token.None;
            int startPos = int.MinValue;
            Context context = new Context(token, startPos);
            context.ToString();
            return context;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateContext01()
        {
            Context context = CreateContext01();
            Assert.IsNotNull(context);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)context.StringValue);
            recorder.FinishRecording();
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/D5rXA", "+F7R+w")]
        internal static Context CreateContext02()
        {
            Token token = Token.EndOfFile;
            int startPos = 0;
            Context context = new Context(token, startPos);
            Accessor contextAcc = ReflectionAccessor.Wrap(context);
            contextAcc.SetField("value", "1");
            context.ToString();
            return context;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateContext02()
        {
            Context context = CreateContext02();
            Assert.IsNotNull(context);            
        }

        [ObjectFactoryMethod]
        [HashCode("/D5rXA", "+V5b/A")]
        internal static Context CreateContext03()
        {
            Token token = Token.Add;
            int startPos = 1;
            Context context = new Context(token, startPos);
            return context;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateContext03()
        {
            Context context = CreateContext03();
            Assert.IsNotNull(context);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)context.StringValue);
            recorder.FinishRecording();
            #endregion
        }

    }
}
