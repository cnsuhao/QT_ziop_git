using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using OPCTrendLib;
using System;

namespace DotTest.Factories.OPCTrendLib
{
    [TestFixture(), ObjectFactoryType()]
    public class EvalExceptionFactory
    {
        [ObjectFactoryMethod]
        [HashCode("/KpWMw", "+GTA5A")]
        public static EvalException CreateEvalException01()
        {
            string varName = string.Empty;
            EvalException evalException = EvalException.VariableNotExist(varName);
            return evalException;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateEvalException01()
        {
            EvalException evalException = CreateEvalException01();
            Assert.IsNotNull(evalException);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)evalException.HelpLink);
            recorder.Record((string)evalException.Message);
            recorder.Record((string)evalException.Source);
            recorder.Record((string)evalException.StackTrace);
            recorder.FinishRecording();
            #endregion
        }

        [ObjectFactoryMethod]
        [HashCode("/KpWMw", "+IYq2w")]
        public static EvalException CreateEvalException02()
        {
            string msg = string.Empty;
            EvalException evalException = new EvalException(msg);
            return evalException;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateEvalException02()
        {
            EvalException evalException = CreateEvalException02();
            Assert.IsNotNull(evalException);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)evalException.HelpLink);
            recorder.Record((string)evalException.Message);
            recorder.Record((string)evalException.Source);
            recorder.Record((string)evalException.StackTrace);
            recorder.FinishRecording();
            #endregion
        }

    }
}
