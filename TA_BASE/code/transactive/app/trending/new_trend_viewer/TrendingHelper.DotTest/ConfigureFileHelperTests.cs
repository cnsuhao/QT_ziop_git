using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using TrendingHelper;

namespace TrendingHelper.DotTest
{
    [TestFixture()]
    public class ConfigureFileHelperTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/1yJ+Q", "/72S7Q")]
        public void TestGetINIDataString01()
        {
            string entryCategory = string.Empty;
            string entryKey = string.Empty;
            string entryDefault = string.Empty;
            int entrySize = int.MinValue;

            ConfigureFileHelper.GetInstance().init();
            string str = ConfigureFileHelper.GetINIDataString("OPC_CLIENT", "SERVER1_NAME", "", 255, "C:/bin/win32_nd/config.ini");
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/D4U2Q", "+X+2Eg")]
        public void TestGetInstance01()
        {
            ConfigureFileHelper configureFileHelper = ConfigureFileHelper.GetInstance();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record<string>(delegate { return (string)configureFileHelper.AboutMessage; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.ConnectionStringConfig; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.ConnectionStringViewer; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.DefaultFolder; });
            recorder.Record<int>(delegate { return (int)configureFileHelper.DefaultLineThickness; });
            recorder.Record<bool>(delegate { return (bool)configureFileHelper.EnableSmartLabel; });
            recorder.Record<bool>(delegate { return (bool)configureFileHelper.EncodingChange; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.HostIPAddress; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.LanguageStr; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCDTSever1Host; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCDTSever1Name; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCDTSever2Host; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCDTSever2Name; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCServerName; });
            recorder.Record<string>(delegate { return (string)configureFileHelper.OPCServerRootName; });
            recorder.Record<int>(delegate { return (int)configureFileHelper.ScreenWidth; });
            recorder.FinishRecording();
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+YtX5A", "+3kxUA")]
        public void TestConfigureFileHelperConstructor01()
        {
            ConfigureFileHelper configureFileHelper = new ConfigureFileHelper();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)configureFileHelper.AboutMessage);
            recorder.Record((string)configureFileHelper.ConnectionStringConfig);
            recorder.Record((string)configureFileHelper.ConnectionStringViewer);
            recorder.Record((string)configureFileHelper.DefaultFolder);
            recorder.Record((int)configureFileHelper.DefaultLineThickness);
            recorder.Record((bool)configureFileHelper.EnableSmartLabel);
            recorder.Record((bool)configureFileHelper.EncodingChange);
            recorder.Record((string)configureFileHelper.HostIPAddress);
            recorder.Record((string)configureFileHelper.LanguageStr);
            recorder.Record((string)configureFileHelper.OPCDTSever1Host);
            recorder.Record((string)configureFileHelper.OPCDTSever1Name);
            recorder.Record((string)configureFileHelper.OPCDTSever2Host);
            recorder.Record((string)configureFileHelper.OPCDTSever2Name);
            recorder.Record((string)configureFileHelper.OPCServerName);
            recorder.Record((string)configureFileHelper.OPCServerRootName);
            recorder.Record((int)configureFileHelper.ScreenWidth);
            recorder.FinishRecording();
            #endregion
        }

        [Test]
        public void TestSetFunctions()
        {
            ConfigureFileHelper configHelper = ConfigureFileHelper.GetInstance();
            configHelper.LanguageStr = configHelper.LanguageStr;
            configHelper.OPCDTSever1Host = configHelper.OPCDTSever1Host;
            configHelper.OPCDTSever1Name = configHelper.OPCDTSever1Name;
            configHelper.OPCDTSever2Host = configHelper.OPCDTSever2Host;
            configHelper.OPCDTSever2Name = configHelper.OPCDTSever2Name;
            configHelper.OPCServerName = configHelper.OPCServerName;
            configHelper.OPCServerRootName = configHelper.OPCServerRootName;
            configHelper.ScreenWidth = configHelper.ScreenWidth;
            configHelper.HostIPAddress = configHelper.HostIPAddress;
            configHelper.EncodingChange = configHelper.EncodingChange;
            configHelper.EnableSmartLabel = configHelper.EnableSmartLabel;
            configHelper.DefaultLineThickness = configHelper.DefaultLineThickness;
            configHelper.DefaultFolder = configHelper.DefaultFolder;
            configHelper.ConnectionStringViewer = configHelper.ConnectionStringViewer;
            configHelper.ConnectionStringConfig = configHelper.ConnectionStringConfig;
            configHelper.AboutMessage = configHelper.AboutMessage;
            
        }

        [Test]
        public void TestInit02()
        {
            //if (encodingChange_str.ToLower() == "true")
            ConfigureFileHelper.GetInstance().init();
        }
    }
}
