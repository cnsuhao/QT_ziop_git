using DAO.Trending.Common;
using Dottest.Framework;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Data;
using DAO.Trending.Helper;


namespace DAO.Trending.DotTest.Common
{
    [TestFixture()]
    public class SimpleDatabaseTests
    {
        private SimpleDatabase simpleDB;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            simpleDB = SimpleDatabase.GetInstance();
            TestDBInit.openConn();
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+BuW4Q", "/XEH4Q")]
        public void TestReleaseInstance01()
        {
            SimpleDatabase.ReleaseInstance();
            simpleDB = SimpleDatabase.GetInstance();
        }

        [Test]
        public void TestIsDatabaseConnectable01()
        {
            simpleDB.IsDatabaseConnectable(TestDBInit.localConnectionString1);
            simpleDB.IsDatabaseConnectable();
            
        }

        [Test]
        public void TestOpenConnection()
        {
            simpleDB.OpenConnection(TestDBInit.localConnectionString1);
            simpleDB.OpenConnection();
        }

        [Test]
        public void TestTransactions()
        {
            simpleDB.BeginTransaction();
            simpleDB.RollbackTransaction();

            simpleDB.BeginTransaction();
            simpleDB.BeginTransaction();
            simpleDB.CommitTransaction();
            simpleDB.CommitTransaction();

            //for test exception
            try
            {
                simpleDB.CommitTransaction();
            }
            catch (System.Exception ex)
            {
            	
            }
            try
            {
                simpleDB.RollbackTransaction();
            }
            catch (System.Exception ex)
            {
            	
            }
            

        }

        [Test]
        public void TestExceptions()
        {
            // test exception: BeginTransaction, ExecuteQueryWithParams, 
            //ExecuteNonQuery, GetStringFromQuery, ExecuteNonQueryWithParams

            //test exception 
            //stub: session.BeginTransaction() throw exception
            try
            {
                simpleDB.BeginTransaction();
            }
            catch (System.Exception ex)
            {
            	
            }
           


            //test exception for ExecuteQueryWithParams
            string wrongSQL = " SELECT CREATETIME,VALUE " +
                   "  DATALOG_DP_LOG_TREND WHERE ENTITY_KEY = 1"  +
                   " AND CREATETIME >= @StartDateValue" +
                   " AND CREATETIME <= @EndDateValue" +
                   " ORDER BY CREATETIME";


            SqlParameter parameter1 = new SqlParameter();
            parameter1.ParameterName = "StartDateValue";
            parameter1.DbType = DbType.DateTime;
            DateTime dtStart = DateTime.Now;
            parameter1.Value = dtStart;
            parameter1.Direction = System.Data.ParameterDirection.Input;
            List<SqlParameter> parameters = new List<SqlParameter>();
            parameters.Add(parameter1);


            SqlParameter parameter2 = new SqlParameter();
            parameter2.ParameterName = "EndDateValue";
            parameter2.DbType = DbType.DateTime;
            DateTime dtEnd = DateTime.Now;
            parameter2.Value = dtEnd;
            parameter2.Direction = System.Data.ParameterDirection.Input;
            parameters.Add(parameter2);

            System.Data.IDataReader drReader = simpleDB.ExecuteQueryWithParams(wrongSQL, parameters);

            simpleDB.ExecuteNonQuery("select * entity");

            simpleDB.GetStringFromQuery("select * entity");

            simpleDB.ExecuteNonQueryWithParams("updat entity ", parameters);
            
        }

        [Test]
        public void TestGetStringFromQuery()
        {
            string sql = "select name from location where pkey=0";
            simpleDB.GetStringFromQuery(sql);
        }
    }
}
