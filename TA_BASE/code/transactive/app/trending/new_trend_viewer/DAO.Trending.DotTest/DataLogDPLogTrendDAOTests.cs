using DAO.Trending;
using Dottest.Framework;
using NUnit.Framework;
using Entity.Trending;
using System;


namespace DAO.Trending.DotTest
{
    [TestFixture()]
    public class DataLogDPLogTrendDAOTests
    {
        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            TestDBInit.openConn();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+acHTw", "/5UWTQ")]
        public void TestGetInstance01()
        {
            DataLogDPLogTrendDAO dataLogDPLogTrendDAO = DataLogDPLogTrendDAO.GetInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("//to4g", "/QP2Ag")]
        public void TestReleaseInstance01()
        {
            DataLogDPLogTrendDAO.ReleaseInstance();
        }



        [Test]
        public void TestGetHistDPLogList()
        {
            EtyHistDataPoint histDP = new EtyHistDataPoint();

            histDP.EntityKey = 10147653;
            histDP.DPStartDateTime = new DateTime(2013, 5, 10);
            histDP.DPEndDateTime = new DateTime(2013, 5,11);

            DateTime startTime = new DateTime(2013, 5, 10, 1, 1, 1);
            DateTime endTime = new DateTime(2013, 5, 10, 23, 59, 59);

            DataLogDPLogTrendDAO.GetInstance().GetHistDPLogList(histDP, startTime, endTime);
        }
        [Test]
        public void TestGetHistDPLogList02()
        {
            //exception
            EtyHistDataPoint histDP = new EtyHistDataPoint();

            histDP.EntityKey = 10147653;
            histDP.DPStartDateTime = new DateTime(2013, 5, 10);
            histDP.DPEndDateTime = new DateTime(2013, 5, 11);

            DateTime startTime = new DateTime(2013, 5, 10, 1, 1, 1);
            DateTime endTime = new DateTime(2013, 5, 10, 23, 59, 59);

            DataLogDPLogTrendDAO.GetInstance().GetHistDPLogList(histDP, startTime, endTime);
        }
    }
}
