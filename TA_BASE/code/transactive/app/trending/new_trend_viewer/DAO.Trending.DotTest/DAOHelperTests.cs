using DAO.Trending;
using Dottest.Framework;
using Dottest.Framework.RecordState;
using Entity.Trending;
using NUnit.Framework;
using System;
using DAO.Trending.Helper;
using System.Collections.Generic;

namespace DAO.Trending.DotTest
{
    [TestFixture()]
    public class DAOHelperTests
    {

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/ZB05Q", "/Ab6cg")]
        public void TestConvertLineTypeToDBString01()
        {
            LineType lineType = LineType.Spline;
            string str = DAOHelper.ConvertLineTypeToDBString(lineType);

            lineType = LineType.Line;
            str = DAOHelper.ConvertLineTypeToDBString(lineType);

            
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ypvgg", "/vlR6w")]
        public void TestConvertLineTypeToEnum01()
        {
            DAOHelper.ConvertLineTypeToEnum(DAOHelper.DB_LineType_Line);
            DAOHelper.ConvertLineTypeToEnum(DAOHelper.DB_LineType_Spline);
            DAOHelper.ConvertLineTypeToEnum("");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/lnUGQ", "+pHPHA")]
        public void Testconvert8859P1ToGB231201()
        {
            string s = string.Empty;
            string str = DAOHelper.convert8859P1ToGB2312(s);
            DAOHelper.SetEncodingChange(true);
            DAOHelper.convert8859P1ToGB2312(s);
            DAOHelper.SetEncodingChange(false);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+USxeg", "/mikVg")]
        public void TestconvertGB2312To8859P101()
        {
            string str = string.Empty;
            string str1 = DAOHelper.convertGB2312To8859P1(str);
            DAOHelper.SetEncodingChange(true);
            DAOHelper.convertGB2312To8859P1(str);
            DAOHelper.SetEncodingChange(false);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+28wZA", "/zyOKg")]
        public void TestChangeStrToBool01()
        {
            string str = string.Empty;
            bool b = DAOHelper.ChangeStrToBool(str);


            DAOHelper.ChangeStrToBool("Y");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+V34+A", "/+arTA")]
        public void TestChangeBoolToStr01()
        {
            bool b = false;
            string str = DAOHelper.ChangeBoolToStr(b);


        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+V34+A", "+kin9g")]
        public void TestChangeBoolToStr02()
        {
            bool b = true;
            string str = DAOHelper.ChangeBoolToStr(b);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ckHyQ", "/40WuA")]
        public void TestDAOHelperConstructor01_GetEncodingChange_SetEncodingChange()
        {
            DAOHelper dAOHelper = new DAOHelper();
            DAOHelper.SetEncodingChange(DAOHelper.GetEncodingChange());
        }

        [Test]
        public void TestSQLParameter()
        {
            SqlParameter sqlParam = new SqlParameter("parameterName", System.Data.ParameterDirection.Input, false, System.Data.DbType.Boolean);

        }

        [Test]
        public void TestCreateEnqueneParameters()
        {
            List<string> pas = new List<string>();
            pas.Add("a");
            try
            {
                DAOHelper.CreateEnqueneParameters(pas);
            }
            catch (System.Exception ex)
            {
            	
            }
            
        }
    }
}
