using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.OPCProxy;

namespace STEE.ISCS.OPCProxy.DotTest
{
    [TestFixture()]
    public class OPCServerProxyTests
    {
        [SetUp]
        public void TestSetup()
        {

        }

        [TearDown]
        public void TestTearDown()
        {
            OPCServerProxy.ReleaseInstance();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/L53gw", "++850Q")]
        public void TestGetInstance01()
        {
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/9KyrQ", "+9TyIw")]
        public void TestOPCServerProxyConstructor01()
        {
            OPCServerProxy oPCServerProxy = (OPCServerProxy)ReflectionAccessor.Construct("STEE.ISCS.OPCProxy.OPCServerProxy");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeServer01()
        {
            // Testing ---- valid setup
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            oPCServerProxy.InitializeServer("TransActiveDataSource", "3355");
            //Post Condition Check
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCServer"));
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCGroup"));
            Assert.IsTrue((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeServer02()
        {
            // Testing ---- Cannot connect to server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            oPCServerProxy.InitializeServer("TransActiveDataSource", "3355");
            //Post Condition Check
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCServer"));
            Assert.IsNull(oPCServerProxyAccessor.GetField("m_OPCGroup"));
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeServer03()
        {
            // Testing ---- Cannot add group to OPCServer
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            oPCServerProxy.InitializeServer("TransActiveDataSource", "3355");
            //Post Condition Check
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCServer"));
            Assert.IsNull(oPCServerProxyAccessor.GetField("m_OPCGroup"));
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeServer04()
        {
            // Testing ---- Cannot disconnect server and cannot connect to server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            //Test Procedure Call
            oPCServerProxy.InitializeServer("TransActiveDataSource", "3355");
            //Post Condition Check
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCServer"));
            Assert.IsNull(oPCServerProxyAccessor.GetField("m_OPCGroup"));
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestInitializeServer05()
        {
            // Testing ---- Can disconnect and connect to server again
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            //Test Procedure Call
            oPCServerProxy.InitializeServer("TransActiveDataSource", "3355");
            //Post Condition Check
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCServer"));
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_OPCGroup"));
            Assert.IsTrue((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestIsOPCServerConnected01()
        {
            // Testing ---- OPC Server status is other than OPC_STATUS_RUNNING
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool bRes = oPCServerProxy.IsOPCServerConnected();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReleaseInstance01()
        {
            // Testing ---- Removing items from OPC server throws exception
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            //Test Procedure Call
            OPCServerProxy.ReleaseInstance();
            //Post Condition Check
            Assert.IsNull(oPCServerProxyAccessor.GetField("s_OPCServerProxy"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC01()
        {
            // Testing ----  Server is in connected and running status
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC02()
        {
            // Testing ----  Server is got disconnected found based on its status 
            // and reconnection is not success
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC03()
        {
            // Testing ----  Server is got disconnected 
            // and reconnection is success
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", false);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            System.Collections.Generic.List<string> totryQuene = new System.Collections.Generic.List<string>();
            totryQuene.Add("DP2");
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            oPCServerProxyAccessor.SetField("m_TotryQuene", totryQuene);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC04()
        {
            // Testing ----  Server is got disconnected 
            // and current time is less than Shutdown time+5000;
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", false);
            System.DateTime shutdown = System.DateTime.Now;
            shutdown = new System.DateTime(shutdown.Year, shutdown.Month, shutdown.Day, shutdown.Hour, shutdown.Minute, shutdown.Second - 1);
            oPCServerProxyAccessor.SetField("m_ShutdownEventTime", shutdown);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
            Assert.IsNull(oPCServerProxyAccessor.GetField("m_ShutdownEventTime"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC05()
        {
            // Testing ----  Reconnect Flag set but not able to reconnect to server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            oPCServerProxyAccessor.SetField("m_needToReCreateGrp2Srv", true);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestReconnectAndAddToOPC06()
        {
            // Testing ----  Reconnect Flag set but able to reconnect to server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            oPCServerProxyAccessor.SetField("m_needToReCreateGrp2Srv", true);
            //Test Procedure Call
            oPCServerProxy.ReconnectAndAddToOPC();
            //Post Condition Check
            Assert.IsTrue((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem01()
        {
            // Testing ----  Empty Datapoint Name 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("");
            //Post Condition Check
            Assert.IsFalse(result);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem02()
        {
            // Testing ----  Valid Datapoint Name and valid setup
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsTrue(result);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem03()
        {
            // Testing ----  Already Added item
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsTrue(result);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem04()
        {
            // Testing ----  OPCServer cannot identify DataPoint name
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem05()
        {
            // Testing ----  OPCserver disconnection flag set
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", false);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem06()
        {
            // Testing ----  OPCserver AddItems method return null result value
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem07()
        {
            // Testing ----  Datapoints is not having readable accessrights in OPC server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem08()
        {
            // Testing ----  Data points added to OPc server but result was not propeerly filled
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem09()
        {
            // Testing ----  Refresh API of OPC server throws exception
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);


        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddOPCItem10()
        {
            //testing ---- OPC server got diconnected
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.AddOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRemoveOPCItem01()
        {
            //testing ---- Remove item which is not connected to opc server
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            //Test Procedure Call
            bool result = oPCServerProxy.RemoveOPCItem("DP1");
            //Post Condition Check
            Assert.IsTrue(result);


            //testing --- invalid client id of the datapoint stored
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 1);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            //Test Procedure Call
            result = oPCServerProxy.RemoveOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRemoveOPCItem02()
        {
            //testing ---- Remove item ---  valid setup
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            //Test Procedure Call
            bool result = oPCServerProxy.RemoveOPCItem("DP1");
            //Post Condition Check
            Assert.IsTrue(result);
        }

        [ExpectedException(typeof(System.Exception))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRemoveOPCItem03()
        {
            //testing --- Exception throw--- server disconnected
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            //Test Procedure Call
            bool result = oPCServerProxy.RemoveOPCItem("DP1");
            //Post Condition Check
            Assert.IsFalse(result);
        }

        public class OPCObserverTest : IOPCObserver
        {
            public bool bShutdowneventCalled = false;
            void IOPCObserver.ServerShutdownEvent()
            {
                bShutdowneventCalled = true;
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestNotifyShutDownToObservers01()
        {
            //Testing ---- 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            OPCObserverTest observerTest = new OPCObserverTest();
            System.Collections.Generic.List<IOPCObserver> observers = new System.Collections.Generic.List<IOPCObserver>();
            observers.Add(observerTest);
            oPCServerProxyAccessor.SetField("m_observers", observers);
            //Test Procedure Call
            oPCServerProxyAccessor.Call("NotifyShutDownToObservers");
            //Post Condition Check
            Assert.IsTrue(observerTest.bShutdowneventCalled);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddObserver01()
        {
            //Testing ---- 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            OPCObserverTest observerTest = new OPCObserverTest();
            //Test Procedure Call
            oPCServerProxy.AddObserver(observerTest);
            //Post Condition Check
            System.Collections.Generic.List<IOPCObserver> observers = (System.Collections.Generic.List<IOPCObserver>)oPCServerProxyAccessor.GetField("m_observers");
            Assert.AreEqual(1, observers.Count);
            Assert.AreEqual(observerTest, observers[0]);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestRemoveObserver01()
        {
            //Testing ---- observer is not added
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            OPCObserverTest observerTest = new OPCObserverTest();
            oPCServerProxyAccessor.SetField("m_observers", null);
            //Test Procedure Call
            oPCServerProxy.RemoveObserver(observerTest);
            //Post Condition Check
            //Assert.AreEqual(0, oPCServerProxyAccessor.GetFieldAccessor("m_observers").GetProperty("Count"));

            //testing -- 
            oPCServerProxyAccessor.SetField("m_observers", new System.Collections.Generic.List<IOPCObserver>());
            oPCServerProxy.AddObserver(observerTest);
            //Test Procedure Call
            oPCServerProxy.RemoveObserver(observerTest);
            //Post Condition Check
            Assert.AreEqual(0, oPCServerProxyAccessor.GetFieldAccessor("m_observers").GetProperty("Count"));
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCSrv_ServerShutDown01()
        {
            //Testing ---- Normal Flow
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            OPCTrendLib.OPCData.ShutdownRequestEventArgs e = new OPCTrendLib.OPCData.ShutdownRequestEventArgs("");
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCSrv_ServerShutDown", null, e);
            //Post Condition Check
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_opcSrvConnectFlag"));
            Assert.IsNotNull(oPCServerProxyAccessor.GetField("m_ShutdownEventTime"));
            System.DateTime shutdowntime = (System.DateTime)oPCServerProxyAccessor.GetField("m_ShutdownEventTime");

            //testing -- Already the OPCServerDown flag is set
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCSrv_ServerShutDown", null, e);
            //Post Condition Check
            Assert.AreEqual(shutdowntime, oPCServerProxyAccessor.GetField("m_ShutdownEventTime"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCGrp_DataChange01()
        {
            //Testing ---- 3 OPC item data change 1.boolean 2.numeric 3.item not in opcserverproxy
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            opcDataDic.Add(1, new OPCDataItem("DP2", 1));
            opcDataDic.Add(2, new OPCDataItem("DP3", 2));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            opcDataIndexDic.Add("DP2", 1);
            opcDataIndexDic.Add("DP3", 2);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 3);
            OPCTrendLib.OPCData.DataChangeEventArgs e = new OPCTrendLib.OPCData.DataChangeEventArgs();
            OPCTrendLib.OPCData.OPCItemState[] opcItems = new OPCTrendLib.OPCData.OPCItemState[3];
            //item1
            OPCTrendLib.OPCData.OPCItemState item1 = new OPCTrendLib.OPCData.OPCItemState();
            item1.HandleClient = 0;
            item1.DataValue = 1;
            item1.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item1.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.QUALITY_GOOD;
            opcItems[0] = item1;
            //item2
            OPCTrendLib.OPCData.OPCItemState item2 = new OPCTrendLib.OPCData.OPCItemState();
            item2.HandleClient = 1;
            item2.DataValue = 44;
            item2.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item2.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.QUALITY_GOOD;
            opcItems[1] = item2;
            //item3
            OPCTrendLib.OPCData.OPCItemState item3 = new OPCTrendLib.OPCData.OPCItemState();
            item3.HandleClient = 5;
            item3.DataValue = 1;
            item3.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item2.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.QUALITY_GOOD;
            opcItems[2] = item3;
            e.sts = opcItems;
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, e);
            //Post Condition Check 
            Assert.AreEqual(opcItems[0].DataValue, opcDataDic[0].DataValue);
            Assert.AreEqual(opcItems[1].DataValue, opcDataDic[1].DataValue);
            Assert.AreEqual(OPCServerProxy.OPC_BLANK_DATAVALUE, opcDataDic[2].DataValue);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCGrp_DataChange02()
        {
            //Testing ---- quality bad 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            opcDataDic.Add(1, new OPCDataItem("DP2", 1));
            opcDataDic.Add(2, new OPCDataItem("DP3", 2));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            opcDataIndexDic.Add("DP2", 1);
            opcDataIndexDic.Add("DP3", 2);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 3);
            OPCTrendLib.OPCData.DataChangeEventArgs e = new OPCTrendLib.OPCData.DataChangeEventArgs();
            OPCTrendLib.OPCData.OPCItemState[] opcItems = new OPCTrendLib.OPCData.OPCItemState[1];
            //item1
            OPCTrendLib.OPCData.OPCItemState item1 = new OPCTrendLib.OPCData.OPCItemState();
            item1.HandleClient = 0;
            item1.DataValue = 1;
            item1.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item1.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.QUALITY_BAD;
            opcItems[0] = item1;
            e.sts = opcItems;
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, e);
            //Post Condition Check 
            Assert.AreEqual(OPCServerProxy.OPC_BLANK_DATAVALUE, opcDataDic[0].DataValue);

            //testing --- quality --- QUALITY_UNCERTAIN
            e = new OPCTrendLib.OPCData.DataChangeEventArgs();
            opcItems = new OPCTrendLib.OPCData.OPCItemState[1];
            //item1
            item1 = new OPCTrendLib.OPCData.OPCItemState();
            item1.HandleClient = 0;
            item1.DataValue = 1;
            item1.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item1.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.QUALITY_UNCERTAIN;
            opcItems[0] = item1;
            e.sts = opcItems;
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, e);
            //Post Condition Check 
            Assert.AreEqual(OPCServerProxy.OPC_BLANK_DATAVALUE, opcDataDic[0].DataValue);

            //testing --- quality --- ERROR_QUALITY_VALUE
            e = new OPCTrendLib.OPCData.DataChangeEventArgs();
            opcItems = new OPCTrendLib.OPCData.OPCItemState[1];
            //item1
            item1 = new OPCTrendLib.OPCData.OPCItemState();
            item1.HandleClient = 0;
            item1.DataValue = 1;
            item1.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item1.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_MASTER.ERROR_QUALITY_VALUE;
            opcItems[0] = item1;
            e.sts = opcItems;
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, e);
            //Post Condition Check 
            Assert.AreEqual(OPCServerProxy.OPC_BLANK_DATAVALUE, opcDataDic[0].DataValue);

        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCGrp_DataChange03()
        {
            //Testing ---- quality --- NotConnected 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", true);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            opcDataDic.Add(1, new OPCDataItem("DP2", 1));
            opcDataDic.Add(2, new OPCDataItem("DP3", 2));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            opcDataIndexDic.Add("DP2", 1);
            opcDataIndexDic.Add("DP3", 2);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 3);
            OPCTrendLib.OPCData.DataChangeEventArgs e = new OPCTrendLib.OPCData.DataChangeEventArgs();
            OPCTrendLib.OPCData.OPCItemState[] opcItems = new OPCTrendLib.OPCData.OPCItemState[1];
            //item1
            OPCTrendLib.OPCData.OPCItemState item1 = new OPCTrendLib.OPCData.OPCItemState();
            item1.HandleClient = 0;
            item1.DataValue = 1;
            item1.Error = OPCTrendLib.OPCHeader.HRESULTS.S_OK;
            item1.Quality = (short)OPCTrendLib.OPCDataInterface.OPC_QUALITY_STATUS.NOT_CONNECTED;
            opcItems[0] = item1;
            e.sts = opcItems;
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, e);
            //Post Condition Check 
            Assert.AreEqual(OPCServerProxy.OPC_NOTCONNECTED, opcDataDic[0].DataValue);
            Assert.IsTrue((bool)oPCServerProxyAccessor.GetField("m_needToReCreateGrp2Srv"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestOPCGrp_DataChange04()
        {
            //Testing ---- exception throw
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            oPCServerProxyAccessor.Call("OPCGrp_DataChange", null, null);
            //Post Condition Check 
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetDataItemValue01()
        {
            //Testing ---- no items in OPCServerProxy
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            System.Object obj =  oPCServerProxy.GetDataItemValue("DP1");
            //Post Condition Check 
            Assert.IsNull(obj);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetDataItemValue02()
        {
            //Testing ---- normal flow
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            OPCDataItem item = new OPCDataItem("DP1", 0);
            item.DataValue = 55;
            opcDataDic.Add(0, item);
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
         
            //Test Procedure Call
            System.Object obj = oPCServerProxy.GetDataItemValue("DP1");
            //Post Condition Check 
            Assert.AreEqual(item.DataValue, obj);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestGetDataItemValue03()
        {
            //Testing ---- mistach of handleclient number -- not able to get item details...
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            OPCDataItem item = new OPCDataItem("DP1", 0);
            item.DataValue = 55;
            opcDataDic.Add(0, item);
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 2);
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);

            //Test Procedure Call
            System.Object obj = oPCServerProxy.GetDataItemValue("DP1");
            //Post Condition Check 
            Assert.IsNull(obj);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestDisbaleReCreateGrp2SrvFlag01()
        {
            //Testing 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_needToReCreateGrp2Srv",true);
            //Test Procedure Call
            oPCServerProxyAccessor.Call("DisbaleReCreateGrp2SrvFlag");
            //Post Condition Check
            Assert.IsFalse((bool)oPCServerProxyAccessor.GetField("m_needToReCreateGrp2Srv"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddFailedOPCItems01()
        {
            // Testing ----  Add failed item to OPC Server -- normal flow            
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            oPCServerProxyAccessor.SetField("m_OPCServer", new OPCTrendLib.OPCData.OpcServer());
            OPCTrendLib.OPCDataInterface.IOPCServer server = null;
            oPCServerProxyAccessor.SetField("m_OPCGroup", new OPCTrendLib.OPCData.OpcGroup(ref server, false, "GroupName", true, 500));
            oPCServerProxyAccessor.SetField("m_opcSrvConnectFlag", false);
            System.Collections.Generic.Dictionary<int, OPCDataItem> opcDataDic = new System.Collections.Generic.Dictionary<int, OPCDataItem>();
            opcDataDic.Add(0, new OPCDataItem("DP1", 0));
            System.Collections.Generic.Dictionary<string, int> opcDataIndexDic = new System.Collections.Generic.Dictionary<string, int>();
            opcDataIndexDic.Add("DP1", 0);
            System.Collections.Generic.List<string> totryQuene = new System.Collections.Generic.List<string>();
            totryQuene.Add("DP2");
            oPCServerProxyAccessor.SetField("m_opcDataDic", opcDataDic);
            oPCServerProxyAccessor.SetField("m_opcDataIndexDic", opcDataIndexDic);
            oPCServerProxyAccessor.SetField("m_OPCDataSeqNum", 1);
            oPCServerProxyAccessor.SetField("m_TotryQuene", totryQuene);
            //Test Procedure Call
            oPCServerProxy.AddFailedOPCItems();
            //Post Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestAddFailedOPCItems02()
        {
            // Testing ----  No failed items          
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            //Test Procedure Call
            oPCServerProxy.AddFailedOPCItems();
            //Post Condition Check
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestVT2TypeCode01()
        {
            //Testing ---- 
            OPCServerProxy oPCServerProxy = OPCServerProxy.GetInstance();
            Accessor oPCServerProxyAccessor = ReflectionAccessor.Wrap(oPCServerProxy);
            System.Runtime.InteropServices.VarEnum varn = System.Runtime.InteropServices.VarEnum.VT_BOOL;
            //Test Procedure Call
            System.TypeCode retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Boolean, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_I1;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.SByte, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_I2;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Int16, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_I4;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Int32, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_I8;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Int64, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_UI1;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Byte, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_UI2;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.UInt16, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_UI4;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.UInt32, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_UI8;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.UInt64, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_R4;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Single, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_R8;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Double, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_BSTR;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.String, retType);


            varn = System.Runtime.InteropServices.VarEnum.VT_DATE;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.DateTime, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_DECIMAL;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Decimal, retType);

            varn = System.Runtime.InteropServices.VarEnum.VT_CY;
            //Test Procedure Call
            retType = (System.TypeCode)oPCServerProxyAccessor.Call("VT2TypeCode", varn);
            //Post Condition Check
            Assert.AreEqual(System.TypeCode.Double, retType);
        }

    }
}
