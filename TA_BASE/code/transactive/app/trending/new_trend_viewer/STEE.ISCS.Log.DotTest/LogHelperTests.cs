using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.Log;
using System;
using Dottest.Framework.RecordState;

namespace STEE.ISCS.Log.DotTest
{
    [TestFixture()]
    public class LogHelperTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+M3AKg", "+Oy4Dw")]
        public void TestLogHelperConstructor01()
        {
            STEE.ISCS.Log.LogHelper logHelper = (STEE.ISCS.Log.LogHelper)ReflectionAccessor.Construct("STEE.ISCS.Log.LogHelper");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+tAE3Q", "+IVBfA")]
        public void TestsetLogFile01()
        {
            try
            {
                string file = "../logs/Log_TrendViewer_0.log";
                LogHelper.setLogFile(file);
            }
            catch (System.Exception ex)
            {
            	
            }

        }

        [Test]
        public void TestsetLogFile02()
        {

            try{
                string file = "../logs/Log_TrendViewer_0.log";
                LogHelper.setLogFile(file);
            }

            catch (System.Exception ex)
            {

            }

        }

        [Test]
        public void TestsetLogFile03()
        {
           //file not exists
           string file = "../logs/Log_TrendViewer_0.log";
           LogHelper.setLogFile(file);

 
        }

        [Test]
        public void TestsetLogFile04()
        {
            // (File.Exists(logCfgFilePath)
            string file = "../logs/Log_TrendViewer_0.log";
            LogHelper.setLogFile(file);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ea26Q", "/8MVaA")]
        public void TestInfo01()
        {
            string logMsg = string.Empty;
            LogHelper.Info(logMsg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/oxFeA", "+SikFQ")]
        public void TestDebug01()
        {
            string logMsg = string.Empty;
            LogHelper.Debug(logMsg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+nD77A", "/Sx71g")]
        public void TestWarn01()
        {
            string logMsg = string.Empty;
            LogHelper.Warn(logMsg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+G0buw", "+IT9ww")]
        public void TestError01()
        {
            string logMsg = string.Empty;
            LogHelper.Error(logMsg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+s45jw", "/zGKpQ")]
        public void TestFatal01()
        {
            string logMsg = string.Empty;
            LogHelper.Fatal(logMsg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/l71UQ", "+xqMtA")]
        public void TestFatal02()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Fatal(className, functionName, msg);
        }

        [Test]
        public void TestFatal03()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            Exception e = new Exception();
            LogHelper.Fatal(className, functionName, e);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/71xxQ", "/HdDJg")]
        public void TestError02()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Error(className, functionName, msg);
        }

        [Test]
        public void TestError03()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            Exception e = new Exception();
            LogHelper.Error(className, functionName, msg, e);
        }

        [Test]
        public void TestError04()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            Exception e = new Exception();
            LogHelper.Error(className, functionName,  e);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/9L5VQ", "/spu9g")]
        public void TestWarn02()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Warn(className, functionName, msg);
        }

        [Test]
        public void TestWarn03()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            Exception e = new Exception();
            LogHelper.Warn(className, functionName, e);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+fSrvg", "/Vvg4Q")]
        public void TestTrace01()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Trace(className, functionName, msg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Y3y6w", "++w2wA")]
        public void TestDebug02()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Debug(className, functionName, msg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/FrfbQ", "/RnjKA")]
        public void TestInfo02()
        {
            string className = string.Empty;
            string functionName = string.Empty;
            string msg = string.Empty;
            LogHelper.Info(className, functionName, msg);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+9/5Bw", "+JIfzQ")]
        public void TestgetMsg01()
        {
            string className = "";
            string functionName = "";
            StaticAccessor logHelperAccessor = ReflectionAccessor.Wrap(typeof(LogHelper));
            object[] parameters = new object[] { className, functionName };
            string str = (string)logHelperAccessor.CallWithRefOrOutArgs("getMsg", parameters);
            className = (System.String)parameters[0];
            functionName = (System.String)parameters[1];
 
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+r4Vlw", "+rvApQ")]
        public void TestgetMsg02()
        {
            string className = ""; 
            string functionName = ""; 
            string msg = string.Empty;
            StaticAccessor logHelperAccessor = ReflectionAccessor.Wrap(typeof(LogHelper));
            object[] parameters = new object[] { className, functionName, msg };
            string str = (string)logHelperAccessor.CallWithRefOrOutArgs("getMsg", parameters);
            className = (System.String)parameters[0];
            functionName = (System.String)parameters[1];
            msg = (System.String)parameters[2];

        }

    }
}
