using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendingChartControl;
using System.Drawing;

namespace DotTest.TrendingChartControl
{
    [TestFixture()]
    public class TrendingChartCtlTests
    {
        private TrendingChartCtl ctl;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            ctl = new TrendingChartCtl();
            ctl.InitChart(100);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/KPkkw", "/sjQ2Q")]
        public void TestTrendingChartCtlConstructor01()
        {
            TrendingChartCtl trendingChartCtl = new TrendingChartCtl();
        }

        [Test]
        public void TestProperties()
        {
            string s = ctl.XTitle;
            ctl.XTitle = s;

            s = ctl.YTitle;
            ctl.YTitle = s;

            s = ctl.ChartTitle;
            ctl.ChartTitle = s;

            int i = ctl.GapDepthFor3D;
            ctl.GapDepthFor3D = i;

            bool b = ctl.EnableSmartLabel;
            ctl.EnableSmartLabel = b;

        }

        [Test]
        public void TestAddRealTimeSeries_AddRealTimePoint_ClearSeries()
        {
            int frameInterval = 1;
            int timeInterval = 100;
            bool enable3D = false;
            int defaultGapDepth = 100;
            ctl.InitChartBeforeRealTime(frameInterval, timeInterval, enable3D, defaultGapDepth);

            string seriesName1 = "unitTest_SeriesName1";
            string dpType = "Line";
            Color dpColor = new Color();
            bool lblEnabled = true;
            string lblName = "lbl_Name";
            int lineThickness = 10;

            string seriesName2 = "unitTest_SeriesName2";

            ctl.InitChartBeforeRealTime(5, 100, false, 100);
            ctl.AddRealTimeSeries(seriesName1, dpType, dpColor, lblEnabled, lblName, lineThickness);
            ctl.AddRealTimeSeries(seriesName2, dpType, dpColor, lblEnabled, lblName, lineThickness);

            //ctl.AddRealTimePoint(seriesName2, DateTime.Now, 3.3);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 3.3);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 4);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 5);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 6);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 7);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 8);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 9);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now, 10);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(1), 11);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(2), 12);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(3), 12);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(4), 12);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(5), 12);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(6), 12);
            ctl.AddRealTimePoint(seriesName2, DateTime.Now.AddSeconds(6), 12);


            dpType = "Spline";
            ctl.AddRealTimeSeries("testSpline", dpType, dpColor, lblEnabled, lblName, lineThickness);
            dpType = "Area";
            ctl.AddRealTimeSeries("testArea", dpType, dpColor, lblEnabled, lblName, lineThickness);
            dpType = "Bar";
            ctl.AddRealTimeSeries("TestBar", dpType, dpColor, lblEnabled, lblName, lineThickness);
            dpType = "Bubble";
            ctl.AddRealTimeSeries("TestBubble", dpType, dpColor, lblEnabled, lblName, lineThickness);
            dpType = "Column";
            ctl.AddRealTimeSeries("TestColumn", dpType, dpColor, lblEnabled, lblName, lineThickness);
            dpType = "aaa";
            ctl.AddRealTimeSeries("TestAAA", dpType, dpColor, lblEnabled, lblName, lineThickness);


            ctl.ClearSeriesByName(seriesName1);
            ctl.ClearSeriesByNameStartBy(seriesName2);
            ctl.ClearSeries();

        }

        [Test]
        public void TestTrendingChartUserCtl_Resize()
        {
            Accessor trendingChartUserCtlAccessor = ReflectionAccessor.Wrap(ctl);
            trendingChartUserCtlAccessor.Call("TrendingChartUserCtl_Resize", null, null);
        }

        [Test]
        public void TestInitChartBeforeRealTime()
        {
            int frameInterval = 5;
            int timeInterval = 100;
            bool enable3D = false;
            int defaultGapDepth = 100;

            ctl.InitChartBeforeRealTime(frameInterval, timeInterval, enable3D, defaultGapDepth);

            frameInterval = 50;
            ctl.InitChartBeforeRealTime(frameInterval, timeInterval, enable3D, defaultGapDepth);
        }

        [Test]
        public void TestEnableZooming()
        {
            ctl.EnableZooming();
        }

        [Test]
        public void TestDisableZooming()
        {
            ctl.DisableZooming();
        }

        [Test]
        public void TestClearAllSeriesAndMarkers()
        {
            ctl.ClearAllSeriesAndMarkers();
        }

        [Test]
        public void TestAddMarker()
        {
            string markerName = "UniTest_MarekerName";
            double markerWidth = 4.5;
            double markerValue = 2.5;
            Color bColor = Color.Red;
            Color fColor = Color.Blue;

            ctl.AddMarker(markerName, markerWidth, markerValue, bColor, fColor);


            ctl.ClearAllSeriesAndMarkers();
        }



        [Test]
        public void Test_InitChartBeforeHistory_AddHistorySeries_AddHistPoint_GetSeriesNames_GetSeriesIndex_changeStyle()
        {
            string seriesName = "UnitTest_HistSeriesName";
            string dpType = "Spline";
            Color dpColor = Color.Red;
            bool lblEnabled = true;
            string lblName = "TestLabelName";
            int lineThickness = 10;
            bool visibleInLegend = true;

            ctl.InitChartBeforeHistory(DateTime.Today, DateTime.Today, false);
            //ctl.InitChartBeforeHistory(DateTime.Today, DateTime.Today.AddDays(1), false);

            ctl.AddHistorySeries(seriesName, dpType, dpColor, lblEnabled, lblName, lineThickness, visibleInLegend);
            ctl.AddHistoryPoint(seriesName, DateTime.Now, 10);
            ctl.GetSeriesNames();
            ctl.GetSeriesIndex(seriesName);
            ctl.ChangeStyle(true);
            ctl.ClearSeries();
        }

        [Test]
        public void TestAddFormulaSeries_GetFormulaEquation_AddFormulaPoint_SetToolTip()
        {
            string dpType = "Line";
            Color dpColor = Color.Green;
            bool lblEnabled = true;
            string lblName = "LblName";
            string dpEquation = "TestEqueation";
            int lineThickness = 10;

            ctl.InitChartBeforeRealTime(5, 100, false, 100);
            ctl.AddFormulaSeries(dpType, dpColor, lblEnabled, lblName, dpEquation, lineThickness);

            ctl.GetFormulaEquation(lblName);
            ctl.GetFormulaEquation("not a formula name");
            ctl.AddFormulaPoint(lblName, DateTime.Now, 1);
            string tooltip = "#VALY,#VALX";
            ctl.SetToolTip(lblName, tooltip);
            ctl.ClearSeries();
        }

        [Test]
        public void TestGetSeriesCount()
        {
            ctl.GetSeriesCount();
        }

        [Test]
        public void TestGetPrintDoc()
        {
            ctl.GetPrintDoc();
        }

        [Test]
        public void TestSaveAsImage()
        {
            ctl.SaveAsImage("a.bmp");
            ctl.SaveAsImage("a.jpg");
            ctl.SaveAsImage("a.emf");
            ctl.SaveAsImage("a.gif");
            ctl.SaveAsImage("a.png");
            ctl.SaveAsImage("a.tif");
            ctl.SaveAsImage("a.bmp");

        }

        [Test]
        public void TestDispose02()
        {
            bool disposing = false;
            Accessor ctlAccessor = ReflectionAccessor.Wrap(ctl);
            ctlAccessor.Call("Dispose", disposing);

            disposing = true;
            ctlAccessor.SetField("components", new System.ComponentModel.Container());
            ctlAccessor.Call("Dispose", disposing);
        }

    }
}
