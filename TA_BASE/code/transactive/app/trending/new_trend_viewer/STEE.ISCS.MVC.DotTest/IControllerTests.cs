using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.MVC;
using System.Collections.Generic;

namespace STEE.ISCS.MVC.DotTest
{
    [TestFixture()]
    public class IControllerTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/ZwP9w", "/fohCQ")]
        public void TestDispose01()
        {
            IController controller = new ControllerTest(); 

            //test call
            controller.Dispose();

            //post check
            Accessor controllerAccessor = ReflectionAccessor.Wrap(controller);
            bool disposedValue = (bool)controllerAccessor.GetField("m_disposed");
            Assert.IsTrue(disposedValue);

            //second call to Dispose
            controller.Dispose();

            
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+JgIvg", "+ZRqzg")]
        public void TestDeattach01()
        {
            //Initial setup
            IController controller = new ControllerTest();

//             view = new ViewTest();
//             view.ViewType = ViewTest.ViewTestType;            
//             model = new ModelTest();
//             controller.Attach(model, view);

            //test call
            controller.Deattach();

            //post Condition check
            Accessor controllerAccessor = ReflectionAccessor.Wrap(controller);
            Assert.IsNull(controllerAccessor.GetField("m_View"));
            Assert.IsNull(controllerAccessor.GetField("m_Model"));

            Accessor notifyManagerAccessor = ReflectionAccessor.Wrap(NotifyManager.GetInstance());
            Dictionary<IObserver, IObserver> observerMap = (Dictionary<IObserver, IObserver>)notifyManagerAccessor.GetField("m_ObserverMap");
            Assert.IsFalse(observerMap.ContainsKey(controller));

        }

    }
}
