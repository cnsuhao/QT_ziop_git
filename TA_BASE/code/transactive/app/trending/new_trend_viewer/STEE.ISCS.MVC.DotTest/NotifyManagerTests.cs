using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.MVC;
using STEE.ISCS.MVC.DotTest.Factories;
using System;
using System.Collections.Generic;

namespace STEE.ISCS.MVC.DotTest
{
    [TestFixture()]
    public class NotifyManagerTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/tGcdQ", "+1ebrg")]
        public void TestNotifyManagerConstructor01()
        {
            //NotifyManager notifyManager = (NotifyManager)ReflectionAccessor.Construct();
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/0t7Hw", "/T41Mw")]
        public void TestGetInstance01()
        {
            //test Procedure call
            NotifyManager notifyManager = NotifyManager.GetInstance();

            //Post check
            Assert.IsNotNull(notifyManager);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+C5CIg", "/yQUkA")]
        public void TestSend01()
        {
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
            ObserverTest observer1 = new ObserverTest();
            notifyManager.RegisterObserver(observer1);
            string type = string.Empty;
            string name = string.Empty;
            object body = NotifyManagerFactory.CreateNotifyManager01();
            //Test Procedure Call
            notifyManager.Send(type, name, body);


        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+C5CIg", "/Smj3g")]
        public void TestSend02()
        {
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
            string type = string.Empty;
            string name = string.Empty;
            object body = NotifyObjectFactory.CreateNotifyObject01();
            notifyManager.Send(type, name, body);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]        
        public void TestUnregisterObserver()
        {
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
            ObserverTest observer1 = new ObserverTest();
            notifyManager.RegisterObserver(observer1);

            //Test Procedure Call
            notifyManager.UnregisterObserver(observer1);

            //Post Check
            Accessor notifyManagerAccessor = ReflectionAccessor.Wrap(notifyManager);
            Dictionary<IObserver, IObserver> observerMap = (Dictionary<IObserver, IObserver>)notifyManagerAccessor.GetField("m_ObserverMap");
            Assert.IsFalse(observerMap.ContainsKey(observer1));
        }



        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestUnregisterObserver1()
        {
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
            ObserverTest observer1 = new ObserverTest();
            ObserverTest observer2 = new ObserverTest();
            notifyManager.RegisterObserver(observer1);

            //Test Procedure Call
            notifyManager.UnregisterObserver(observer2);

            //Post Check
            Accessor notifyManagerAccessor = ReflectionAccessor.Wrap(notifyManager);
            Dictionary<IObserver, IObserver> observerMap = (Dictionary<IObserver, IObserver>)notifyManagerAccessor.GetField("m_ObserverMap");
            Assert.IsTrue(observerMap.ContainsKey(observer1));
     

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+C5CIg", "+50DsQ")]
        public void TestSend03()
        {
            NotifyManager notifyManager = NotifyManagerFactory.CreateNotifyManager01();
            string type = string.Empty;
            string name = string.Empty;
            object body = ViewManagerFactory.CreateViewManager01();

            //Test Procedure Call
            notifyManager.Send(type, name, body);
        }

    }
}
