using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;
using TrendViewer.Controller;
using Entity.Trending;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class FormulaDataTests
    {
        private FormulaData formulaData;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            formulaData = new FormulaData();
        }

//         [TestCaseUnverified("Test case not verified")]
//         [TestCaseAutogenerated]
//         [TestAuthor("user")]
//         [Test]
//         [HashCode("++3dRQ", "+BsRGA")]
//         public void TestFormulaDataConstructor01()
//         {
//             FormulaData formulaData = new FormulaData();
//         }

        [Test]
        public void TesttranslateCaptionToCn()
        {
            formulaData.SetFormType(FormType.Edit);
            Accessor viewAccessor = ReflectionAccessor.Wrap(formulaData);
            viewAccessor.Call("translateCaptionToCn");
            
            formulaData.SetFormType(FormType.Add);
            viewAccessor.Call("translateCaptionToCn");
        }

        [Test]
        public void TestSetFormType()
        {
            formulaData.SetFormType(FormType.Add);
        }

        [Test]
        public void TestGetNewFormula()
        {
            formulaData.GetNewFormula();
        }

        [Test]
        public void TestAttachListener()
        {
            formulaData.SetFormType(FormType.Add);
            STEE.ISCS.MVC.IController controller = new FormulaDataController();
            formulaData.AttachListener(controller);
            formulaData.SetFormType(FormType.Edit);
            formulaData.AttachListener(controller);
        }

        [Test]
        public void TestGetFormulaName()
        {
            formulaData.GetFormulaName();
        }

        [Test]
        public void TestisNumeric()
        {
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            string val="31";
            System.Globalization.NumberStyles numberStyle = System.Globalization.NumberStyles.Number;
            formulaDataAccessor.Call("isNumeric", val, numberStyle);
        }

        [Test]
        public void TestEditDataPoint_Paint()
        {
             Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
             formulaDataAccessor.Call("EditDataPoint_Paint", null, null);
            
        }

        [Test]
        public void TestEditDataPointFormula_Load01()
        {
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            formulaData.SetFormType(FormType.Add);
            formulaDataAccessor.Call("EditDataPointFormula_Load", null, null);

            formulaData.SetFormType(FormType.Edit);
            FormulaDataController ctl = (FormulaDataController)(formulaDataAccessor.GetField("m_controller"));
            ctl = new FormulaDataController();

            
            Accessor ctlAccessor = ReflectionAccessor.Wrap(ctl);
            EtyFormula record=(EtyFormula)(ctlAccessor.GetField("m_formula"));
            record = new EtyFormula();
            record.DPEquation = "::a+::b";
            record.DPLblName = "TestFormula";
            record.DPColor = "-32704";
            ctlAccessor.SetField("m_formula", record);
            formulaDataAccessor.SetField("m_controller", ctl);

            formulaDataAccessor.Call("EditDataPointFormula_Load", null, null);

        }

        [Test]
         public void TestEditDataPointFormula_Load02()
        {
            formulaData.SetFormType(FormType.Add);
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            formulaDataAccessor.Call("EditDataPointFormula_Load", null, null);
        }
        [Test]
        public void TestcheckValidDataPointsToolStripMenuItem_Click01()
        {
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            formulaDataAccessor.Call("checkValidDataPointsToolStripMenuItem_Click", null, null);
        }
        [Test]
        public void TestcheckValidDataPointsToolStripMenuItem_Click02()
        {
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            formulaDataAccessor.Call("checkValidDataPointsToolStripMenuItem_Click", null, null);
        }

        [Test]
        public void TestCheckValidVariables01()
        {
//             formulaData.equationBox.Text = "";
//             formulaData.CheckValidVariables();
// 
//             formulaData.equationBox.Text = "2";
//             formulaData.CheckValidVariables();
// 
//             formulaData.equationBox.Text = "::a+1";
//             formulaData.CheckValidVariables();
// 
//             string statement = "a::b";
//             formulaData.equationBox.Text = statement;
//             formulaData.CheckValidVariables();
//             statement = "::a::b";
//             formulaData.equationBox.Text = statement;
//             formulaData.CheckValidVariables();
//             statement = "::a"; 
//             formulaData.equationBox.Text = statement;
//             formulaData.CheckValidVariables();

        }

        [Test]
        public void TestCheckValidVariables02()
        {
            string statement = "::a";
           // formulaData.equationBox.Text = statement;
            formulaData.CheckValidVariables();
        }

        [Test]
        public void TestcolorCmd_Click01()
        {
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            System.Windows.Forms.ColorDialog colorDialog1 = (System.Windows.Forms.ColorDialog)formulaDataAccessor.GetField("colorDialog1");
            colorDialog1 = new System.Windows.Forms.ColorDialog();
            formulaDataAccessor.Call("colorCmd_Click",null,null);
        }

        [Test]
        public void TestcolorCmd_Click02()
        {
           
            Accessor formulaDataAccessor = ReflectionAccessor.Wrap(formulaData);
            formulaDataAccessor.SetField("colorDialog1", null); //throw exception
            formulaDataAccessor.Call("colorCmd_Click", null, null);
        }
    }
}
