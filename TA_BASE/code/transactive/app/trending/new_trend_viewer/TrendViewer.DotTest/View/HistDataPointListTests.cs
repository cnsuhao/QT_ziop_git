using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.View;
using System.Data;
using TrendViewer.Controller;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class HistDataPointListTests
    {
        private HistDataPointList histDataPointList;

        [TestFixtureSetUp]
        public void TestFixtureSetUp()
        {
            histDataPointList = new HistDataPointList();
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/GxeNA", "/nV77A")]
        public void TestDispose01()
        {
            using (HistDataPointList histDataPointList = HistDataPointListFactory.CreateHistDataPointList01())
            {
                bool disposing = false;
                Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
                histDataPointListAccessor.Call("Dispose", disposing);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+EP4uw", "+n3D3g")]
        public void TestInitializeComponent01()
        {
            using (HistDataPointList histDataPointList = HistDataPointListFactory.CreateHistDataPointList01())
            {
                Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
                histDataPointListAccessor.Call("InitializeComponent");
    
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Y00og", "/fm1oQ")]
        public void TestHistDataPointListConstructor01()
        {
            HistDataPointList histDataPointList = new HistDataPointList();
    
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+yRa7g", "/+DDtw")]
        public void TestTranslateCaption01()
        {
            using (HistDataPointList histDataPointList = HistDataPointListFactory.CreateHistDataPointList01())
            {
                histDataPointList.TranslateCaption();
             
            }
        }

        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/LHJ6A", "+xLj8A")]
        public void Test_GetHistDataPointNameByRowIndex_PopulateDataPointListDataGridView()
        {
            int mode = 1;

            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
            DataGridView dataPointListDataGridView = (DataGridView)(histDataPointListAccessor.GetField("dataPointListDataGridView"));

            DataTable dataTable = new DataTable("TRENDVIEWER_HIST_CONFIG");

            dataTable.Columns.Add("DATA_PT_HOST", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_NAME", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_TYPE", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_COLOR", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_SERVER", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_ENABLED", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_LBL_ENABLED", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_LBL_NAME", System.Type.GetType("System.String"));
            dataTable.Columns.Add("DATA_PT_DT", System.Type.GetType("System.DateTime"));
            dataTable.Columns.Add("DATA_PT_DT_END", System.Type.GetType("System.DateTime"));

            histDataPointList.Display(1, dataTable);

            DataRow row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name1";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "Y";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);

            histDataPointList.GetHistDataPointNameByRowIndex(1);
            // dataPointListDataGridView.SortedColumn = dataPointListDataGridView.Columns[3];

            histDataPointList.Display(mode, dataTable);

            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name2";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "N";
            row["DATA_PT_LBL_ENABLED"] = "N";
            row["DATA_PT_COLOR"] = "-32704";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name3";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "Y";
            row["DATA_PT_LBL_ENABLED"] = "Y";
            row["DATA_PT_COLOR"] = "-32704";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name4";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "N";
            row["DATA_PT_LBL_ENABLED"] = "N";
            row["DATA_PT_COLOR"] = "-32704";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name5";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "N";
            row["DATA_PT_LBL_ENABLED"] = "N";
            row["DATA_PT_COLOR"] = "-32704";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name6";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "Y";
            row["DATA_PT_LBL_ENABLED"] = "Y";
            row["DATA_PT_COLOR"] = "-32704";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "test_name7";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "N";
            row["DATA_PT_LBL_ENABLED"] = "N";
            row["DATA_PT_LBL_NAME"] = "abc";
            row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
            row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);
            histDataPointList.Display(mode, dataTable);

            row = dataTable.NewRow();
            row["DATA_PT_NAME"] = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901";
            row["DATA_PT_HOST"] = "test_host";
            row["DATA_PT_TYPE"] = "Line";
            row["DATA_PT_ENABLED"] = "Y";
            row["DATA_PT_LBL_ENABLED"] = "Y";
            row["DATA_PT_SERVER"] = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901";
            //DATA_PT_LBL_NAME.size=120:
            row["DATA_PT_LBL_NAME"] = "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901";
            row["DATA_PT_COLOR"] = "-32704";
//             row["DATA_PT_DT"] = new DateTime(2013, 1, 1);
//             row["DATA_PT_DT_END"] = new DateTime(2013, 1, 2);
            dataTable.Rows.Add(row);

            //dataPointListDataGridView.SortOrder = SortOrder.Descending;
            //dataPointListDataGridView.SortedColumn.Name = "DATA_PT_LBL_NAME";
            histDataPointList.Display(mode, dataTable);
            histDataPointList.GetHistDataPointNameByRowIndex(0);


            //todo: pageNumDataPointListDataGridView.Value > 1) for PopulateDataPointListDataGridView
            System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)histDataPointListAccessor.GetField("pageNumDataPointListDataGridView");
            ud = new System.Windows.Forms.NumericUpDown();
            ud.Minimum = 1;
            ud.Maximum = 3;
            ud.Value = 2;
            histDataPointListAccessor.SetField("pageNumDataPointListDataGridView", ud);
            histDataPointList.Display(0, dataTable);
            histDataPointList.Display(1, dataTable);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+sfMbw", "/Ut52g")]
        public void TestInitializeDataPointListDataGridView01()
        {
            using (HistDataPointList histDataPointList = HistDataPointListFactory.CreateHistDataPointList01())
            {
                Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
                histDataPointListAccessor.Call("InitializeDataPointListDataGridView");

            }
        }

        [Test]
        public void TestInitializeDataPointListDataGridView02()
        {
            //Exception caught
            using (HistDataPointList histDataPointList = HistDataPointListFactory.CreateHistDataPointList01())
            {
                Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
                histDataPointListAccessor.Call("InitializeDataPointListDataGridView");

            }
        }
        [Test]
        public void TestAttacheListener()
        {
            HistDataPointListController ctl = new HistDataPointListController();
            histDataPointList.AttachListener(ctl);
        }

        [Test]
        public void TestfirstdataPointListDataGridView_Click()
        {
            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
            histDataPointListAccessor.Call("firstdataPointListDataGridView_Click", null, null); 
        }

        [Test]
        public void TestprevdataPointListDataGridView_Click()
        {
            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
            System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)histDataPointListAccessor.GetField("pageNumDataPointListDataGridView");
            ud = new System.Windows.Forms.NumericUpDown();
            ud.Minimum = 1;
            ud.Maximum = 3;
            ud.Value = 2;
            histDataPointListAccessor.SetField("pageNumDataPointListDataGridView", ud);
            histDataPointListAccessor.Call("prevdataPointListDataGridView_Click", null, null);
        }

        [Test]
        public void TestnextdataPointListDataGridView_Click()
        {
            //pageNumDataPointListDataGridView.Value < pageNumDataPointListDataGridView.Maximum
            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
            System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)histDataPointListAccessor.GetField("pageNumDataPointListDataGridView");
            ud = new System.Windows.Forms.NumericUpDown();
            ud.Value = 1;
            ud.Maximum = 2;
            histDataPointListAccessor.SetField("pageNumDataPointListDataGridView", ud);
            histDataPointListAccessor.Call("nextdataPointListDataGridView_Click", null, null);
        }

        [Test]
        public void TestlastdataPointListDataGridView_Click()
        {
            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList);
            histDataPointListAccessor.Call("lastdataPointListDataGridView_Click", null, null);
        }

        [Test]
        public void TestDisplay()
        {
            //Exception caught
            histDataPointList.Display(1, null);
        }

        [Test]
        public void TestDataPointHistoryViewer_Paint()
        {
            Accessor histDataPointListAccessor = ReflectionAccessor.Wrap(histDataPointList); ;
            histDataPointListAccessor.Call("DataPointHistoryViewer_Paint", null, null);
        }

    }
}
