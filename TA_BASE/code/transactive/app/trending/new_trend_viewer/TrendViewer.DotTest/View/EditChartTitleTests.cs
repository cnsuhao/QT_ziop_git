using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;
using STEE.ISCS.MVC;
using TrendViewer.Controller;
using TrendViewer.Controller;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class EditChartTitleTests
    {
        private EditChartTitle editChartTitle;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            editChartTitle = new EditChartTitle();
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/HT1uA", "+q2Qvg")]
        public void TestEditChartTitleConstructor01()
        {
            EditChartTitle editChartTitle = new EditChartTitle();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/a9AtA", "+z9Low")]
        public void TestAttachListener01()
        {
            IController controller = new ChangeTrendTitleController();
            Accessor frmAccessor = ReflectionAccessor.Wrap(editChartTitle);
            frmAccessor.SetField("m_controller", controller);
            editChartTitle.AttachListener(controller);

            // ExpectedException custom attribute was generated instead of
            // assertions since the test threw System.ArgumentException
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+g52Cg", "+Tvx8w")]
        public void TestDisplay01()
        {
            string[] titles = { "t1", "t2", "t3" }; 
            editChartTitle.Display(titles);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Ba48g", "+j/wYw")]
        public void TestDispose01()
        {
            bool disposing = true;
            Accessor editChartTitleAccessor = ReflectionAccessor.Wrap(editChartTitle);
            editChartTitleAccessor.SetField("components", new System.ComponentModel.Container());
            editChartTitleAccessor.Call("Dispose", disposing);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)editChartTitle.AccessibleDefaultActionDescription);
            recorder.Record((string)editChartTitle.AccessibleDescription);
            recorder.Record((string)editChartTitle.AccessibleName);
            recorder.Record((AccessibleRole)editChartTitle.AccessibleRole);
            recorder.Record((bool)editChartTitle.AllowDrop);
            recorder.Record((bool)editChartTitle.AllowTransparency);
            recorder.Record((AnchorStyles)editChartTitle.Anchor);
            recorder.Record((AutoScaleMode)editChartTitle.AutoScaleMode);
            recorder.Record((bool)editChartTitle.AutoScroll);
            recorder.Record((bool)editChartTitle.AutoSize);
            recorder.Record((AutoSizeMode)editChartTitle.AutoSizeMode);
            recorder.Record((AutoValidate)editChartTitle.AutoValidate);
            recorder.Record((ImageLayout)editChartTitle.BackgroundImageLayout);
            recorder.Record((int)editChartTitle.Bottom);
            recorder.Record((bool)editChartTitle.CanFocus);
            recorder.Record((bool)editChartTitle.CanSelect);
            recorder.Record((bool)editChartTitle.Capture);
            recorder.Record((bool)editChartTitle.CausesValidation);
            recorder.Record((string)editChartTitle.CompanyName);
            recorder.Record((bool)editChartTitle.ContainsFocus);
            recorder.Record((bool)editChartTitle.ControlBox);
            recorder.Record((bool)editChartTitle.Created);
            recorder.Record((DialogResult)editChartTitle.DialogResult);
            recorder.Record((bool)editChartTitle.Disposing);
            recorder.Record((DockStyle)editChartTitle.Dock);
            recorder.Record((bool)editChartTitle.Enabled);
            recorder.Record((bool)editChartTitle.Focused);
            recorder.Record((FormBorderStyle)editChartTitle.FormBorderStyle);
            recorder.Record((bool)editChartTitle.HasChildren);
            recorder.Record((int)editChartTitle.Height);
            recorder.Record((bool)editChartTitle.HelpButton);
            recorder.Record((ImeMode)editChartTitle.ImeMode);
            recorder.Record((bool)editChartTitle.InvokeRequired);
            recorder.Record((bool)editChartTitle.IsAccessible);
            recorder.Record((bool)editChartTitle.IsDisposed);
            recorder.Record((bool)editChartTitle.IsHandleCreated);
            recorder.Record((bool)editChartTitle.IsMdiChild);
            recorder.Record((bool)editChartTitle.IsMdiContainer);
            recorder.Record((bool)editChartTitle.IsMirrored);
            recorder.Record((bool)editChartTitle.IsRestrictedWindow);
            recorder.Record((bool)editChartTitle.KeyPreview);
            recorder.Record((int)editChartTitle.Left);
            recorder.Record((bool)editChartTitle.MaximizeBox);
            recorder.Record((bool)editChartTitle.MinimizeBox);
            recorder.Record((bool)editChartTitle.Modal);
            recorder.Record((string)editChartTitle.Name);
            recorder.Record((double)editChartTitle.Opacity);
            recorder.Record((string)editChartTitle.ProductName);
            recorder.Record((string)editChartTitle.ProductVersion);
            recorder.Record((bool)editChartTitle.RecreatingHandle);
            recorder.Record((int)editChartTitle.Right);
            recorder.Record((RightToLeft)editChartTitle.RightToLeft);
            recorder.Record((bool)editChartTitle.RightToLeftLayout);
            recorder.Record((bool)editChartTitle.ShowIcon);
            recorder.Record((bool)editChartTitle.ShowInTaskbar);
            recorder.Record((SizeGripStyle)editChartTitle.SizeGripStyle);
            recorder.Record((FormStartPosition)editChartTitle.StartPosition);
            recorder.Record((bool)editChartTitleAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)editChartTitle.TabIndex);
            recorder.Record((bool)editChartTitle.TabStop);
            recorder.Record((string)editChartTitle.Text);
            recorder.Record((int)editChartTitle.Top);
            recorder.Record((bool)editChartTitle.TopLevel);
            recorder.Record((bool)editChartTitle.TopMost);
            recorder.Record((bool)editChartTitle.UseWaitCursor);
            recorder.Record((string)editChartTitle.ViewID);
            recorder.Record((string)editChartTitle.ViewType);
            recorder.Record((bool)editChartTitle.Visible);
            recorder.Record((int)editChartTitle.Width);
            recorder.Record((FormWindowState)editChartTitle.WindowState);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)editChartTitle.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)editChartTitle.AllowDrop);
            Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)editChartTitle.AutoScaleMode);
            Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)editChartTitle.AutoValidate);
            Assert.IsFalse((bool)editChartTitle.CanFocus);
            Assert.AreEqual("ST Electronics Ltd", (string)editChartTitle.CompanyName);
            Assert.IsFalse((bool)editChartTitle.Created);
            Assert.IsTrue((bool)editChartTitle.Enabled);
            Assert.IsFalse((bool)editChartTitle.HasChildren);
            Assert.IsFalse((bool)editChartTitle.InvokeRequired);
            Assert.IsFalse((bool)editChartTitle.IsHandleCreated);
            Assert.IsFalse((bool)editChartTitle.IsRestrictedWindow);
            Assert.IsFalse((bool)editChartTitle.MaximizeBox);
            Assert.AreEqual(1.0, (double)editChartTitle.Opacity, 1E-7);
            Assert.IsFalse((bool)editChartTitle.RecreatingHandle);
            Assert.IsTrue((bool)editChartTitle.ShowIcon);
            Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)editChartTitle.StartPosition);
            Assert.AreEqual("Change Trend Title", (string)editChartTitle.Text);
            Assert.IsFalse((bool)editChartTitle.TopMost);
            Assert.IsFalse((bool)editChartTitle.Visible);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/U8SjQ", "+QwrDQ")]
        public void TestEditChartData_Paint01()
        {
            object sender = null;
            PaintEventArgs e = null;
            Accessor editChartTitleAccessor = ReflectionAccessor.Wrap(editChartTitle);
            editChartTitleAccessor.Call("EditChartData_Paint", sender, e);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)editChartTitle.AccessibleDefaultActionDescription);
            recorder.Record((string)editChartTitle.AccessibleDescription);
            recorder.Record((string)editChartTitle.AccessibleName);
            recorder.Record((AccessibleRole)editChartTitle.AccessibleRole);
            recorder.Record((bool)editChartTitle.AllowDrop);
            recorder.Record((bool)editChartTitle.AllowTransparency);
            recorder.Record((AnchorStyles)editChartTitle.Anchor);
            recorder.Record((AutoScaleMode)editChartTitle.AutoScaleMode);
            recorder.Record((bool)editChartTitle.AutoScroll);
            recorder.Record((bool)editChartTitle.AutoSize);
            recorder.Record((AutoSizeMode)editChartTitle.AutoSizeMode);
            recorder.Record((AutoValidate)editChartTitle.AutoValidate);
            recorder.Record((ImageLayout)editChartTitle.BackgroundImageLayout);
            recorder.Record((int)editChartTitle.Bottom);
            recorder.Record((bool)editChartTitle.CanFocus);
            recorder.Record((bool)editChartTitle.CanSelect);
            recorder.Record((bool)editChartTitle.Capture);
            recorder.Record((bool)editChartTitle.CausesValidation);
            recorder.Record((string)editChartTitle.CompanyName);
            recorder.Record((bool)editChartTitle.ContainsFocus);
            recorder.Record((bool)editChartTitle.ControlBox);
            recorder.Record((bool)editChartTitle.Created);
            recorder.Record((DialogResult)editChartTitle.DialogResult);
            recorder.Record((bool)editChartTitle.Disposing);
            recorder.Record((DockStyle)editChartTitle.Dock);
            recorder.Record((bool)editChartTitle.Enabled);
            recorder.Record((bool)editChartTitle.Focused);
            recorder.Record((FormBorderStyle)editChartTitle.FormBorderStyle);
            recorder.Record((bool)editChartTitle.HasChildren);
            recorder.Record((int)editChartTitle.Height);
            recorder.Record((bool)editChartTitle.HelpButton);
            recorder.Record((ImeMode)editChartTitle.ImeMode);
            recorder.Record((bool)editChartTitle.InvokeRequired);
            recorder.Record((bool)editChartTitle.IsAccessible);
            recorder.Record((bool)editChartTitle.IsDisposed);
            recorder.Record((bool)editChartTitle.IsHandleCreated);
            recorder.Record((bool)editChartTitle.IsMdiChild);
            recorder.Record((bool)editChartTitle.IsMdiContainer);
            recorder.Record((bool)editChartTitle.IsMirrored);
            recorder.Record((bool)editChartTitle.IsRestrictedWindow);
            recorder.Record((bool)editChartTitle.KeyPreview);
            recorder.Record((int)editChartTitle.Left);
            recorder.Record((bool)editChartTitle.MaximizeBox);
            recorder.Record((bool)editChartTitle.MinimizeBox);
            recorder.Record((bool)editChartTitle.Modal);
            recorder.Record((string)editChartTitle.Name);
            recorder.Record((double)editChartTitle.Opacity);
            recorder.Record((string)editChartTitle.ProductName);
            recorder.Record((string)editChartTitle.ProductVersion);
            recorder.Record((bool)editChartTitle.RecreatingHandle);
            recorder.Record((int)editChartTitle.Right);
            recorder.Record((RightToLeft)editChartTitle.RightToLeft);
            recorder.Record((bool)editChartTitle.RightToLeftLayout);
            recorder.Record((bool)editChartTitle.ShowIcon);
            recorder.Record((bool)editChartTitle.ShowInTaskbar);
            recorder.Record((SizeGripStyle)editChartTitle.SizeGripStyle);
            recorder.Record((FormStartPosition)editChartTitle.StartPosition);
            recorder.Record((bool)editChartTitleAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)editChartTitle.TabIndex);
            recorder.Record((bool)editChartTitle.TabStop);
            recorder.Record((string)editChartTitle.Text);
            recorder.Record((int)editChartTitle.Top);
            recorder.Record((bool)editChartTitle.TopLevel);
            recorder.Record((bool)editChartTitle.TopMost);
            recorder.Record((bool)editChartTitle.UseWaitCursor);
            recorder.Record((string)editChartTitle.ViewID);
            recorder.Record((string)editChartTitle.ViewType);
            recorder.Record((bool)editChartTitle.Visible);
            recorder.Record((int)editChartTitle.Width);
            recorder.Record((FormWindowState)editChartTitle.WindowState);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)editChartTitle.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)editChartTitle.AllowDrop);
            Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)editChartTitle.AutoScaleMode);
            Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)editChartTitle.AutoValidate);
            Assert.IsFalse((bool)editChartTitle.CanFocus);
            Assert.AreEqual("ST Electronics Ltd", (string)editChartTitle.CompanyName);
            Assert.IsFalse((bool)editChartTitle.Created);
            Assert.IsTrue((bool)editChartTitle.Enabled);
            Assert.IsFalse((bool)editChartTitle.HasChildren);
            Assert.IsFalse((bool)editChartTitle.InvokeRequired);
            Assert.IsFalse((bool)editChartTitle.IsHandleCreated);
            Assert.IsFalse((bool)editChartTitle.IsRestrictedWindow);
            Assert.IsFalse((bool)editChartTitle.MaximizeBox);
            Assert.AreEqual(1.0, (double)editChartTitle.Opacity, 1E-7);
            Assert.IsFalse((bool)editChartTitle.RecreatingHandle);
            Assert.IsTrue((bool)editChartTitle.ShowIcon);
            Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)editChartTitle.StartPosition);
            Assert.AreEqual("Change Trend Title", (string)editChartTitle.Text);
            Assert.IsFalse((bool)editChartTitle.TopMost);
            Assert.IsFalse((bool)editChartTitle.Visible);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/t2BUA", "+ivFNw")]
        public void TestGetTitles01()
        {
            string[] string1 = editChartTitle.GetTitles();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)editChartTitle.AccessibleDefaultActionDescription);
            recorder.Record((string)editChartTitle.AccessibleDescription);
            recorder.Record((string)editChartTitle.AccessibleName);
            recorder.Record((AccessibleRole)editChartTitle.AccessibleRole);
            recorder.Record((bool)editChartTitle.AllowDrop);
            recorder.Record((bool)editChartTitle.AllowTransparency);
            recorder.Record((AnchorStyles)editChartTitle.Anchor);
            recorder.Record((AutoScaleMode)editChartTitle.AutoScaleMode);
            recorder.Record((bool)editChartTitle.AutoScroll);
            recorder.Record((bool)editChartTitle.AutoSize);
            recorder.Record((AutoSizeMode)editChartTitle.AutoSizeMode);
            recorder.Record((AutoValidate)editChartTitle.AutoValidate);
            recorder.Record((ImageLayout)editChartTitle.BackgroundImageLayout);
            recorder.Record((int)editChartTitle.Bottom);
            recorder.Record((bool)editChartTitle.CanFocus);
            recorder.Record((bool)editChartTitle.CanSelect);
            recorder.Record((bool)editChartTitle.Capture);
            recorder.Record((bool)editChartTitle.CausesValidation);
            recorder.Record((string)editChartTitle.CompanyName);
            recorder.Record((bool)editChartTitle.ContainsFocus);
            recorder.Record((bool)editChartTitle.ControlBox);
            recorder.Record((bool)editChartTitle.Created);
            recorder.Record((DialogResult)editChartTitle.DialogResult);
            recorder.Record((bool)editChartTitle.Disposing);
            recorder.Record((DockStyle)editChartTitle.Dock);
            recorder.Record((bool)editChartTitle.Enabled);
            recorder.Record((bool)editChartTitle.Focused);
            recorder.Record((FormBorderStyle)editChartTitle.FormBorderStyle);
            recorder.Record((bool)editChartTitle.HasChildren);
            recorder.Record((int)editChartTitle.Height);
            recorder.Record((bool)editChartTitle.HelpButton);
            recorder.Record((ImeMode)editChartTitle.ImeMode);
            recorder.Record((bool)editChartTitle.InvokeRequired);
            recorder.Record((bool)editChartTitle.IsAccessible);
            recorder.Record((bool)editChartTitle.IsDisposed);
            recorder.Record((bool)editChartTitle.IsHandleCreated);
            recorder.Record((bool)editChartTitle.IsMdiChild);
            recorder.Record((bool)editChartTitle.IsMdiContainer);
            recorder.Record((bool)editChartTitle.IsMirrored);
            recorder.Record((bool)editChartTitle.IsRestrictedWindow);
            recorder.Record((bool)editChartTitle.KeyPreview);
            recorder.Record((int)editChartTitle.Left);
            recorder.Record((bool)editChartTitle.MaximizeBox);
            recorder.Record((bool)editChartTitle.MinimizeBox);
            recorder.Record((bool)editChartTitle.Modal);
            recorder.Record((string)editChartTitle.Name);
            recorder.Record((double)editChartTitle.Opacity);
            recorder.Record((string)editChartTitle.ProductName);
            recorder.Record((string)editChartTitle.ProductVersion);
            recorder.Record((bool)editChartTitle.RecreatingHandle);
            recorder.Record((int)editChartTitle.Right);
            recorder.Record((RightToLeft)editChartTitle.RightToLeft);
            recorder.Record((bool)editChartTitle.RightToLeftLayout);
            recorder.Record((bool)editChartTitle.ShowIcon);
            recorder.Record((bool)editChartTitle.ShowInTaskbar);
            recorder.Record((SizeGripStyle)editChartTitle.SizeGripStyle);
            recorder.Record((FormStartPosition)editChartTitle.StartPosition);
            recorder.Record((bool)ReflectionAccessor.Wrap(editChartTitle).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)editChartTitle.TabIndex);
            recorder.Record((bool)editChartTitle.TabStop);
            recorder.Record((string)editChartTitle.Text);
            recorder.Record((int)editChartTitle.Top);
            recorder.Record((bool)editChartTitle.TopLevel);
            recorder.Record((bool)editChartTitle.TopMost);
            recorder.Record((bool)editChartTitle.UseWaitCursor);
            recorder.Record((string)editChartTitle.ViewID);
            recorder.Record((string)editChartTitle.ViewType);
            recorder.Record((bool)editChartTitle.Visible);
            recorder.Record((int)editChartTitle.Width);
            recorder.Record((FormWindowState)editChartTitle.WindowState);
            recorder.Record<bool>(delegate { return (bool)string1.IsFixedSize; });
            recorder.Record<bool>(delegate { return (bool)string1.IsReadOnly; });
            recorder.Record<bool>(delegate { return (bool)string1.IsSynchronized; });
            recorder.Record<int>(delegate { return (int)string1.Length; });
            recorder.Record<long>(delegate { return (long)string1.LongLength; });
            recorder.Record<int>(delegate { return (int)string1.Rank; });
            recorder.Record<int>(delegate { return (int)ReflectionAccessor.Wrap(string1).GetProperty("System.Collections.ICollection.Count"); });
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)editChartTitle.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)editChartTitle.AllowDrop);
            Assert.IsFalse((bool)editChartTitle.AutoScroll);
            Assert.AreEqual(global::System.Windows.Forms.ImageLayout.Tile, (ImageLayout)editChartTitle.BackgroundImageLayout);
            Assert.IsFalse((bool)editChartTitle.Capture);
            Assert.IsTrue((bool)editChartTitle.ControlBox);
            Assert.AreEqual(global::System.Windows.Forms.DockStyle.None, (DockStyle)editChartTitle.Dock);
            Assert.AreEqual(global::System.Windows.Forms.FormBorderStyle.Fixed3D, (FormBorderStyle)editChartTitle.FormBorderStyle);
            Assert.AreEqual(global::System.Windows.Forms.ImeMode.NoControl, (ImeMode)editChartTitle.ImeMode);
            Assert.IsFalse((bool)editChartTitle.IsHandleCreated);
            Assert.IsFalse((bool)editChartTitle.IsRestrictedWindow);
            Assert.IsTrue((bool)editChartTitle.MinimizeBox);
            Assert.AreEqual("TrendViewer", (string)editChartTitle.ProductName);
            Assert.AreEqual(global::System.Windows.Forms.RightToLeft.No, (RightToLeft)editChartTitle.RightToLeft);
            Assert.IsTrue((bool)editChartTitle.ShowInTaskbar);
            Assert.AreEqual(0, (int)editChartTitle.TabIndex);
            Assert.IsTrue((bool)editChartTitle.TopLevel);
            Assert.IsNull((string)editChartTitle.ViewType);
            Assert.IsTrue((bool)string1.IsFixedSize);
            Assert.AreEqual(3, (long)string1.LongLength);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+upX5Q", "+VQfew")]
        public void TestTranslateCaption01()
        {
            editChartTitle.TranslateCaption();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)editChartTitle.AccessibleDefaultActionDescription);
            recorder.Record((string)editChartTitle.AccessibleDescription);
            recorder.Record((string)editChartTitle.AccessibleName);
            recorder.Record((AccessibleRole)editChartTitle.AccessibleRole);
            recorder.Record((bool)editChartTitle.AllowDrop);
            recorder.Record((bool)editChartTitle.AllowTransparency);
            recorder.Record((AnchorStyles)editChartTitle.Anchor);
            recorder.Record((AutoScaleMode)editChartTitle.AutoScaleMode);
            recorder.Record((bool)editChartTitle.AutoScroll);
            recorder.Record((bool)editChartTitle.AutoSize);
            recorder.Record((AutoSizeMode)editChartTitle.AutoSizeMode);
            recorder.Record((AutoValidate)editChartTitle.AutoValidate);
            recorder.Record((ImageLayout)editChartTitle.BackgroundImageLayout);
            recorder.Record((int)editChartTitle.Bottom);
            recorder.Record((bool)editChartTitle.CanFocus);
            recorder.Record((bool)editChartTitle.CanSelect);
            recorder.Record((bool)editChartTitle.Capture);
            recorder.Record((bool)editChartTitle.CausesValidation);
            recorder.Record((string)editChartTitle.CompanyName);
            recorder.Record((bool)editChartTitle.ContainsFocus);
            recorder.Record((bool)editChartTitle.ControlBox);
            recorder.Record((bool)editChartTitle.Created);
            recorder.Record((DialogResult)editChartTitle.DialogResult);
            recorder.Record((bool)editChartTitle.Disposing);
            recorder.Record((DockStyle)editChartTitle.Dock);
            recorder.Record((bool)editChartTitle.Enabled);
            recorder.Record((bool)editChartTitle.Focused);
            recorder.Record((FormBorderStyle)editChartTitle.FormBorderStyle);
            recorder.Record((bool)editChartTitle.HasChildren);
            recorder.Record((int)editChartTitle.Height);
            recorder.Record((bool)editChartTitle.HelpButton);
            recorder.Record((ImeMode)editChartTitle.ImeMode);
            recorder.Record((bool)editChartTitle.InvokeRequired);
            recorder.Record((bool)editChartTitle.IsAccessible);
            recorder.Record((bool)editChartTitle.IsDisposed);
            recorder.Record((bool)editChartTitle.IsHandleCreated);
            recorder.Record((bool)editChartTitle.IsMdiChild);
            recorder.Record((bool)editChartTitle.IsMdiContainer);
            recorder.Record((bool)editChartTitle.IsMirrored);
            recorder.Record((bool)editChartTitle.IsRestrictedWindow);
            recorder.Record((bool)editChartTitle.KeyPreview);
            recorder.Record((int)editChartTitle.Left);
            recorder.Record((bool)editChartTitle.MaximizeBox);
            recorder.Record((bool)editChartTitle.MinimizeBox);
            recorder.Record((bool)editChartTitle.Modal);
            recorder.Record((string)editChartTitle.Name);
            recorder.Record((double)editChartTitle.Opacity);
            recorder.Record((string)editChartTitle.ProductName);
            recorder.Record((string)editChartTitle.ProductVersion);
            recorder.Record((bool)editChartTitle.RecreatingHandle);
            recorder.Record((int)editChartTitle.Right);
            recorder.Record((RightToLeft)editChartTitle.RightToLeft);
            recorder.Record((bool)editChartTitle.RightToLeftLayout);
            recorder.Record((bool)editChartTitle.ShowIcon);
            recorder.Record((bool)editChartTitle.ShowInTaskbar);
            recorder.Record((SizeGripStyle)editChartTitle.SizeGripStyle);
            recorder.Record((FormStartPosition)editChartTitle.StartPosition);
            recorder.Record((bool)ReflectionAccessor.Wrap(editChartTitle).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)editChartTitle.TabIndex);
            recorder.Record((bool)editChartTitle.TabStop);
            recorder.Record((string)editChartTitle.Text);
            recorder.Record((int)editChartTitle.Top);
            recorder.Record((bool)editChartTitle.TopLevel);
            recorder.Record((bool)editChartTitle.TopMost);
            recorder.Record((bool)editChartTitle.UseWaitCursor);
            recorder.Record((string)editChartTitle.ViewID);
            recorder.Record((string)editChartTitle.ViewType);
            recorder.Record((bool)editChartTitle.Visible);
            recorder.Record((int)editChartTitle.Width);
            recorder.Record((FormWindowState)editChartTitle.WindowState);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)editChartTitle.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)editChartTitle.AllowDrop);
            Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)editChartTitle.AutoScaleMode);
            Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)editChartTitle.AutoValidate);
            Assert.IsFalse((bool)editChartTitle.CanFocus);
            Assert.AreEqual("ST Electronics Ltd", (string)editChartTitle.CompanyName);
            Assert.IsFalse((bool)editChartTitle.Created);
            Assert.IsTrue((bool)editChartTitle.Enabled);
            Assert.IsFalse((bool)editChartTitle.HasChildren);
            Assert.IsFalse((bool)editChartTitle.InvokeRequired);
            Assert.IsFalse((bool)editChartTitle.IsHandleCreated);
            Assert.IsFalse((bool)editChartTitle.IsRestrictedWindow);
            Assert.IsFalse((bool)editChartTitle.MaximizeBox);
            Assert.AreEqual(1.0, (double)editChartTitle.Opacity, 1E-7);
            Assert.IsFalse((bool)editChartTitle.RecreatingHandle);
            Assert.IsTrue((bool)editChartTitle.ShowIcon);
            Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)editChartTitle.StartPosition);
            Assert.AreEqual("Trend Title", (string)editChartTitle.Text);
            Assert.IsFalse((bool)editChartTitle.TopMost);
            Assert.IsFalse((bool)editChartTitle.Visible);
            #endregion
        }

    }
}
