using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.View;
using STEE.ISCS.MVC;
using System.Collections.Generic;
using TrendViewer.Controller;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class DataPointGroupTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+oAM0Q", "+hqKtg")]
        public void TestDispose01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                bool disposing = true;
                Accessor dataPointGroupAccessor = ReflectionAccessor.Wrap(dataPointGroup);
                dataPointGroupAccessor.SetField("components", new System.ComponentModel.Container());
                dataPointGroupAccessor.Call("Dispose", disposing);
            }
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+WhbsQ", "/M4YhA")]
        public void TestInitializeComponent01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                Accessor dataPointGroupAccessor = ReflectionAccessor.Wrap(dataPointGroup);
                dataPointGroupAccessor.Call("InitializeComponent");
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)dataPointGroupAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)dataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.IsTrue((bool)dataPointGroup.Enabled);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/5lrqw", "+OF5LQ")]
        public void TestDataPointGroupConstructor01()
        {
            DataPointGroup dataPointGroup = new DataPointGroup();
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
            recorder.Record((string)dataPointGroup.AccessibleDescription);
            recorder.Record((string)dataPointGroup.AccessibleName);
            recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
            recorder.Record((bool)dataPointGroup.AllowDrop);
            recorder.Record((bool)dataPointGroup.AllowTransparency);
            recorder.Record((AnchorStyles)dataPointGroup.Anchor);
            recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
            recorder.Record((bool)dataPointGroup.AutoScroll);
            recorder.Record((bool)dataPointGroup.AutoSize);
            recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
            recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
            recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
            recorder.Record((int)dataPointGroup.Bottom);
            recorder.Record((bool)dataPointGroup.CanFocus);
            recorder.Record((bool)dataPointGroup.CanSelect);
            recorder.Record((bool)dataPointGroup.Capture);
            recorder.Record((bool)dataPointGroup.CausesValidation);
            recorder.Record((string)dataPointGroup.CompanyName);
            recorder.Record((bool)dataPointGroup.ContainsFocus);
            recorder.Record((bool)dataPointGroup.ControlBox);
            recorder.Record((bool)dataPointGroup.Created);
            recorder.Record((DialogResult)dataPointGroup.DialogResult);
            recorder.Record((bool)dataPointGroup.Disposing);
            recorder.Record((DockStyle)dataPointGroup.Dock);
            recorder.Record((bool)dataPointGroup.Enabled);
            recorder.Record((bool)dataPointGroup.Focused);
            recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
            recorder.Record((bool)dataPointGroup.HasChildren);
            recorder.Record((int)dataPointGroup.Height);
            recorder.Record((bool)dataPointGroup.HelpButton);
            recorder.Record((ImeMode)dataPointGroup.ImeMode);
            recorder.Record((bool)dataPointGroup.InvokeRequired);
            recorder.Record((bool)dataPointGroup.IsAccessible);
            recorder.Record((bool)dataPointGroup.IsDisposed);
            recorder.Record((bool)dataPointGroup.IsHandleCreated);
            recorder.Record((bool)dataPointGroup.IsMdiChild);
            recorder.Record((bool)dataPointGroup.IsMdiContainer);
            recorder.Record((bool)dataPointGroup.IsMirrored);
            recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
            recorder.Record((bool)dataPointGroup.KeyPreview);
            recorder.Record((int)dataPointGroup.Left);
            recorder.Record((bool)dataPointGroup.MaximizeBox);
            recorder.Record((bool)dataPointGroup.MinimizeBox);
            recorder.Record((bool)dataPointGroup.Modal);
            recorder.Record((string)dataPointGroup.Name);
            recorder.Record((double)dataPointGroup.Opacity);
            recorder.Record((string)dataPointGroup.ProductName);
            recorder.Record((string)dataPointGroup.ProductVersion);
            recorder.Record((bool)dataPointGroup.RecreatingHandle);
            recorder.Record((int)dataPointGroup.Right);
            recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
            recorder.Record((bool)dataPointGroup.RightToLeftLayout);
            recorder.Record((bool)dataPointGroup.ShowIcon);
            recorder.Record((bool)dataPointGroup.ShowInTaskbar);
            recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
            recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
            recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)dataPointGroup.TabIndex);
            recorder.Record((bool)dataPointGroup.TabStop);
            recorder.Record((string)dataPointGroup.Text);
            recorder.Record((int)dataPointGroup.Top);
            recorder.Record((bool)dataPointGroup.TopLevel);
            recorder.Record((bool)dataPointGroup.TopMost);
            recorder.Record((bool)dataPointGroup.UseWaitCursor);
            recorder.Record((string)dataPointGroup.ViewID);
            recorder.Record((string)dataPointGroup.ViewType);
            recorder.Record((bool)dataPointGroup.Visible);
            recorder.Record((int)dataPointGroup.Width);
            recorder.Record((FormWindowState)dataPointGroup.WindowState);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)dataPointGroup.AllowDrop);
            Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
            Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
            Assert.IsFalse((bool)dataPointGroup.CanFocus);
            Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
            Assert.IsFalse((bool)dataPointGroup.Created);
            Assert.IsTrue((bool)dataPointGroup.Enabled);
            Assert.IsTrue((bool)dataPointGroup.HasChildren);
            Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
            Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
            Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
            Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
            Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
            Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
            Assert.IsTrue((bool)dataPointGroup.ShowIcon);
            Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
            Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
            Assert.IsFalse((bool)dataPointGroup.TopMost);
            Assert.IsFalse((bool)dataPointGroup.Visible);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+QWNzw", "/wGo0A")]
        public void TestSetFormType01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                FormType type = FormType.Edit;
                dataPointGroup.SetFormType(type);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)dataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.IsTrue((bool)dataPointGroup.Enabled);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+QWNzw", "/VrqgQ")]
        public void TestSetFormType02()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                FormType type = FormType.Add;
                dataPointGroup.SetFormType(type);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)dataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.IsTrue((bool)dataPointGroup.Enabled);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/B1kYw", "+qENOQ")]
        public void TestTranslateCaption01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                dataPointGroup.SetFormType(FormType.Load);
                dataPointGroup.TranslateCaption();
            }
        }

        [Test]
        public void TestTranslateCaption02()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                dataPointGroup.SetFormType(FormType.Save);
                dataPointGroup.TranslateCaption();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+6p2Ag", "/JwAfA")]
        public void TestSetCurrentGrpName01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                string grpName = string.Empty;
                dataPointGroup.SetCurrentGrpName(grpName);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)dataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.IsTrue((bool)dataPointGroup.Enabled);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+1pfpg", "+ZdfAQ")]
        public void TestGetConfigName01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                string str = dataPointGroup.GetConfigName();
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record(str);
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.AreEqual("", str);
                Assert.AreEqual(global::System.Windows.Forms.AccessibleRole.Default, (AccessibleRole)dataPointGroup.AccessibleRole);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoSizeMode.GrowOnly, (AutoSizeMode)dataPointGroup.AutoSizeMode);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.IsTrue((bool)dataPointGroup.CausesValidation);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.AreEqual(global::System.Windows.Forms.DockStyle.None, (DockStyle)dataPointGroup.Dock);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.AreEqual(global::System.Windows.Forms.ImeMode.NoControl, (ImeMode)dataPointGroup.ImeMode);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/3gcbQ", "+ETiDA")]
        public void TestcancelCmd_Click01()
        {
            using (DataPointGroup dataPointGroup = DataPointGroupFactory.CreateDataPointGroup01())
            {
                object sender = null;
                EventArgs e = null;
                Accessor dataPointGroupAccessor = ReflectionAccessor.Wrap(dataPointGroup);
                dataPointGroupAccessor.Call("cancelCmd_Click", sender, e);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)dataPointGroup.AccessibleDescription);
                recorder.Record((string)dataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
                recorder.Record((bool)dataPointGroup.AllowDrop);
                recorder.Record((bool)dataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)dataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
                recorder.Record((bool)dataPointGroup.AutoScroll);
                recorder.Record((bool)dataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
                recorder.Record((int)dataPointGroup.Bottom);
                recorder.Record((bool)dataPointGroup.CanFocus);
                recorder.Record((bool)dataPointGroup.CanSelect);
                recorder.Record((bool)dataPointGroup.Capture);
                recorder.Record((bool)dataPointGroup.CausesValidation);
                recorder.Record((string)dataPointGroup.CompanyName);
                recorder.Record((bool)dataPointGroup.ContainsFocus);
                recorder.Record((bool)dataPointGroup.ControlBox);
                recorder.Record((bool)dataPointGroup.Created);
                recorder.Record((DialogResult)dataPointGroup.DialogResult);
                recorder.Record((bool)dataPointGroup.Disposing);
                recorder.Record((DockStyle)dataPointGroup.Dock);
                recorder.Record((bool)dataPointGroup.Enabled);
                recorder.Record((bool)dataPointGroup.Focused);
                recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
                recorder.Record((bool)dataPointGroup.HasChildren);
                recorder.Record((int)dataPointGroup.Height);
                recorder.Record((bool)dataPointGroup.HelpButton);
                recorder.Record((ImeMode)dataPointGroup.ImeMode);
                recorder.Record((bool)dataPointGroup.InvokeRequired);
                recorder.Record((bool)dataPointGroup.IsAccessible);
                recorder.Record((bool)dataPointGroup.IsDisposed);
                recorder.Record((bool)dataPointGroup.IsHandleCreated);
                recorder.Record((bool)dataPointGroup.IsMdiChild);
                recorder.Record((bool)dataPointGroup.IsMdiContainer);
                recorder.Record((bool)dataPointGroup.IsMirrored);
                recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)dataPointGroup.KeyPreview);
                recorder.Record((int)dataPointGroup.Left);
                recorder.Record((bool)dataPointGroup.MaximizeBox);
                recorder.Record((bool)dataPointGroup.MinimizeBox);
                recorder.Record((bool)dataPointGroup.Modal);
                recorder.Record((string)dataPointGroup.Name);
                recorder.Record((double)dataPointGroup.Opacity);
                recorder.Record((string)dataPointGroup.ProductName);
                recorder.Record((string)dataPointGroup.ProductVersion);
                recorder.Record((bool)dataPointGroup.RecreatingHandle);
                recorder.Record((int)dataPointGroup.Right);
                recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
                recorder.Record((bool)dataPointGroup.RightToLeftLayout);
                recorder.Record((bool)dataPointGroup.ShowIcon);
                recorder.Record((bool)dataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
                recorder.Record((bool)dataPointGroupAccessor.GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)dataPointGroup.TabIndex);
                recorder.Record((bool)dataPointGroup.TabStop);
                recorder.Record((string)dataPointGroup.Text);
                recorder.Record((int)dataPointGroup.Top);
                recorder.Record((bool)dataPointGroup.TopLevel);
                recorder.Record((bool)dataPointGroup.TopMost);
                recorder.Record((bool)dataPointGroup.UseWaitCursor);
                recorder.Record((string)dataPointGroup.ViewID);
                recorder.Record((string)dataPointGroup.ViewType);
                recorder.Record((bool)dataPointGroup.Visible);
                recorder.Record((int)dataPointGroup.Width);
                recorder.Record((FormWindowState)dataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)dataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
                Assert.IsFalse((bool)dataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
                Assert.IsFalse((bool)dataPointGroup.Created);
                Assert.IsTrue((bool)dataPointGroup.Enabled);
                Assert.IsTrue((bool)dataPointGroup.HasChildren);
                Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)dataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
                Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
                Assert.IsFalse((bool)dataPointGroup.TopMost);
                Assert.IsFalse((bool)dataPointGroup.Visible);
                #endregion

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+p+NKw", "/nJhxw")]
        public void TestAttachListener01()
        {
            DataPointGroup dataPointGroup = new DataPointGroup(); /* TODO: Implement me */ ;
            IController controller = new DataPointGroupController(); ; /* TODO: Implement me */ ;
            dataPointGroup.SetFormType(FormType.Load);
            dataPointGroup.AttachListener(controller);

            dataPointGroup.SetFormType(FormType.Save);
            dataPointGroup.AttachListener(controller);

            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
            recorder.Record((string)dataPointGroup.AccessibleDescription);
            recorder.Record((string)dataPointGroup.AccessibleName);
            recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
            recorder.Record((bool)dataPointGroup.AllowDrop);
            recorder.Record((bool)dataPointGroup.AllowTransparency);
            recorder.Record((AnchorStyles)dataPointGroup.Anchor);
            recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
            recorder.Record((bool)dataPointGroup.AutoScroll);
            recorder.Record((bool)dataPointGroup.AutoSize);
            recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
            recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
            recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
            recorder.Record((int)dataPointGroup.Bottom);
            recorder.Record((bool)dataPointGroup.CanFocus);
            recorder.Record((bool)dataPointGroup.CanSelect);
            recorder.Record((bool)dataPointGroup.Capture);
            recorder.Record((bool)dataPointGroup.CausesValidation);
            recorder.Record((string)dataPointGroup.CompanyName);
            recorder.Record((bool)dataPointGroup.ContainsFocus);
            recorder.Record((bool)dataPointGroup.ControlBox);
            recorder.Record((bool)dataPointGroup.Created);
            recorder.Record((DialogResult)dataPointGroup.DialogResult);
            recorder.Record((bool)dataPointGroup.Disposing);
            recorder.Record((DockStyle)dataPointGroup.Dock);
            recorder.Record((bool)dataPointGroup.Enabled);
            recorder.Record((bool)dataPointGroup.Focused);
            recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
            recorder.Record((bool)dataPointGroup.HasChildren);
            recorder.Record((int)dataPointGroup.Height);
            recorder.Record((bool)dataPointGroup.HelpButton);
            recorder.Record((ImeMode)dataPointGroup.ImeMode);
            recorder.Record((bool)dataPointGroup.InvokeRequired);
            recorder.Record((bool)dataPointGroup.IsAccessible);
            recorder.Record((bool)dataPointGroup.IsDisposed);
            recorder.Record((bool)dataPointGroup.IsHandleCreated);
            recorder.Record((bool)dataPointGroup.IsMdiChild);
            recorder.Record((bool)dataPointGroup.IsMdiContainer);
            recorder.Record((bool)dataPointGroup.IsMirrored);
            recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
            recorder.Record((bool)dataPointGroup.KeyPreview);
            recorder.Record((int)dataPointGroup.Left);
            recorder.Record((bool)dataPointGroup.MaximizeBox);
            recorder.Record((bool)dataPointGroup.MinimizeBox);
            recorder.Record((bool)dataPointGroup.Modal);
            recorder.Record((string)dataPointGroup.Name);
            recorder.Record((double)dataPointGroup.Opacity);
            recorder.Record((string)dataPointGroup.ProductName);
            recorder.Record((string)dataPointGroup.ProductVersion);
            recorder.Record((bool)dataPointGroup.RecreatingHandle);
            recorder.Record((int)dataPointGroup.Right);
            recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
            recorder.Record((bool)dataPointGroup.RightToLeftLayout);
            recorder.Record((bool)dataPointGroup.ShowIcon);
            recorder.Record((bool)dataPointGroup.ShowInTaskbar);
            recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
            recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
            recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)dataPointGroup.TabIndex);
            recorder.Record((bool)dataPointGroup.TabStop);
            recorder.Record((string)dataPointGroup.Text);
            recorder.Record((int)dataPointGroup.Top);
            recorder.Record((bool)dataPointGroup.TopLevel);
            recorder.Record((bool)dataPointGroup.TopMost);
            recorder.Record((bool)dataPointGroup.UseWaitCursor);
            recorder.Record((string)dataPointGroup.ViewID);
            recorder.Record((string)dataPointGroup.ViewType);
            recorder.Record((bool)dataPointGroup.Visible);
            recorder.Record((int)dataPointGroup.Width);
            recorder.Record((FormWindowState)dataPointGroup.WindowState);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)dataPointGroup.AllowDrop);
            Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)dataPointGroup.AutoScaleMode);
            Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)dataPointGroup.AutoValidate);
            Assert.IsFalse((bool)dataPointGroup.CanFocus);
            Assert.AreEqual("ST Electronics Ltd", (string)dataPointGroup.CompanyName);
            Assert.IsFalse((bool)dataPointGroup.Created);
            Assert.IsTrue((bool)dataPointGroup.Enabled);
            Assert.IsTrue((bool)dataPointGroup.HasChildren);
            Assert.IsFalse((bool)dataPointGroup.InvokeRequired);
            Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
            Assert.IsFalse((bool)dataPointGroup.IsRestrictedWindow);
            Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
            Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
            Assert.IsFalse((bool)dataPointGroup.RecreatingHandle);
            Assert.IsTrue((bool)dataPointGroup.ShowIcon);
            Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)dataPointGroup.StartPosition);
            Assert.AreEqual("Load Data Configuration", (string)dataPointGroup.Text);
            Assert.IsFalse((bool)dataPointGroup.TopMost);
            Assert.IsFalse((bool)dataPointGroup.Visible);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/k8EPA", "+/gKrQ")]
        public void TestFillConfigNameBox01()
        {
            DataPointGroup dataPointGroup = new DataPointGroup(); /* TODO: Implement me */ ;
            List<string> grpNames = new List<string>(); /* TODO: Implement me */ ;
            grpNames.Add("Name1");
            grpNames.Add("Name2");
            dataPointGroup.SetFormType(FormType.Load);
            dataPointGroup.FillConfigNameBox(grpNames);

            dataPointGroup.SetFormType(FormType.Save);
            dataPointGroup.FillConfigNameBox(grpNames);

            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record((string)dataPointGroup.AccessibleDefaultActionDescription);
            recorder.Record((string)dataPointGroup.AccessibleDescription);
            recorder.Record((string)dataPointGroup.AccessibleName);
            recorder.Record((AccessibleRole)dataPointGroup.AccessibleRole);
            recorder.Record((bool)dataPointGroup.AllowDrop);
            recorder.Record((bool)dataPointGroup.AllowTransparency);
            recorder.Record((AnchorStyles)dataPointGroup.Anchor);
            recorder.Record((AutoScaleMode)dataPointGroup.AutoScaleMode);
            recorder.Record((bool)dataPointGroup.AutoScroll);
            recorder.Record((bool)dataPointGroup.AutoSize);
            recorder.Record((AutoSizeMode)dataPointGroup.AutoSizeMode);
            recorder.Record((AutoValidate)dataPointGroup.AutoValidate);
            recorder.Record((ImageLayout)dataPointGroup.BackgroundImageLayout);
            recorder.Record((int)dataPointGroup.Bottom);
            recorder.Record((bool)dataPointGroup.CanFocus);
            recorder.Record((bool)dataPointGroup.CanSelect);
            recorder.Record((bool)dataPointGroup.Capture);
            recorder.Record((bool)dataPointGroup.CausesValidation);
            recorder.Record((string)dataPointGroup.CompanyName);
            recorder.Record((bool)dataPointGroup.ContainsFocus);
            recorder.Record((bool)dataPointGroup.ControlBox);
            recorder.Record((bool)dataPointGroup.Created);
            recorder.Record((DialogResult)dataPointGroup.DialogResult);
            recorder.Record((bool)dataPointGroup.Disposing);
            recorder.Record((DockStyle)dataPointGroup.Dock);
            recorder.Record((bool)dataPointGroup.Enabled);
            recorder.Record((bool)dataPointGroup.Focused);
            recorder.Record((FormBorderStyle)dataPointGroup.FormBorderStyle);
            recorder.Record((bool)dataPointGroup.HasChildren);
            recorder.Record((int)dataPointGroup.Height);
            recorder.Record((bool)dataPointGroup.HelpButton);
            recorder.Record((ImeMode)dataPointGroup.ImeMode);
            recorder.Record((bool)dataPointGroup.InvokeRequired);
            recorder.Record((bool)dataPointGroup.IsAccessible);
            recorder.Record((bool)dataPointGroup.IsDisposed);
            recorder.Record((bool)dataPointGroup.IsHandleCreated);
            recorder.Record((bool)dataPointGroup.IsMdiChild);
            recorder.Record((bool)dataPointGroup.IsMdiContainer);
            recorder.Record((bool)dataPointGroup.IsMirrored);
            recorder.Record((bool)dataPointGroup.IsRestrictedWindow);
            recorder.Record((bool)dataPointGroup.KeyPreview);
            recorder.Record((int)dataPointGroup.Left);
            recorder.Record((bool)dataPointGroup.MaximizeBox);
            recorder.Record((bool)dataPointGroup.MinimizeBox);
            recorder.Record((bool)dataPointGroup.Modal);
            recorder.Record((string)dataPointGroup.Name);
            recorder.Record((double)dataPointGroup.Opacity);
            recorder.Record((string)dataPointGroup.ProductName);
            recorder.Record((string)dataPointGroup.ProductVersion);
            recorder.Record((bool)dataPointGroup.RecreatingHandle);
            recorder.Record((int)dataPointGroup.Right);
            recorder.Record((RightToLeft)dataPointGroup.RightToLeft);
            recorder.Record((bool)dataPointGroup.RightToLeftLayout);
            recorder.Record((bool)dataPointGroup.ShowIcon);
            recorder.Record((bool)dataPointGroup.ShowInTaskbar);
            recorder.Record((SizeGripStyle)dataPointGroup.SizeGripStyle);
            recorder.Record((FormStartPosition)dataPointGroup.StartPosition);
            recorder.Record((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            recorder.Record((int)dataPointGroup.TabIndex);
            recorder.Record((bool)dataPointGroup.TabStop);
            recorder.Record((string)dataPointGroup.Text);
            recorder.Record((int)dataPointGroup.Top);
            recorder.Record((bool)dataPointGroup.TopLevel);
            recorder.Record((bool)dataPointGroup.TopMost);
            recorder.Record((bool)dataPointGroup.UseWaitCursor);
            recorder.Record((string)dataPointGroup.ViewID);
            recorder.Record((string)dataPointGroup.ViewType);
            recorder.Record((bool)dataPointGroup.Visible);
            recorder.Record((int)dataPointGroup.Width);
            recorder.Record((FormWindowState)dataPointGroup.WindowState);
            recorder.Record<int>(delegate { return (int)grpNames.Capacity; });
            recorder.Record<int>(delegate { return (int)grpNames.Count; });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(grpNames).GetProperty("System.Collections.Generic.ICollection<T>.IsReadOnly"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(grpNames).GetProperty("System.Collections.ICollection.IsSynchronized"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(grpNames).GetProperty("System.Collections.IList.IsFixedSize"); });
            recorder.Record<bool>(delegate { return (bool)ReflectionAccessor.Wrap(grpNames).GetProperty("System.Collections.IList.IsReadOnly"); });
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsNull((string)dataPointGroup.AccessibleDefaultActionDescription);
            Assert.IsFalse((bool)dataPointGroup.AllowDrop);
            Assert.IsFalse((bool)dataPointGroup.AutoScroll);
            Assert.AreEqual(global::System.Windows.Forms.ImageLayout.Tile, (ImageLayout)dataPointGroup.BackgroundImageLayout);
            Assert.IsFalse((bool)dataPointGroup.Capture);
            Assert.IsFalse((bool)dataPointGroup.ContainsFocus);
            Assert.IsFalse((bool)dataPointGroup.Disposing);
            Assert.AreEqual(global::System.Windows.Forms.FormBorderStyle.Fixed3D, (FormBorderStyle)dataPointGroup.FormBorderStyle);
            Assert.AreEqual(global::System.Windows.Forms.ImeMode.NoControl, (ImeMode)dataPointGroup.ImeMode);
            Assert.IsFalse((bool)dataPointGroup.IsHandleCreated);
            Assert.IsFalse((bool)dataPointGroup.IsMirrored);
            Assert.IsFalse((bool)dataPointGroup.MaximizeBox);
            Assert.AreEqual(1.0, (double)dataPointGroup.Opacity, 1E-7);
            Assert.AreEqual(546, (int)dataPointGroup.Right);
            Assert.IsTrue((bool)dataPointGroup.ShowInTaskbar);
            Assert.IsFalse((bool)ReflectionAccessor.Wrap(dataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
            Assert.AreEqual(0, (int)dataPointGroup.Top);
            Assert.IsNull((string)dataPointGroup.ViewID);
            Assert.AreEqual(global::System.Windows.Forms.FormWindowState.Normal, (FormWindowState)dataPointGroup.WindowState);
            Assert.IsFalse((bool)ReflectionAccessor.Wrap(grpNames).GetProperty("System.Collections.ICollection.IsSynchronized"));
            #endregion
        }

        [Test]
        public void TestLoadConfigData_Paint()
        {
            DataPointGroup dataPointGroup = new DataPointGroup();
            Accessor viewAccessor = ReflectionAccessor.Wrap(dataPointGroup);
            viewAccessor.Call("LoadConfigData_Paint", null, null);
        }
    }
}
