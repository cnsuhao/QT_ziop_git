using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.View;
using STEE.ISCS.MVC;
using TrendViewer.Controller;
using System.Data;
using Entity.Trending;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class FormulaListTests
    {
        private FormulaList formulaList;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            ViewManager.GetInstance().RegisterViewFactory(new TrendingViewFactory());
            formulaList = (FormulaList)(ViewManager.GetInstance().GetView(TrendViewConst.FormulaList, "view_ID"));
            FormulaListController ctl = (FormulaListController)(formulaList.getController());
            ctl.initFormulaTable();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/tO/4g", "+SN3aA")]
        public void TestDispose01()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                bool disposing = false;
                Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
                formulaListAccessor.Call("Dispose", disposing);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+b1fNw", "/8mIlQ")]
        public void TestInitializeComponent01()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
                formulaListAccessor.Call("InitializeComponent");

            }
        }

        [Test]
        public void TestfirstdataPointListDataGridView_Click()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
                formulaListAccessor.Call("firstdataPointListDataGridView_Click",null,null);

            }
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+OnTTA", "/N1GIQ")]
        public void TestTranslateCaption01()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                formulaList.TranslateCaption();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/AktkQ", "/KQHqA")]
        public void TestInitializeDataPointListDataGridView01()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
                formulaListAccessor.Call("InitializeDataPointListDataGridView");

            }
        }

        [Test]
        public void TestInitializeDataPointListDataGridView02()
        {
            //Exception
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
                formulaListAccessor.Call("InitializeDataPointListDataGridView");

            }
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ozbCA", "/7KrWQ")]
        public void TestPopulateDataPointListDataGridView01()
        {
            using (FormulaList formulaList = FormulaListFactory.CreateFormulaList01())
            {
                int mode = 1;
                formulaList.PopulateDataPointListDataGridView(mode);
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+A+bxw", "/VXnsg")]
        public void TestDataPointFormulaViewer_Load01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("DataPointFormulaViewer_Load", sender, e);

        }

        [Test]
        public void TestDataPointFormulaViewer_Load02()
        {
            //Exception
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("DataPointFormulaViewer_Load", sender, e);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/ewIXA", "+EvHdw")]
        public void TestdataPointListDataGridView_CellDoubleClick01()
        {
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            DataGridView formulaListDataGridView = (DataGridView)(formulaListAccessor.GetField("formulaListDataGridView"));
            FormulaListController ctl = (FormulaListController)(formulaList.getController());
            EtyFormula formula = new EtyFormula();
            formula.DPEquation = "::a::";
            ctl.AddFormulaToList(formula);

           
            object sender = null;
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(0, -1);
            formulaListAccessor.Call("dataPointListDataGridView_CellDoubleClick", sender, e);
            e = new DataGridViewCellEventArgs(7,0);
            formulaListAccessor.Call("dataPointListDataGridView_CellDoubleClick", sender, e);
            e = new DataGridViewCellEventArgs(6, 0);
            formulaListAccessor.Call("dataPointListDataGridView_CellDoubleClick", sender, e);
       
        }

        [Test]
        public void TestdataPointListDataGridView_CellDoubleClick02()
        {
            //exception
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            DataGridView formulaListDataGridView = (DataGridView)(formulaListAccessor.GetField("formulaListDataGridView"));
            FormulaListController ctl = (FormulaListController)(formulaList.getController());
            EtyFormula formula = new EtyFormula();
            formula.DPEquation = "::a::";
            ctl.AddFormulaToList(formula);


            object sender = null;
            DataGridViewCellEventArgs e = new DataGridViewCellEventArgs(7,0);
            formulaListAccessor.Call("dataPointListDataGridView_CellDoubleClick", sender, e);
     
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+0qlNA", "/wA3vg")]
        public void TestdataPointListDataGridView_Sorted01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("dataPointListDataGridView_Sorted", sender, e);
        
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+m9SWQ", "++S+cQ")]
        public void TestDataPointViewer_Paint01()
        {
            object sender = null;
            PaintEventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("DataPointViewer_Paint", sender, e);
     
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Ghtdw", "/t6zSA")]
        public void TestlastdataPointListDataGridView_Click01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("lastdataPointListDataGridView_Click", sender, e);
     
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+eBg2Q", "/dBUUg")]
        public void TestnextdataPointListDataGridView_Click01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)formulaListAccessor.GetField("pageNumDataPointListDataGridView");
            ud = new System.Windows.Forms.NumericUpDown();
            ud.Minimum = 1;
            ud.Maximum = 3;
            ud.Value = 2;
            formulaListAccessor.SetField("pageNumDataPointListDataGridView", ud);
            
            formulaListAccessor.Call("nextdataPointListDataGridView_Click", sender, e);
      
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/A2bVg", "+bWrEg")]
        public void TestpageNumdataPointListDataGridView_ValueChanged01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            formulaListAccessor.Call("pageNumdataPointListDataGridView_ValueChanged", sender, e);
    
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ozbCA", "/m+bww")]
        public void TestPopulateDataPointListDataGridView02()
        {
            //ctl.m_FormulaTable has data:  DATA_PT_LBL_NAME (>100)
            //DATA_PT_EQUATION (>100)
            //DATA_PT_ENABLED ="Y"
            //DATA_PT_LBL_ENABLED = "Y"

            //ctl.m_FormulaTable has data:  DATA_PT_LBL_NAME (<100)
            //DATA_PT_EQUATION (<100)
            //DATA_PT_ENABLED ="N"
            //DATA_PT_LBL_ENABLED = "N"

            FormulaListController ctl = (FormulaListController)(formulaList.getController());
            Accessor ctlAccessor = ReflectionAccessor.Wrap(ctl);
            DataTable table = (DataTable)ctlAccessor.GetField("m_FormulaTable");
            DataRow row1 = table.NewRow();
            row1["DATA_PT_LBL_NAME"] = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
            row1["DATA_PT_EQUATION"] = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890";
            row1["DATA_PT_ENABLED"] = "Y";
            row1["DATA_PT_LBL_ENABLED"] = "Y";
            table.Rows.Add(row1);
            DataRow row2 = table.NewRow();
            row2["DATA_PT_LBL_NAME"] = "12345678901";
            row2["DATA_PT_EQUATION"] = "123456789012345";
            row2["DATA_PT_ENABLED"] = "N";
            row2["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row2);

            ctlAccessor.SetField("m_FormulaTable", table);
            
            int mode = 0;
            formulaList.PopulateDataPointListDataGridView(mode);

            DataRow row3 = table.NewRow();
            row3["DATA_PT_LBL_NAME"] = "12345678901";
            row3["DATA_PT_EQUATION"] = "123456789012345";
            row3["DATA_PT_ENABLED"] = "N";
            row3["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row3);
            DataRow row4 = table.NewRow();
            row4["DATA_PT_LBL_NAME"] = "12345678901";
            row4["DATA_PT_EQUATION"] = "123456789012345";
            row4["DATA_PT_ENABLED"] = "N";
            row4["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row4);
            DataRow row5 = table.NewRow();
            row5["DATA_PT_LBL_NAME"] = "12345678901";
            row5["DATA_PT_EQUATION"] = "123456789012345";
            row5["DATA_PT_ENABLED"] = "N";
            row5["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row5);
            ctlAccessor.SetField("m_FormulaTable", table);
            formulaList.PopulateDataPointListDataGridView(1);

            DataRow row6 = table.NewRow();
            row6["DATA_PT_LBL_NAME"] = "12345678901";
            row6["DATA_PT_EQUATION"] = "123456789012345";
            row6["DATA_PT_ENABLED"] = "N";
            row6["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row6);
            ctlAccessor.SetField("m_FormulaTable", table);
            formulaList.PopulateDataPointListDataGridView(1);

            DataRow row7 = table.NewRow();
            row7["DATA_PT_LBL_NAME"] = "12345678901";
            row7["DATA_PT_EQUATION"] = "123456789012345";
            row7["DATA_PT_ENABLED"] = "N";
            row7["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row7);
            ctlAccessor.SetField("m_FormulaTable", table);
            formulaList.PopulateDataPointListDataGridView(1);

            DataRow row8 = table.NewRow();
            row8["DATA_PT_LBL_NAME"] = "12345678901";
            row8["DATA_PT_EQUATION"] = "123456789012345";
            row8["DATA_PT_ENABLED"] = "N";
            row8["DATA_PT_LBL_ENABLED"] = "N";
            table.Rows.Add(row8);
            // totalRecord % RECORDSIZE = 0

            ctlAccessor.SetField("m_FormulaTable", table);
            formulaList.PopulateDataPointListDataGridView(1);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+zcLjw", "/SSiSg")]
        public void TestprevdataPointListDataGridView_Click01()
        {
            object sender = null;
            EventArgs e = null;
            Accessor formulaListAccessor = ReflectionAccessor.Wrap(formulaList);
            System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)formulaListAccessor.GetField("pageNumDataPointListDataGridView");
            ud = new System.Windows.Forms.NumericUpDown();
            ud.Minimum = 1;
            ud.Maximum = 3;
            ud.Value = 2;
            formulaListAccessor.SetField("pageNumDataPointListDataGridView", ud);
            
            formulaListAccessor.Call("prevdataPointListDataGridView_Click", sender, e);
         
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+RxSzA", "+uiCHg")]
        public void TestAttachListener01()
        {
            IController ctl = new FormulaListController(); /* TODO: Implement me */ ;
            formulaList.AttachListener(ctl);
        }

    }
}
