using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.View;
using TrendViewer.Controller;
using System.Collections.Generic;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class HistDataPointGroupTests
    {
        private HistDataPointGroup histDataPointGroup;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            histDataPointGroup = new HistDataPointGroup();
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Qw6RQ", "/3McAg")]
        public void TestInitializeComponent01()
        {
            using (HistDataPointGroup histDataPointGroup = HistDataPointGroupFactory.CreateHistDataPointGroup01())
            {
                Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
                histDataPointGroupAccessor.Call("InitializeComponent");

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/OO4Gw", "/hyi6A")]
        public void TestHistDataPointGroupConstructor01()
        {
            HistDataPointGroup histDataPointGroup = new HistDataPointGroup();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/5VC6g", "+f30iA")]
        public void TestSetFormType01()
        {
            using (HistDataPointGroup histDataPointGroup = HistDataPointGroupFactory.CreateHistDataPointGroup01())
            {
                FormType type = FormType.Save;
                histDataPointGroup.SetFormType(type);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/3G4sA", "+tAq7Q")]
        public void TestTranslateCaption01()
        {
            using (HistDataPointGroup histDataPointGroup = HistDataPointGroupFactory.CreateHistDataPointGroup01())
            {
                FormType type = FormType.Save;
                histDataPointGroup.SetFormType(type);
                histDataPointGroup.TranslateCaption();
                type = FormType.Load;
                histDataPointGroup.SetFormType(type);
                histDataPointGroup.TranslateCaption();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/2PS2A", "/TvXBw")]
        public void TestSetCurrentGrpName01()
        {
            using (HistDataPointGroup histDataPointGroup = HistDataPointGroupFactory.CreateHistDataPointGroup01())
            {
                string grpName = string.Empty;
                histDataPointGroup.SetCurrentGrpName(grpName);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+qF5pQ", "/v8hLQ")]
        public void TestGetConfigName01()
        {
            using (HistDataPointGroup histDataPointGroup = HistDataPointGroupFactory.CreateHistDataPointGroup01())
            {
                string str = histDataPointGroup.GetConfigName();

            }
        }

        [Test]
        public void TestAttachListener()
        {
            STEE.ISCS.MVC.IController ctl = new HistDataPointGroupController();
            histDataPointGroup.SetFormType(FormType.Load);
            histDataPointGroup.AttachListener(ctl);
            histDataPointGroup.SetFormType(FormType.Save);
            histDataPointGroup.AttachListener(ctl);
        }

        [Test]
        public void TestFillConfigNameBox()
        {
            List<string> grpNames = new List<string>();
            grpNames.Add("a");
            grpNames.Add("b");
            histDataPointGroup.SetFormType(FormType.Load);
            histDataPointGroup.FillConfigNameBox(grpNames);
            histDataPointGroup.SetFormType(FormType.Save);
            histDataPointGroup.FillConfigNameBox(grpNames);
        }

        [Test]
        public void TestcancelCmd_Click()
        {
            Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
            histDataPointGroupAccessor.Call("cancelCmd_Click", null, null);
        }

        [Test]
        public void TestokCmd_Click01()
        {
            Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
            histDataPointGroupAccessor.Call("okCmd_Click", null, null);

            //(configNameBox.Text.Trim() != ""
            ComboBox cb = (ComboBox)histDataPointGroupAccessor.GetField("configNameBox");
            cb.Text = "notEmpty";
            histDataPointGroupAccessor.SetField("configNameBox", cb);
            histDataPointGroupAccessor.Call("okCmd_Click", null, null);
        }

        
        [Test]
        public void TestokCmd_Click02()
        {
            //configNameBox.Text.Trim() == ""

            //Exception caught.       
            Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
            ComboBox cb = (ComboBox)histDataPointGroupAccessor.GetField("configNameBox");
            cb.Text = "";
            histDataPointGroupAccessor.SetField("configNameBox", cb);
            histDataPointGroupAccessor.Call("okCmd_Click", null, null);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+atO9w", "+rGKEA")]
        public void TestDispose01()
        {
            bool disposing = true;
            System.ComponentModel.IContainer con = new System.ComponentModel.Container();
            Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
            histDataPointGroupAccessor.SetField("components", con);
            histDataPointGroupAccessor.Call("Dispose", disposing);

        }

        [Test]
        public void TestLoadConfigHistoryData_Paint()
        {
            Accessor histDataPointGroupAccessor = ReflectionAccessor.Wrap(histDataPointGroup);
            histDataPointGroupAccessor.Call("LoadConfigHistoryData_Paint", null, null);
        }
    }
}
