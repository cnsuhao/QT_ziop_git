using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;
using TrendViewer.DotTest.Factories.View;
using System.Collections.Generic;
using TrendViewer.Controller;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class MarkerGroupTests
    {
        private MarkerGroup markerGroup;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            markerGroup = new MarkerGroup();
        }

//         [TestCaseUnverified("Test case not verified")]
//         [TestCaseAutogenerated]
//         [TestAuthor("user")]
//         [Test]
//         [HashCode("+u+9RQ", "+BoTeA")]
//         public void TestMarkerGroupConstructor01()
//         {
//             MarkerGroup markerGroup = new MarkerGroup();
// 
//         }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/pmt0g", "/ofpfw")]
        public void TestSetFormType01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                FormType type = FormType.Edit;
                markerGroup.SetFormType(type);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+sWZNA", "/XY0dw")]
        public void TestTranslateCaption01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                markerGroup.SetFormType(FormType.Load);
                markerGroup.TranslateCaption();
                markerGroup.SetFormType(FormType.Save);
                markerGroup.TranslateCaption();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Bv8pQ", "+doJRQ")]
        public void TestGetConfigName01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                string str = markerGroup.GetConfigName();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+bmEWw", "/Bm5YQ")]
        public void TestSetCurrentGrpName01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                string grpName = string.Empty;
                markerGroup.SetCurrentGrpName(grpName);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/VTWaw", "/JOUNA")]
        public void TestDispose01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                bool disposing = true;
                Accessor markerGroupAccessor = ReflectionAccessor.Wrap(markerGroup);
                markerGroupAccessor.SetField("components", new System.ComponentModel.Container());
                markerGroupAccessor.Call("Dispose", disposing);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/BBaQQ", "/qcCvw")]
        public void TestInitializeComponent01()
        {
            using (MarkerGroup markerGroup = MarkerGroupFactory.CreateMarkerGroup01())
            {
                Accessor markerGroupAccessor = ReflectionAccessor.Wrap(markerGroup);
                markerGroupAccessor.Call("InitializeComponent");

            }
        }

        [Test]
        public void TestcancelCmd_Click()
        {
            Accessor markerGroupAccessor = ReflectionAccessor.Wrap(markerGroup);
            markerGroupAccessor.Call("cancelCmd_Click", null, null);
        }

        [Test]
        public void TestAttachListener()
        {
            STEE.ISCS.MVC.IController controller = new MarkerGroupController();
            markerGroup.SetFormType(FormType.Save);
            markerGroup.AttachListener(controller);
            markerGroup.SetFormType(FormType.Load);
            markerGroup.AttachListener(controller);
        }

        [Test]
        public void TestFillConfigNameBox()
        {
            List<string> grpNames = new List<string>();
            grpNames.Add("a");
            grpNames.Add("b");

            markerGroup.SetFormType(FormType.Save);
            markerGroup.FillConfigNameBox(grpNames);
            markerGroup.SetFormType(FormType.Load);
            markerGroup.FillConfigNameBox(grpNames);
        }

        [Test]
        public void TestLoadConfigMarker_Paint()
        {
            Accessor viewAccessor = ReflectionAccessor.Wrap(markerGroup);
            viewAccessor.Call("LoadConfigMarker_Paint", null, null);
        }

    }
}
