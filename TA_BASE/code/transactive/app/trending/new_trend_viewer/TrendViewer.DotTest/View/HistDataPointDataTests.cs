using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.View;
using Entity.Trending;
using TrendViewer.Controller;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class HistDataPointDataTests
    {
        private HistDataPointData histDataPointData;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            histDataPointData = new HistDataPointData();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+QAacg", "/sVzqA")]
        public void TestSetFormType01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                FormType type = FormType.Load;
                histDataPointData.SetFormType(type);
            }
        }

//         [TestCaseUnverified("Test case not verified")]
//         [TestCaseAutogenerated]
//         [TestAuthor("user")]
//         [Test]
//         [HashCode("/nY/WQ", "+pAiEA")]
//         public void TestHistDataPointDataConstructor01()
//         {
//             HistDataPointData histDataPointData = new HistDataPointData();
//         }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+3aKOg", "+zxP6g")]
        public void TestTranslateCaption01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                histDataPointData.SetFormType(FormType.Add);
                histDataPointData.TranslateCaption();
                histDataPointData.SetFormType(FormType.Edit);
                histDataPointData.TranslateCaption();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+dyxAA", "+MnHDA")]
        public void TestGetHistDataPointName01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                string str = histDataPointData.GetHistDataPointName();
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/TiNIQ", "/5oQpg")]
        public void TestGetHistDPLblName01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                string str = histDataPointData.GetHistDPLblName();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+M3vAA", "+Gfeng")]
        public void TestGetNewHistDataPoint01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                EtyHistDataPoint etyHistDataPoint = histDataPointData.GetNewHistDataPoint();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+SDPJg", "/Yb8XQ")]
        public void TestGetStartDate01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                DateTime dateTime = histDataPointData.GetStartDate();
 
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/wfC/w", "/TK1KQ")]
        public void TestGetEndDate01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                DateTime dateTime = histDataPointData.GetEndDate();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/gcKIg", "+SdoVQ")]
        public void TestDispose01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                bool disposing = false;
                Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
                histDataPointDataAccessor.SetField("components", new System.ComponentModel.Container());
                histDataPointDataAccessor.Call("Dispose", disposing);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/LUsdg", "/NvJKg")]
        public void TestInitializeComponent01()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
 
            }
        }

        [Test]
        public void TestUpdateHistDPNameAndLabel()
        {
            using (HistDataPointData histDataPointData = HistDataPointDataFactory.CreateHistDataPointData01())
            {
                EtyHistDataPoint dp = new EtyHistDataPoint();
                histDataPointData.UpdateHistDPNameAndLabel(dp);

            }

        }

        [Test]
        public void TestAttachListener()
        {
            STEE.ISCS.MVC.IController ctl = new HistDataPointDataController();
            histDataPointData.SetFormType(FormType.Add);
            histDataPointData.AttachListener(ctl);
            histDataPointData.SetFormType(FormType.Edit);
            histDataPointData.AttachListener(ctl);
        }

        [Test]
        public void TestDisplay()
        {
            histDataPointData.SetFormType(FormType.Edit);
            EtyHistDataPoint dp = new EtyHistDataPoint();
            dp.DPColor = "-32704";
            histDataPointData.Display(dp);
        }

        [Test]
        public void TestcolorCmd_Click01()
        {
            Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
            System.Windows.Forms.ColorDialog colorDialog1 = (System.Windows.Forms.ColorDialog)histDataPointDataAccessor.GetField("colorDialog1");
            colorDialog1 = new System.Windows.Forms.ColorDialog();
            histDataPointDataAccessor.Call("colorCmd_Click", null, null);
        }

        [Test]
        public void TestcolorCmd_Click02()
        {
            //Exception
            Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
            histDataPointDataAccessor.SetField("colorDialog1", null);
            histDataPointDataAccessor.Call("colorCmd_Click", null, null);
        }

        [Test]
        public void TestcancelCmd_Click()
        {
            Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
            histDataPointDataAccessor.Call("cancelCmd_Click", null, null);
        }

        [Test]
        public void TestAddDataPoint_Paint()
        {
            Accessor histDataPointDataAccessor = ReflectionAccessor.Wrap(histDataPointData);
            histDataPointDataAccessor.Call("AddDataPoint_Paint", null, null);
        }
    }
}
