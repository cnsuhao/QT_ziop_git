using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;
using TrendViewer.DotTest.Factories.View;
using TrendingChartControl;
using TrendViewer.Controller;
using System.Collections.Generic;
using Entity.Trending;
using STEE.ISCS.MulLanguage;
using DAO.Trending;
using STEE.ISCS.MVC;
using TrendViewer.Common;
using TrendViewer.Model;
using System.Drawing;
using TrendingHelper;
using DAO.Trending.Common;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class TrendViewTests
    {
        private TrendView trendView;
        Accessor viewAccessor;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            DBConnectionStrings.GetInstance().AddConnectionString(TestConst.CONNECTION_STR);
            SimpleDatabase.GetInstance().OpenConnection();
            ViewManager.GetInstance().RegisterViewFactory(new TrendingViewFactory());
            IView view = ViewManager.GetInstance().GetView(TrendViewConst.TrendView,TestConst.TEST_VIEW_ID);  //viewID is "" 
            trendView = (TrendView)view;
            ConfigureFileHelper.GetInstance().init();
            viewAccessor = ReflectionAccessor.Wrap(trendView);
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+hLvLA", "+vE+yg")]
        public void TestTranslateCaption01()
        {
            viewAccessor.SetField("m_realTimeStartFlag", true);
            trendView.TranslateCaption();
            viewAccessor.SetField("m_realTimeStartFlag", false);
            trendView.TranslateCaption();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/gmCyA", "+Wq5gQ")]
        public void TestInitializeIntervalTypBox01()
        {
            trendView.InitializeIntervalTypBox();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/EYqew", "+xU7wA")]
        public void TestInitializeFrameTypeBox01()
        {
            trendView.InitializeFrameTypeBox();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+H5QWQ", "/MFnIw")]
        public void TestInitializeTrendViewer01()
        {
            ConfigureFileHelper.GetInstance().OPCServerName = "TransActiveDataSource";
            //todo  opcSrv1Name.Trim() != ""
            //!OPCServerProxy.GetInstance().IsOPCServerConnected()
            //false == DBConnection.getInstance().OpenConnection(localConnectionString);
            trendView.InitializeTrendViewer();
        }

        [Test]
        public void TestInitializeTrendViewer02()
        {
            //stub: bConnected = SimpleDatabase.GetInstance().OpenConnection(); false:
            trendView.InitializeTrendViewer();

            //stub: exception caught when call LocationKeyHelper.GetInstance().init()
           
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/rrjHw", "+yDAlQ")]
        public void TestSetLineThickness01()
        {
            int thickNess = -1;
            trendView.SetLineThickness(thickNess);
        }

        [Test]
        public void TestAttachListener()
        {
            TrendViewController ctl = new TrendViewController();
            trendView.AttachListener(ctl);
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+LfCIg", "/tantA")]
        public void TestCaptureScreen01()
        {
            viewAccessor.Call("CaptureScreen");
        }

        [Test]
        public void TestCaptureScreen101()
        {
            viewAccessor.Call("CaptureScreen1",null,null);
        }

        [Test]
        public void TestprintButton_Click()
        {
            viewAccessor.Call("printButton_Click", null, null);
        }

        [Test]
        public void TestInitializeChartForRealTime01()
        {
            List<EtyDataPoint> dpList =new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);

            List<EtyFormula> formulaList = new List<EtyFormula>();
            EtyFormula formula = new EtyFormula();
            formula.DPColor = "-32704";
            formula.DPEnabled=true;
            formula.DPLblName = "formulaLblName";
            formula.DPType = LineType.Line;
            formulaList.Add(formula);

            trendView.InitializeChartForRealTime(dpList, formulaList);
        }

        [Test]
        public void TestInitializeChartForRealTime02()
        {
            //exception caught
            trendView.InitializeChartForRealTime(null, null);
        }

        [Test]
        public void TestDrawDataMarker01()
        {
            List<EtyMarker> list = new List<EtyMarker>();
            EtyMarker marker = new EtyMarker();
            marker.MarkerName = TestConst.MARKER_NAME;
            marker.MarkerValue = 1;
            marker.MarkerWidth = 2;
            marker.MarkerEnabled = true;
            marker.MarkerBColor = "-32704";
            marker.MarkerFColor = "-32704";
            list.Add(marker);

            viewAccessor.Call("DrawDataMarker", list);
        }

        [Test]
        public void TestDrawDataMarker02()
        {
            List<EtyMarker> list = new List<EtyMarker>();
            EtyMarker marker = new EtyMarker();
            marker.MarkerName = TestConst.MARKER_NAME;
            marker.MarkerValue = 1;
            marker.MarkerWidth = 2;
            marker.MarkerEnabled = true;
            marker.MarkerBColor = "-32704";
            marker.MarkerFColor = "-32704";
            list.Add(marker);

            //Exception caught
            viewAccessor.Call("DrawDataMarker", list);
        }

        [Test]
        public void TestAddDPToOPCServer01()
        {
            List<EtyDataPoint> dpList =new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);
            viewAccessor.Call("AddDPToOPCServer", dpList);
        }

        [Test]
        public void TestAddDPToOPCServer02()
        {
            List<EtyDataPoint> dpList = new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);

            //Excetpion caught
            viewAccessor.Call("AddDPToOPCServer", dpList);
        }

        [Test]
        public void TestAddSeriesForRealTimeChart()
        {
            //excetpion caught
            viewAccessor.Call("AddSeriesForRealTimeChart", null, null);
        }

        [Test]
        public void TestStartRealTimeOrMixedModeCharting01()
        {
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled=true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;
 
            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP,fromTime,toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            MarkerListModel markerListModel = new MarkerListModel();
            List<EtyMarker> markerList = markerListModel.GetMarkerListByGrp(TestConst.MARK_GROUP_NAME);

            FormulaListModel formulaListModel = new FormulaListModel();
            List<EtyFormula> formulaList = formulaListModel.GetFormulaListByGrp(TestConst.FORMULA_GROUP_NAME);

            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);
        }

        [Test]
        public void TestStartRealTimeOrMixedModeCharting02()
        { //stub:IsOPCServerConnected = true
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            MarkerListModel markerListModel = new MarkerListModel();
            List<EtyMarker> markerList = markerListModel.GetMarkerListByGrp(TestConst.MARK_GROUP_NAME);

            FormulaListModel formulaListModel = new FormulaListModel();
            List<EtyFormula> formulaList = formulaListModel.GetFormulaListByGrp(TestConst.FORMULA_GROUP_NAME);

            System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)viewAccessor.GetField("mixedModeCb");
            cb.Checked = false;
            viewAccessor.SetField("mixedModeCb", cb);

            //stub: OPCServerProxy.GetInstance().IsOPCServerConnected() == true:
            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);

            //mixedModeCb.Checked==true:
            cb.Checked = true;
            viewAccessor.SetField("mixedModeCb", cb);
            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);
        }

        [Test]
        public void TestStartRealTimeOrMixedModeCharting03()
        {
            //stub:IsOPCServerConnected = false
            //RemoveAllOPCItem throw COMException
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            MarkerListModel markerListModel = new MarkerListModel();
            List<EtyMarker> markerList = markerListModel.GetMarkerListByGrp(TestConst.MARK_GROUP_NAME);

            FormulaListModel formulaListModel = new FormulaListModel();
            List<EtyFormula> formulaList = formulaListModel.GetFormulaListByGrp(TestConst.FORMULA_GROUP_NAME);

           
            //stub: OPCServerProxy.GetInstance().IsOPCServerConnected()==true  //OPC server connected
            // OPCServerProxy.GetInstance().RemoveAllOPCItem() throw System.Runtime.InteropServices.COMException
            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);
        }

        [Test]
        public void TestStartRealTimeOrMixedModeCharting04()
        {
            //stub:IsOPCServerConnected = false
            ////RemoveAllOPCItem throw Exception
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            MarkerListModel markerListModel = new MarkerListModel();
            List<EtyMarker> markerList = markerListModel.GetMarkerListByGrp(TestConst.MARK_GROUP_NAME);

            FormulaListModel formulaListModel = new FormulaListModel();
            List<EtyFormula> formulaList = formulaListModel.GetFormulaListByGrp(TestConst.FORMULA_GROUP_NAME);

           
            //stub: OPCServerProxy.GetInstance().IsOPCServerConnected()==true  //OPC server connected
            // OPCServerProxy.GetInstance().RemoveAllOPCItem() throw System.Exception
            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);
        }

        [Test]
        public void TestStartRealTimeOrMixedModeCharting05()
        {
            //RemoveAllOPCItem do nothing
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            MarkerListModel markerListModel = new MarkerListModel();
            List<EtyMarker> markerList = markerListModel.GetMarkerListByGrp(TestConst.MARK_GROUP_NAME);

            FormulaListModel formulaListModel = new FormulaListModel();
            List<EtyFormula> formulaList = formulaListModel.GetFormulaListByGrp(TestConst.FORMULA_GROUP_NAME);

            //stub: IsOPCServerConnected == ture
            //stub: OPCServerProxy.GetInstance().RemoveAllOPCItem(); do nothing
            //stub: trendingChartCtl1.ClearAllSeriesAndMarkers throw excetpion
            trendView.StartRealTimeOrMixedModeCharting(dpList, formulaList, markerList, histDPLogMap);
        }

        [Test]
        public void TestDrawHistoryChart()
        {
                   
            DataPointListModel dataPointListModel = new DataPointListModel();
            List<EtyDataPoint> dpList = dataPointListModel.GetDPListByGrp(TestConst.GROUP_NAME);

            TrendViewModel trendViewModel = new TrendViewModel();
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;
            histDP.DPColor = "-32704";

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            viewAccessor.Call("DrawHistoryChart", DrawHistoryMode.Mixed, histDPLogMap);

            logList = new List<EtyDataLogDPLogTrend>();
            EtyDataLogDPLogTrend log = new EtyDataLogDPLogTrend();
            logList.Add(log);
            histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);
            viewAccessor.Call("DrawHistoryChart", DrawHistoryMode.Mixed, histDPLogMap);

            viewAccessor.Call("DrawHistoryChart", DrawHistoryMode.NotMixed, histDPLogMap);

        }

        [Test]
        public void TestUpdateChartForRealTimeOrMixedMode01()
        {
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;
            TrendViewModel trendViewModel = new TrendViewModel();

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            //stub:
            //OPCServerProxy.GetInstance().IsOPCServerConnected() == true
            
            //make sure series has contents:
            List<EtyDataPoint> dpList = new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);
            List<EtyFormula> formulaList = new List<EtyFormula>();
            EtyFormula formula = new EtyFormula();
            formula.DPColor = "-32704";
            formula.DPEnabled = true;
            formula.DPLblName = "formulaLblName";
            formula.DPType = LineType.Line;
            formulaList.Add(formula);
            trendView.InitializeChartForRealTime(dpList, formulaList);

            // (mixedModeCb.Checked && m_startDateRealTime.Date != DateTime.Now.Date)
            CheckBox cb = (CheckBox)viewAccessor.GetField("mixedModeCb");
            cb.Checked = true;
            viewAccessor.SetField("mixedModeCb", cb);
            DateTime dt = new DateTime(2011, 1, 1);
            viewAccessor.SetField("m_startDateRealTime", dt);
            trendView.UpdateChartForRealTimeOrMixedMode(histDPLogMap);
        }

        [Test]
        public void TestUpdateChartForRealTimeOrMixedMode02()
        {
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;
            TrendViewModel trendViewModel = new TrendViewModel();

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            //stub:
            //OPCServerProxy.GetInstance().IsOPCServerConnected() == true

            //make sure series has contents:
            List<EtyDataPoint> dpList = new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);
            List<EtyFormula> formulaList = new List<EtyFormula>();
            EtyFormula formula = new EtyFormula();
            formula.DPColor = "-32704";
            formula.DPEnabled = true;
            formula.DPLblName = "formulaLblName";
            formula.DPType = LineType.Line;
            formulaList.Add(formula);
            trendView.InitializeChartForRealTime(dpList, formulaList);

            // (mixedModeCb.Checked && m_startDateRealTime.Date != DateTime.Now.Date)
            CheckBox cb = (CheckBox)viewAccessor.GetField("mixedModeCb");
            cb.Checked = true;
            viewAccessor.SetField("mixedModeCb", cb);
            DateTime dt = new DateTime(2011, 1, 1);
            viewAccessor.SetField("m_startDateRealTime", dt);
            trendView.UpdateChartForRealTimeOrMixedMode(histDPLogMap);
        }
        [Test]
        public void TestUpdateChartForRealTimeOrMixedMode03()
        {
            //same as TestUpdateChartForRealTimeOrMixedMode01,but Eval(tempString) throw exception
            DateTime fromTime = new DateTime(2013, 1, 10);
            DateTime toTime = new DateTime(2013, 1, 12);

            EtyHistDataPoint histDP = new EtyHistDataPoint();
            histDP.DPName = TestConst.HIST_DP_NAME;
            histDP.DPServer = TestConst.SERVER;
            histDP.DPStartDateTime = fromTime;
            histDP.DPEndDateTime = toTime;
            histDP.DPEnabled = true;
            histDP.DPHost = TestConst.HOST;
            histDP.DPType = LineType.Line;
            TrendViewModel trendViewModel = new TrendViewModel();

            List<EtyDataLogDPLogTrend> logList = trendViewModel.GetHistDPLogList(histDP, fromTime, toTime);
            Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>> histDPLogMap = new Dictionary<EtyHistDataPoint, List<EtyDataLogDPLogTrend>>();
            histDPLogMap.Add(histDP, logList);

            //stub:
            //OPCServerProxy.GetInstance().IsOPCServerConnected() == true

            //make sure series has contents:
            List<EtyDataPoint> dpList = new List<EtyDataPoint>();
            EtyDataPoint etyDP = new EtyDataPoint();
            etyDP.DPColor = "-32704";
            etyDP.DPName = TestConst.DP_NAME;
            etyDP.DPEnabled = true;
            etyDP.DPServer = "TransActiveDataSource";
            etyDP.DPType = LineType.Line;
            etyDP.DPVisible = true;
            etyDP.DPHost = "127.0.0.1";
            dpList.Add(etyDP);
            List<EtyFormula> formulaList = new List<EtyFormula>();
            EtyFormula formula = new EtyFormula();
            formula.DPColor = "-32704";
            formula.DPEnabled = true;
            formula.DPLblName = "formulaLblName";
            formula.DPType = LineType.Line;
            formulaList.Add(formula);
            trendView.InitializeChartForRealTime(dpList, formulaList);

            // (mixedModeCb.Checked && m_startDateRealTime.Date != DateTime.Now.Date)
            CheckBox cb = (CheckBox)viewAccessor.GetField("mixedModeCb");
            cb.Checked = true;
            viewAccessor.SetField("mixedModeCb", cb);
            DateTime dt = new DateTime(2011, 1, 1);
            viewAccessor.SetField("m_startDateRealTime", dt);
            trendView.UpdateChartForRealTimeOrMixedMode(histDPLogMap);
        }

        [Test]
        public void TestUpdateChartForRealTimeOrMixedMode04()
        {
            //throw exception: trendingChartCtl1.GetSeriesNames
            trendView.UpdateChartForRealTimeOrMixedMode(null);
        }

        [Test]
        public void TestframeTypeBox_SelectedIndexChanged()
        {
            //frameTypeBox.Text.Trim() == StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Hour, LanguageHelper.TrendViewer_TrendView_Hour_EN)

            ComboBox cb= (ComboBox)viewAccessor.GetField("frameTypeBox");
            cb.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Hour, LanguageHelper.TrendViewer_TrendView_Hour_EN);
            viewAccessor.SetField("frameTypeBox", cb);
            viewAccessor.Call("frameTypeBox_SelectedIndexChanged", null, null);
           
            //frameTypeBox.Text.Trim() == StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Day, LanguageHelper.TrendViewer_TrendView_Day_EN)
            cb.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Hour, LanguageHelper.TrendViewer_TrendView_Hour_EN);
            viewAccessor.SetField("frameTypeBox", cb);
            viewAccessor.Call("frameTypeBox_SelectedIndexChanged", null, null);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/C1N8g", "+tnA6Q")]
        public void TestGetLatestDataPointValue01()
        {
            //todo in stub
            //OPCServerProxy.GetInstance().GetDataItemValue(dpName)== null
            string dpName = TestConst.DP_NAME;
            double dpValue = double.MaxValue;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }

        [Test]
        public void TestStartHistoryModeCharting()
        {
            //exception
            trendView.StartHistoryModeCharting(null, null, DateTime.Now, DateTime.Now);
        }
        [Test]
        public void TestGetLatestDataPointValue02()
        {
            //todo in stub
            //dpValueObj != null && dpValueObj.ToString() != "BLANK" && dpValueObj.ToString() != "NOTCONNECTED"
            // isNumeric(dpValueObj)
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }
        [Test]
        public void TestGetLatestDataPointValue03()
        {
            //todo in stub
            //dpValueObj != null && dpValueObj.ToString() != "BLANK" && dpValueObj.ToString() != "NOTCONNECTED"
            // TrendingHelper.isBoolean(dpValueObj.ToString() false
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }
        [Test]
        public void TestGetLatestDataPointValue07()
        {
            //todo in stub
            //dpValueObj != null && dpValueObj.ToString() != "BLANK" && dpValueObj.ToString() != "NOTCONNECTED"
            // TrendingHelper.isBoolean(dpValueObj.ToString() true
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }

        [Test]
        public void TestGetLatestDataPointValue04()
        {
            //todo in stub
            //dpValueObj != null && dpValueObj.ToString() != "BLANK" && dpValueObj.ToString() != "NOTCONNECTED"
            // dpValueObj is not boolean and not numeric
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }

        
        [Test]
        public void TestGetLatestDataPointValue05()
        {
            //todo in stub
            //dpValueObj != null && dpValueObj.ToString() == "NOTCONNECTED"
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }

        [Test]
        public void TestGetLatestDataPointValue06()
        {
            //todo in stub
            //Exception caught
            string dpName = TestConst.DP_NAME;
            double dpValue = 1;
            bool b = trendView.GetLatestDataPointValue(dpName, ref dpValue);

        }

        [Test]
        public void TestTrendViewer_FormClosing()
        {
            viewAccessor.Call("TrendViewer_FormClosing", null, null);
        }


        [Test]
        public void TestRealTime3DCb_CheckedChanged01()
        {
            viewAccessor.Call("RealTime3DCb_CheckedChanged", null, null);
        }

        [Test]
        public void TestRealTime3DCb_CheckedChanged02()
        {
            //stub: exception caught
            viewAccessor.Call("RealTime3DCb_CheckedChanged", null, null);
        }

        [Test]
        public void TestHistory3DCb_CheckedChanged01()
        {
            viewAccessor.Call("History3DCb_CheckedChanged", null, null);
        }

        [Test]
        public void TestHistory3DCb_CheckedChanged02()
        {
            //stub: excepiton caught
            viewAccessor.Call("History3DCb_CheckedChanged", null, null);
        }

        [Test]
        public void TestInitializeTimer()
        {
            System.Windows.Forms.ComboBox cbox = (System.Windows.Forms.ComboBox)viewAccessor.GetField("intervalTypeBox");
            cbox.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Second, LanguageHelper.TrendViewer_TrendView_Second_EN);
            viewAccessor.SetField("intervalTypeBox", cbox);
            System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
            trendView.InitializeTimer(ref timer);

            cbox.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Minute, LanguageHelper.TrendViewer_TrendView_Minute_EN);
            viewAccessor.SetField("intervalTypeBox", cbox);
            trendView.InitializeTimer(ref timer);
            cbox.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Hour, LanguageHelper.TrendViewer_TrendView_Hour_EN);
            viewAccessor.SetField("intervalTypeBox", cbox);
            trendView.InitializeTimer(ref timer);
            cbox.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Day, LanguageHelper.TrendViewer_TrendView_Day_EN);
            viewAccessor.SetField("intervalTypeBox", cbox);
            trendView.InitializeTimer(ref timer);
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/wTVXg", "+LQk4w")]
        public void TestStopRealTimeCharting01()
        {
            trendView.StopRealTimeCharting();
        }

        [Test]
        public void TestStopRealTimeCharting02()
        {
            //Exception caught
            trendView.StopRealTimeCharting();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/QlUXg", "/7GNxA")]
        public void TestGetFrameInterval01()
        {
            StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Minute, LanguageHelper.TrendViewer_TrendView_Minute_EN);
            int i = (int)viewAccessor.Call("GetFrameInterval");

            ComboBox cb = (ComboBox)viewAccessor.GetField("frameTypeBox");
            cb.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Hour, LanguageHelper.TrendViewer_TrendView_Hour_EN);
            viewAccessor.SetField("frameTypeBox", cb);
            viewAccessor.Call("GetFrameInterval");

            //frameTypeBox.Text.Trim() == StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Day, LanguageHelper.TrendViewer_TrendView_Day_EN)
            cb.Text = StringHelper.GetInstance().getStringValue(LanguageHelper.TrendViewer_TrendView_Day, LanguageHelper.TrendViewer_TrendView_Day_EN);
            viewAccessor.SetField("frameTypeBox", cb);
            viewAccessor.Call("GetFrameInterval");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+WwBtA", "/5bvAQ")]
        public void TestGetTrendingChartCtl01()
        {
            TrendingChartCtl trendingChartCtl = trendView.GetTrendingChartCtl();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+FhZIg", "/sCdaw")]
        public void TestGetStartTime01()
        {
            DateTime dateTime = trendView.GetStartTime();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/NZ05Q", "/07zCQ")]
        public void TestGetEndTime01()
        {
            DateTime dateTime = trendView.GetEndTime();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Fx53w", "/MKNuQ")]
        public void TestGetRealTimeStartFlag01()
        {
             bool b = trendView.GetRealTimeStartFlag();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/zrAJA", "+h7USw")]
        public void TestGetTitles01()
        {
            string[] string1 = trendView.GetTitles();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/BaMiw", "/xBqSw")]
        public void TestIsMixMode01()
        {
             bool b = trendView.IsMixMode();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/lN24g", "+bEd8g")]
        public void TestDispose01()
        {
             bool disposing = true;
              Accessor trendViewAccessor = ReflectionAccessor.Wrap(trendView);
              trendViewAccessor.Call("Dispose", disposing);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Er+mA", "/oEReA")]
        public void TestInitializeComponent01()
        {
             Accessor trendViewAccessor = ReflectionAccessor.Wrap(trendView);
             trendViewAccessor.Call("InitializeComponent");
        }

        [Test]
        public void TestUpdateTitles()
        {
            string[] titles = new string[3];
            titles[0] = "a";
            titles[1] = "b";
            titles[2] = "c";
            trendView.UpdateTitles(titles);
        }

        [Test]
        public void TestTrendViewer_Paint()
        {
            //PaintEventArgs args = new PaintEventArgs(new Graphics(), new Rectangle());
            viewAccessor.Call("TrendViewer_Paint", null, null);
        }

        [Test]
        public void TestTrendView_FormClosed01()
        {
            viewAccessor.Call("TrendView_FormClosed", null, null);
        }

        [Test]
        public void TestTrendView_FormClosed02()
        {
            viewAccessor.Call("TrendView_FormClosed", null, null);
        }

    }
}
