using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;
using TrendViewer.DotTest.Factories.View;
using TrendViewer.Controller;
using System.Collections.Generic;

namespace TrendViewer.DotTest.View
{
    [TestFixture()]
    public class FormulaGroupTests
    {
        private FormulaGroup formulaGroup;

        [TestFixtureSetUp]
        public void FixtureSetUp()
        {
            formulaGroup = new FormulaGroup();
        }
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+SvzlQ", "/tmXQA")]
        public void TestFormulaGroupConstructor01()
        {
            FormulaGroup formulaGroup = new FormulaGroup();

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+uX4yA", "+t12YA")]
        public void TestSetFormType01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                FormType type = FormType.Save;
                formulaGroup.SetFormType(type);
 
            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/Sf3eQ", "/UB5gw")]
        public void TestTranslateCaption01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                formulaGroup.SetFormType(FormType.Load);
                formulaGroup.TranslateCaption();

                formulaGroup.SetFormType(FormType.Save);
                formulaGroup.TranslateCaption();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+fj+Wg", "/Y1ByQ")]
        public void TestGetConfigName01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                string str = formulaGroup.GetConfigName();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+2raeg", "/HJ2Dw")]
        public void TestShowErrMsgNoCfgName01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                formulaGroup.SetFormType(FormType.Load);
                formulaGroup.ShowErrMsgNoCfgName();
                formulaGroup.SetFormType(FormType.Save);
                formulaGroup.ShowErrMsgNoCfgName();

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+DylSQ", "/Afr3A")]
        public void TestSetCurrentGrpName01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                string grpName = string.Empty;
                formulaGroup.SetCurrentGrpName(grpName);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/a/aug", "/OpwCw")]
        public void TestDispose01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                bool disposing = true;
                Accessor formulaGroupAccessor = ReflectionAccessor.Wrap(formulaGroup);
                formulaGroupAccessor.SetField("components", new System.ComponentModel.Container());
                formulaGroupAccessor.Call("Dispose", disposing);

            }
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/9NhYg", "/DJHOw")]
        public void TestInitializeComponent01()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                Accessor formulaGroupAccessor = ReflectionAccessor.Wrap(formulaGroup);
                formulaGroupAccessor.Call("InitializeComponent");

            }
        }

        [Test]
        public void TestcancelCmd_Click()
        {
            using (FormulaGroup formulaGroup = FormulaGroupFactory.CreateFormulaGroup01())
            {
                Accessor formulaGroupAccessor = ReflectionAccessor.Wrap(formulaGroup);
                formulaGroupAccessor.Call("cancelCmd_Click", null, null);
            }
            
        }

        [Test]
        public void TestAttachListener()
        {
            STEE.ISCS.MVC.IController ctl = new FormulaGroupController();
            formulaGroup.SetFormType(FormType.Load);
            formulaGroup.AttachListener(ctl);
            formulaGroup.SetFormType(FormType.Save);
            formulaGroup.AttachListener(ctl);
        }

        [Test]
        public void TestFillConfigNameBox()
        {
            formulaGroup.SetFormType(FormType.Load);
            List<string> grpNames = new List<string>();
            grpNames.Add("a");
            grpNames.Add("b");
            formulaGroup.FillConfigNameBox(grpNames);

            formulaGroup.SetFormType(FormType.Save);
            formulaGroup.FillConfigNameBox(grpNames);
        }

        [Test]
        public void TestLoadConfigData_Paint()
        {
            Accessor viewAccessor = ReflectionAccessor.Wrap(formulaGroup);
            viewAccessor.Call("LoadConfigData_Paint", null, null);
        }
    }
}
