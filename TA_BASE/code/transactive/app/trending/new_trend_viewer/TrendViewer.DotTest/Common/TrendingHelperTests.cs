using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using TrendViewer.View;
using Entity.Trending;
using System.Globalization;

namespace TrendViewer.DotTest.Common
{
    [TestFixture()]
    public class TrendingHelperTests
    {
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Q8AYA", "+65q/g")]
        public void TestgetDisplayName01()
        {
            ETrendingChartType trendingCType = ETrendingChartType.Historical;
            string inputName = string.Empty;
            string str = TrendViewer.View.TrendViewerHelper.getDisplayName(trendingCType, inputName);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+hlNDA", "/gXzlQ")]
        public void TestgetETrendingChartType01()
        {
            string displayName = string.Empty;
            ETrendingChartType eTrendingChartType = TrendViewer.View.TrendViewerHelper.getETrendingChartType(displayName);

            TrendViewerHelper helper = new TrendViewerHelper();
            Accessor trendingHelperAc = ReflectionAccessor.Wrap(helper);
            displayName = (string)trendingHelperAc.GetField("FORMULA_PRE");

            eTrendingChartType = TrendViewerHelper.getETrendingChartType(displayName);

            displayName = (string)trendingHelperAc.GetField("HIST_PRE");
            eTrendingChartType = TrendViewerHelper.getETrendingChartType(displayName);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+8SoGQ", "/yYaxw")]
        public void TestConvertLineTypeFromEnumToEn01()
        {
            LineType linetype = LineType.Line;
            string str = TrendViewerHelper.ConvertLineTypeFromEnumToEn(linetype);

        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+zpHZg", "/VlBuA")]
        public void TestconvertLineTypeToDispLan01()
        {
            LineType lineType = LineType.Line;
            string str = TrendViewerHelper.convertLineTypeToDispLan(lineType);

            lineType = LineType.Spline;
            str = TrendViewerHelper.convertLineTypeToDispLan(lineType);


        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+SVBTQ", "/b5KOw")]
        public void TestconvertLineTypeToEnum01()
        {
            string lineType = string.Empty;
            LineType lineType1 = TrendViewerHelper.convertLineTypeToEnum(lineType);
            lineType = "Line";
            lineType1 = TrendViewerHelper.convertLineTypeToEnum(lineType);

            lineType = "Spline";
            lineType1 = TrendViewerHelper.convertLineTypeToEnum(lineType);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+nfhMA", "/bJVvQ")]
        public void TestisNumeric01()
        {
            string val = string.Empty;
            NumberStyles numberStyle = NumberStyles.AllowTrailingSign;
            bool b = TrendViewerHelper.isNumeric(val, numberStyle);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(b);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsFalse(b);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/uXcAQ", "+09R+A")]
        public void TestChangeStrToBool01()
        {
            string str = string.Empty;
            bool b = TrendViewerHelper.ChangeStrToBool(str);
            str = "Y";
            b = TrendViewerHelper.ChangeStrToBool(str);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ICJtA", "/EKJuw")]
        public void TestChangeBoolToStr01()
        {
            bool b = true;
            string str = TrendViewerHelper.ChangeBoolToStr(b);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Y", str);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+0D4EA", "+7ua6A")]
        public void TestCheckValidVariables01()
        {
            string statement = string.Empty;
            string str = TrendViewerHelper.CheckValidVariables(statement);

            statement = "aaa";
            str = TrendViewerHelper.CheckValidVariables(statement);

            statement = "a::b";
            str = TrendViewerHelper.CheckValidVariables(statement);
            statement = "::a::b";
            str = TrendViewerHelper.CheckValidVariables(statement);
            statement = "::a";
            str = TrendViewerHelper.CheckValidVariables(statement);
        }

        [Test]
        public void TestCheckValidVariables02()
        {
            string statement = "::a";
            string str = TrendViewerHelper.CheckValidVariables(statement);
            //for exception caught:
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/LC89Q", "/7/Dcw")]
        public void TestisBoolean01()
        {
            string val = string.Empty;
            bool b = TrendViewerHelper.isBoolean(val);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(b);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsFalse(b);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/wyJ2A", "/1+yGA")]
        public void TestTrendingHelperConstructor01()
        {
            TrendViewerHelper trendingHelper = new TrendViewerHelper();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Q8AYA", "+USBtg")]
        public void TestgetDisplayName02()
        {
            ETrendingChartType trendingCType = ETrendingChartType.Formula;
            string inputName = string.Empty;
            string str = TrendViewerHelper.getDisplayName(trendingCType, inputName);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("F-", str);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+Q8AYA", "/C6cUA")]
        public void TestgetDisplayName03()
        {
            ETrendingChartType trendingCType = ETrendingChartType.RealTime;
            string inputName = string.Empty;
            string str = TrendViewerHelper.getDisplayName(trendingCType, inputName);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("", str);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+8SoGQ", "+iyE3Q")]
        public void TestConvertLineTypeFromEnumToEn02()
        {
            LineType linetype = LineType.Spline;
            string str = TrendViewerHelper.ConvertLineTypeFromEnumToEn(linetype);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Spline", str);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+zpHZg", "++bYkg")]
        public void TestconvertLineTypeToDispLan02()
        {
            LineType lineType = LineType.Spline;
            string str = TrendViewerHelper.convertLineTypeToDispLan(lineType);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("Spline", str);
            #endregion
        }


        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+nfhMA", "+aaP4w")]
        public void TestisNumeric03()
        {
            string val = string.Empty;
            NumberStyles numberStyle = NumberStyles.Number;
            bool b = TrendViewerHelper.isNumeric(val, numberStyle);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(b);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.IsFalse(b);
            #endregion
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ICJtA", "+X28rg")]
        public void TestChangeBoolToStr02()
        {
            bool b = false;
            string str = TrendViewerHelper.ChangeBoolToStr(b);
            #region Record State
            ValueRecorder recorder = new ValueRecorder();
            recorder.Record(str);
            recorder.FinishRecording();
            #endregion
            #region Assertions
            Assert.AreEqual("N", str);
            #endregion
        }

    }
}
