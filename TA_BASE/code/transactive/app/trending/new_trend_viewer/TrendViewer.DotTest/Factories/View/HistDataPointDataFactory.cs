using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;

namespace TrendViewer.DotTest.Factories.View
{
    [TestFixture(), ObjectFactoryType()]
    public class HistDataPointDataFactory
    {
        ///<summary>A caller is responsible for disposing the result</summary>
        [ObjectFactoryMethod]
        [HashCode("/uZnWg", "/gC9HQ")]
        public static HistDataPointData CreateHistDataPointData01()
        {
            HistDataPointData histDataPointData = new HistDataPointData();
            return histDataPointData;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateHistDataPointData01()
        {
            using (HistDataPointData histDataPointData = CreateHistDataPointData01())
            {
                Assert.IsNotNull(histDataPointData);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)histDataPointData.AccessibleDefaultActionDescription);
                recorder.Record((string)histDataPointData.AccessibleDescription);
                recorder.Record((string)histDataPointData.AccessibleName);
                recorder.Record((AccessibleRole)histDataPointData.AccessibleRole);
                recorder.Record((bool)histDataPointData.AllowDrop);
                recorder.Record((bool)histDataPointData.AllowTransparency);
                recorder.Record((AnchorStyles)histDataPointData.Anchor);
                recorder.Record((AutoScaleMode)histDataPointData.AutoScaleMode);
                recorder.Record((bool)histDataPointData.AutoScroll);
                recorder.Record((bool)histDataPointData.AutoSize);
                recorder.Record((AutoSizeMode)histDataPointData.AutoSizeMode);
                recorder.Record((AutoValidate)histDataPointData.AutoValidate);
                recorder.Record((ImageLayout)histDataPointData.BackgroundImageLayout);
                recorder.Record((int)histDataPointData.Bottom);
                recorder.Record((bool)histDataPointData.CanFocus);
                recorder.Record((bool)histDataPointData.CanSelect);
                recorder.Record((bool)histDataPointData.Capture);
                recorder.Record((bool)histDataPointData.CausesValidation);
                recorder.Record((string)histDataPointData.CompanyName);
                recorder.Record((bool)histDataPointData.ContainsFocus);
                recorder.Record((bool)histDataPointData.ControlBox);
                recorder.Record((bool)histDataPointData.Created);
                recorder.Record((DialogResult)histDataPointData.DialogResult);
                recorder.Record((bool)histDataPointData.Disposing);
                recorder.Record((DockStyle)histDataPointData.Dock);
                recorder.Record((bool)histDataPointData.Enabled);
                recorder.Record((bool)histDataPointData.Focused);
                recorder.Record((FormBorderStyle)histDataPointData.FormBorderStyle);
                recorder.Record((bool)histDataPointData.HasChildren);
                recorder.Record((int)histDataPointData.Height);
                recorder.Record((bool)histDataPointData.HelpButton);
                recorder.Record((ImeMode)histDataPointData.ImeMode);
                recorder.Record((bool)histDataPointData.InvokeRequired);
                recorder.Record((bool)histDataPointData.IsAccessible);
                recorder.Record((bool)histDataPointData.IsDisposed);
                recorder.Record((bool)histDataPointData.IsHandleCreated);
                recorder.Record((bool)histDataPointData.IsMdiChild);
                recorder.Record((bool)histDataPointData.IsMdiContainer);
                recorder.Record((bool)histDataPointData.IsMirrored);
                recorder.Record((bool)histDataPointData.IsRestrictedWindow);
                recorder.Record((bool)histDataPointData.KeyPreview);
                recorder.Record((int)histDataPointData.Left);
                recorder.Record((bool)histDataPointData.MaximizeBox);
                recorder.Record((bool)histDataPointData.MinimizeBox);
                recorder.Record((bool)histDataPointData.Modal);
                recorder.Record((string)histDataPointData.Name);
                recorder.Record((double)histDataPointData.Opacity);
                recorder.Record((string)histDataPointData.ProductName);
                recorder.Record((string)histDataPointData.ProductVersion);
                recorder.Record((bool)histDataPointData.RecreatingHandle);
                recorder.Record((int)histDataPointData.Right);
                recorder.Record((RightToLeft)histDataPointData.RightToLeft);
                recorder.Record((bool)histDataPointData.RightToLeftLayout);
                recorder.Record((bool)histDataPointData.ShowIcon);
                recorder.Record((bool)histDataPointData.ShowInTaskbar);
                recorder.Record((SizeGripStyle)histDataPointData.SizeGripStyle);
                recorder.Record((FormStartPosition)histDataPointData.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(histDataPointData).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)histDataPointData.TabIndex);
                recorder.Record((bool)histDataPointData.TabStop);
                recorder.Record((string)histDataPointData.Text);
                recorder.Record((int)histDataPointData.Top);
                recorder.Record((bool)histDataPointData.TopLevel);
                recorder.Record((bool)histDataPointData.TopMost);
                recorder.Record((bool)histDataPointData.UseWaitCursor);
                recorder.Record((string)histDataPointData.ViewID);
                recorder.Record((string)histDataPointData.ViewType);
                recorder.Record((bool)histDataPointData.Visible);
                recorder.Record((int)histDataPointData.Width);
                recorder.Record((FormWindowState)histDataPointData.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)histDataPointData.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)histDataPointData.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)histDataPointData.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)histDataPointData.AutoValidate);
                Assert.IsFalse((bool)histDataPointData.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)histDataPointData.CompanyName);
                Assert.IsFalse((bool)histDataPointData.Created);
                Assert.IsTrue((bool)histDataPointData.Enabled);
                Assert.IsTrue((bool)histDataPointData.HasChildren);
                Assert.IsFalse((bool)histDataPointData.InvokeRequired);
                Assert.IsFalse((bool)histDataPointData.IsHandleCreated);
                Assert.IsFalse((bool)histDataPointData.IsRestrictedWindow);
                Assert.IsFalse((bool)histDataPointData.MaximizeBox);
                Assert.AreEqual(1.0, (double)histDataPointData.Opacity, 1E-7);
                Assert.IsFalse((bool)histDataPointData.RecreatingHandle);
                Assert.IsTrue((bool)histDataPointData.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterParent, (FormStartPosition)histDataPointData.StartPosition);
                Assert.AreEqual("Add Datapoint History", (string)histDataPointData.Text);
                Assert.IsFalse((bool)histDataPointData.TopMost);
                Assert.IsFalse((bool)histDataPointData.Visible);
                #endregion
            }
        }

    }
}
