using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;

namespace TrendViewer.DotTest.Factories.View
{
    [TestFixture(), ObjectFactoryType()]
    public class MarkerGroupFactory
    {
        ///<summary>A caller is responsible for disposing the result</summary>
        [ObjectFactoryMethod]
        [HashCode("+iDTMg", "/jaDWg")]
        public static MarkerGroup CreateMarkerGroup01()
        {
            MarkerGroup markerGroup = new MarkerGroup();
            return markerGroup;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateMarkerGroup01()
        {
            using (MarkerGroup markerGroup = CreateMarkerGroup01())
            {
                Assert.IsNotNull(markerGroup);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)markerGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)markerGroup.AccessibleDescription);
                recorder.Record((string)markerGroup.AccessibleName);
                recorder.Record((AccessibleRole)markerGroup.AccessibleRole);
                recorder.Record((bool)markerGroup.AllowDrop);
                recorder.Record((bool)markerGroup.AllowTransparency);
                recorder.Record((AnchorStyles)markerGroup.Anchor);
                recorder.Record((AutoScaleMode)markerGroup.AutoScaleMode);
                recorder.Record((bool)markerGroup.AutoScroll);
                recorder.Record((bool)markerGroup.AutoSize);
                recorder.Record((AutoSizeMode)markerGroup.AutoSizeMode);
                recorder.Record((AutoValidate)markerGroup.AutoValidate);
                recorder.Record((ImageLayout)markerGroup.BackgroundImageLayout);
                recorder.Record((int)markerGroup.Bottom);
                recorder.Record((bool)markerGroup.CanFocus);
                recorder.Record((bool)markerGroup.CanSelect);
                recorder.Record((bool)markerGroup.Capture);
                recorder.Record((bool)markerGroup.CausesValidation);
                recorder.Record((string)markerGroup.CompanyName);
                recorder.Record((bool)markerGroup.ContainsFocus);
                recorder.Record((bool)markerGroup.ControlBox);
                recorder.Record((bool)markerGroup.Created);
                recorder.Record((DialogResult)markerGroup.DialogResult);
                recorder.Record((bool)markerGroup.Disposing);
                recorder.Record((DockStyle)markerGroup.Dock);
                recorder.Record((bool)markerGroup.Enabled);
                recorder.Record((bool)markerGroup.Focused);
                recorder.Record((FormBorderStyle)markerGroup.FormBorderStyle);
                recorder.Record((bool)markerGroup.HasChildren);
                recorder.Record((int)markerGroup.Height);
                recorder.Record((bool)markerGroup.HelpButton);
                recorder.Record((ImeMode)markerGroup.ImeMode);
                recorder.Record((bool)markerGroup.InvokeRequired);
                recorder.Record((bool)markerGroup.IsAccessible);
                recorder.Record((bool)markerGroup.IsDisposed);
                recorder.Record((bool)markerGroup.IsHandleCreated);
                recorder.Record((bool)markerGroup.IsMdiChild);
                recorder.Record((bool)markerGroup.IsMdiContainer);
                recorder.Record((bool)markerGroup.IsMirrored);
                recorder.Record((bool)markerGroup.IsRestrictedWindow);
                recorder.Record((bool)markerGroup.KeyPreview);
                recorder.Record((int)markerGroup.Left);
                recorder.Record((bool)markerGroup.MaximizeBox);
                recorder.Record((bool)markerGroup.MinimizeBox);
                recorder.Record((bool)markerGroup.Modal);
                recorder.Record((string)markerGroup.Name);
                recorder.Record((double)markerGroup.Opacity);
                recorder.Record((string)markerGroup.ProductName);
                recorder.Record((string)markerGroup.ProductVersion);
                recorder.Record((bool)markerGroup.RecreatingHandle);
                recorder.Record((int)markerGroup.Right);
                recorder.Record((RightToLeft)markerGroup.RightToLeft);
                recorder.Record((bool)markerGroup.RightToLeftLayout);
                recorder.Record((bool)markerGroup.ShowIcon);
                recorder.Record((bool)markerGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)markerGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)markerGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(markerGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)markerGroup.TabIndex);
                recorder.Record((bool)markerGroup.TabStop);
                recorder.Record((string)markerGroup.Text);
                recorder.Record((int)markerGroup.Top);
                recorder.Record((bool)markerGroup.TopLevel);
                recorder.Record((bool)markerGroup.TopMost);
                recorder.Record((bool)markerGroup.UseWaitCursor);
                recorder.Record((string)markerGroup.ViewID);
                recorder.Record((string)markerGroup.ViewType);
                recorder.Record((bool)markerGroup.Visible);
                recorder.Record((int)markerGroup.Width);
                recorder.Record((FormWindowState)markerGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)markerGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)markerGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)markerGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)markerGroup.AutoValidate);
                Assert.IsFalse((bool)markerGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)markerGroup.CompanyName);
                Assert.IsFalse((bool)markerGroup.Created);
                Assert.IsTrue((bool)markerGroup.Enabled);
                Assert.IsTrue((bool)markerGroup.HasChildren);
                Assert.IsFalse((bool)markerGroup.InvokeRequired);
                Assert.IsFalse((bool)markerGroup.IsHandleCreated);
                Assert.IsFalse((bool)markerGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)markerGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)markerGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)markerGroup.RecreatingHandle);
                Assert.IsTrue((bool)markerGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)markerGroup.StartPosition);
                Assert.AreEqual("Load Marker Configuration", (string)markerGroup.Text);
                Assert.IsFalse((bool)markerGroup.TopMost);
                Assert.IsFalse((bool)markerGroup.Visible);
                #endregion
            }
        }

    }
}
