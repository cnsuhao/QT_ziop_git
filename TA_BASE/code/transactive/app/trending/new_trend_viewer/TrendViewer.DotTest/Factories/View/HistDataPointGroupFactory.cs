using Dottest.Framework;
using Dottest.Framework.RecordState;
using NUnit.Framework;
using System;
using System.Windows.Forms;
using TrendViewer.View;

namespace TrendViewer.DotTest.Factories.View
{
    [TestFixture(), ObjectFactoryType()]
    public class HistDataPointGroupFactory
    {
        ///<summary>A caller is responsible for disposing the result</summary>
        [ObjectFactoryMethod]
        [HashCode("/wIQpw", "+Rzveg")]
        public static HistDataPointGroup CreateHistDataPointGroup01()
        {
            HistDataPointGroup histDataPointGroup = new HistDataPointGroup();
            return histDataPointGroup;
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        public void TestCreateHistDataPointGroup01()
        {
            using (HistDataPointGroup histDataPointGroup = CreateHistDataPointGroup01())
            {
                Assert.IsNotNull(histDataPointGroup);
                #region Record State
                ValueRecorder recorder = new ValueRecorder();
                recorder.Record((string)histDataPointGroup.AccessibleDefaultActionDescription);
                recorder.Record((string)histDataPointGroup.AccessibleDescription);
                recorder.Record((string)histDataPointGroup.AccessibleName);
                recorder.Record((AccessibleRole)histDataPointGroup.AccessibleRole);
                recorder.Record((bool)histDataPointGroup.AllowDrop);
                recorder.Record((bool)histDataPointGroup.AllowTransparency);
                recorder.Record((AnchorStyles)histDataPointGroup.Anchor);
                recorder.Record((AutoScaleMode)histDataPointGroup.AutoScaleMode);
                recorder.Record((bool)histDataPointGroup.AutoScroll);
                recorder.Record((bool)histDataPointGroup.AutoSize);
                recorder.Record((AutoSizeMode)histDataPointGroup.AutoSizeMode);
                recorder.Record((AutoValidate)histDataPointGroup.AutoValidate);
                recorder.Record((ImageLayout)histDataPointGroup.BackgroundImageLayout);
                recorder.Record((int)histDataPointGroup.Bottom);
                recorder.Record((bool)histDataPointGroup.CanFocus);
                recorder.Record((bool)histDataPointGroup.CanSelect);
                recorder.Record((bool)histDataPointGroup.Capture);
                recorder.Record((bool)histDataPointGroup.CausesValidation);
                recorder.Record((string)histDataPointGroup.CompanyName);
                recorder.Record((bool)histDataPointGroup.ContainsFocus);
                recorder.Record((bool)histDataPointGroup.ControlBox);
                recorder.Record((bool)histDataPointGroup.Created);
                recorder.Record((DialogResult)histDataPointGroup.DialogResult);
                recorder.Record((bool)histDataPointGroup.Disposing);
                recorder.Record((DockStyle)histDataPointGroup.Dock);
                recorder.Record((bool)histDataPointGroup.Enabled);
                recorder.Record((bool)histDataPointGroup.Focused);
                recorder.Record((FormBorderStyle)histDataPointGroup.FormBorderStyle);
                recorder.Record((bool)histDataPointGroup.HasChildren);
                recorder.Record((int)histDataPointGroup.Height);
                recorder.Record((bool)histDataPointGroup.HelpButton);
                recorder.Record((ImeMode)histDataPointGroup.ImeMode);
                recorder.Record((bool)histDataPointGroup.InvokeRequired);
                recorder.Record((bool)histDataPointGroup.IsAccessible);
                recorder.Record((bool)histDataPointGroup.IsDisposed);
                recorder.Record((bool)histDataPointGroup.IsHandleCreated);
                recorder.Record((bool)histDataPointGroup.IsMdiChild);
                recorder.Record((bool)histDataPointGroup.IsMdiContainer);
                recorder.Record((bool)histDataPointGroup.IsMirrored);
                recorder.Record((bool)histDataPointGroup.IsRestrictedWindow);
                recorder.Record((bool)histDataPointGroup.KeyPreview);
                recorder.Record((int)histDataPointGroup.Left);
                recorder.Record((bool)histDataPointGroup.MaximizeBox);
                recorder.Record((bool)histDataPointGroup.MinimizeBox);
                recorder.Record((bool)histDataPointGroup.Modal);
                recorder.Record((string)histDataPointGroup.Name);
                recorder.Record((double)histDataPointGroup.Opacity);
                recorder.Record((string)histDataPointGroup.ProductName);
                recorder.Record((string)histDataPointGroup.ProductVersion);
                recorder.Record((bool)histDataPointGroup.RecreatingHandle);
                recorder.Record((int)histDataPointGroup.Right);
                recorder.Record((RightToLeft)histDataPointGroup.RightToLeft);
                recorder.Record((bool)histDataPointGroup.RightToLeftLayout);
                recorder.Record((bool)histDataPointGroup.ShowIcon);
                recorder.Record((bool)histDataPointGroup.ShowInTaskbar);
                recorder.Record((SizeGripStyle)histDataPointGroup.SizeGripStyle);
                recorder.Record((FormStartPosition)histDataPointGroup.StartPosition);
                recorder.Record((bool)ReflectionAccessor.Wrap(histDataPointGroup).GetProperty("System.Windows.Forms.Layout.IArrangedElement.ParticipatesInLayout"));
                recorder.Record((int)histDataPointGroup.TabIndex);
                recorder.Record((bool)histDataPointGroup.TabStop);
                recorder.Record((string)histDataPointGroup.Text);
                recorder.Record((int)histDataPointGroup.Top);
                recorder.Record((bool)histDataPointGroup.TopLevel);
                recorder.Record((bool)histDataPointGroup.TopMost);
                recorder.Record((bool)histDataPointGroup.UseWaitCursor);
                recorder.Record((string)histDataPointGroup.ViewID);
                recorder.Record((string)histDataPointGroup.ViewType);
                recorder.Record((bool)histDataPointGroup.Visible);
                recorder.Record((int)histDataPointGroup.Width);
                recorder.Record((FormWindowState)histDataPointGroup.WindowState);
                recorder.FinishRecording();
                #endregion
                #region Assertions
                Assert.IsNull((string)histDataPointGroup.AccessibleDefaultActionDescription);
                Assert.IsFalse((bool)histDataPointGroup.AllowDrop);
                Assert.AreEqual(global::System.Windows.Forms.AutoScaleMode.Font, (AutoScaleMode)histDataPointGroup.AutoScaleMode);
                Assert.AreEqual(global::System.Windows.Forms.AutoValidate.EnablePreventFocusChange, (AutoValidate)histDataPointGroup.AutoValidate);
                Assert.IsFalse((bool)histDataPointGroup.CanFocus);
                Assert.AreEqual("ST Electronics Ltd", (string)histDataPointGroup.CompanyName);
                Assert.IsFalse((bool)histDataPointGroup.Created);
                Assert.IsTrue((bool)histDataPointGroup.Enabled);
                Assert.IsTrue((bool)histDataPointGroup.HasChildren);
                Assert.IsFalse((bool)histDataPointGroup.InvokeRequired);
                Assert.IsFalse((bool)histDataPointGroup.IsHandleCreated);
                Assert.IsFalse((bool)histDataPointGroup.IsRestrictedWindow);
                Assert.IsFalse((bool)histDataPointGroup.MaximizeBox);
                Assert.AreEqual(1.0, (double)histDataPointGroup.Opacity, 1E-7);
                Assert.IsFalse((bool)histDataPointGroup.RecreatingHandle);
                Assert.IsTrue((bool)histDataPointGroup.ShowIcon);
                Assert.AreEqual(global::System.Windows.Forms.FormStartPosition.CenterScreen, (FormStartPosition)histDataPointGroup.StartPosition);
                Assert.AreEqual("Load Historical Data Configuration", (string)histDataPointGroup.Text);
                Assert.IsFalse((bool)histDataPointGroup.TopMost);
                Assert.IsFalse((bool)histDataPointGroup.Visible);
                #endregion
            }
        }

    }
}
