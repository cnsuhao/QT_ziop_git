using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.MulLanguage;
using STEE.ISCS.MulLanguage.DotTest.Factories;
using System;
using Dottest.Framework.RecordState;

namespace STEE.ISCS.MulLanguage.DotTest
{
    [TestFixture()]
    public class DateTimeFormatterTests
    {
        [TearDown]
        public void fixtureTearDown()
        {
            DateTimeFormatter.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/TnDuw", "+OPK1w")]
        public void TestDateTimeFormatterConstructor01()
        {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatterFactory.CreateDateTimeFormatter01();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+4CQ2Q", "/g5N9g")]
        public void TestgetInstance01()
        {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.getInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/u/rlw", "+NKMhg")]
        public void TestsetDateFormatStr01()
        {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatterFactory.CreateDateTimeFormatter01();
            string formatStr = "DD-MM-YY";
            //Test Procedure Call
            dateTimeFormatter.setDateFormatStr(formatStr);
            //Post condition Check
            Accessor dateTimeFormatteraccessor = ReflectionAccessor.Wrap(dateTimeFormatter);
            Assert.AreEqual(formatStr, dateTimeFormatteraccessor.GetField("m_DateFormatStr"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/zNTlw", "+BZO1g")]
        public void TestgetDateFormatStr01()
        {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatterFactory.CreateDateTimeFormatter01();
            string formatStr = "DD-MM-YY";
            dateTimeFormatter.setDateFormatStr(formatStr);
            //Test Procedure Call
            string str = dateTimeFormatter.getDateFormatStr();
            //Post condition Check
            Accessor dateTimeFormatteraccessor = ReflectionAccessor.Wrap(dateTimeFormatter);
            Assert.AreEqual(formatStr, dateTimeFormatteraccessor.GetField("m_DateFormatStr"));
        }

    }
}
