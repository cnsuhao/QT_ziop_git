using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.MulLanguage;
using STEE.ISCS.MulLanguage.DotTest.Factories;
using System;
using Dottest.Framework.RecordState;

namespace STEE.ISCS.MulLanguage.DotTest
{
    [TestFixture()]
    public class StringHelperTests
    {
        [TearDown]
        public void FixtureTearDown()
        {
            StringHelper.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("/FD5qQ", "//wL/w")]
        public void TestStringHelperConstructor01()
        {
            StringHelper stringHelper = StringHelperFactory.CreateStringHelper01();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+cQR6g", "+GWBrA")]
        public void TestGetInstance01()
        {
            StringHelper stringHelper = StringHelper.GetInstance();
        }

        [ExpectedException(typeof(System.ArgumentException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]       
        [HashCode("+USHqw", "+jofGg")]
        public void TestAddStringItem01()
        {
            StringHelper stringHelper = StringHelperFactory.CreateStringHelper01();
            string iD = "SampleID";
            string textEnglish = "test1";
            string textChinese = "TT";
            string description = string.Empty;
            stringHelper.AddStringItem(iD, textEnglish, textChinese, description);

            //duplicate entry test
            stringHelper.AddStringItem(iD, textEnglish, textChinese, description);
        }

        [ExpectedException(typeof(System.ArgumentException))]
        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+TZl/g", "/197OA")]
        public void TestRemoveStringItem01()
        {
            StringHelper stringHelper = StringHelperFactory.CreateStringHelper01();
            string iD = "SampleID";
            string textEnglish = "test1";
            string textChinese = "TT";
            string description = string.Empty;
            stringHelper.AddStringItem(iD, textEnglish, textChinese, description);
            stringHelper.RemoveStringItem(iD);

            //unknow id 
            stringHelper.RemoveStringItem("unknowID");
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+njhpw", "/PgX+g")]
        public void TestgetStringValue01()
        {
            StringHelper stringHelper = StringHelperFactory.CreateStringHelper01();
            string iD = "SampleID";
            string textEnglish = "test1";
            string textChinese = "TT";
            string description = string.Empty;
            stringHelper.AddStringItem(iD, textEnglish, textChinese, description);
            string defaultValue = "rrr";
            string str = stringHelper.getStringValue(iD, defaultValue);

            //current language is chinese
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelperFactory.CreateLanguageTypeHelper01();
            LanguageType langType = LanguageType.Chinese;
            languageTypeHelper.SetLanaguageType(langType);
            //Test Procedure Call
            str = stringHelper.getStringValue(iD, defaultValue);
            //Post Condition Check
            Assert.AreEqual(textChinese, str);

            //current language is English
            languageTypeHelper.SetLanaguageType(LanguageType.English);
            //Test Procedure Call
            str = stringHelper.getStringValue(iD, defaultValue);
            //Post Condition Check
            Assert.AreEqual(textEnglish, str);

            //Id is not in string helper
            //Test Procedure Call
            str = stringHelper.getStringValue("UnknownID", defaultValue);
            //Post Condition Check
            Assert.AreEqual(defaultValue, str);
        }

    }
}
