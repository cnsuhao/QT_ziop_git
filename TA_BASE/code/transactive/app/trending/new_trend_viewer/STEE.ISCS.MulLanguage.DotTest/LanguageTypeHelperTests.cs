using Dottest.Framework;
using NUnit.Framework;
using STEE.ISCS.MulLanguage;
using STEE.ISCS.MulLanguage.DotTest.Factories;
using Dottest.Framework.RecordState;

namespace STEE.ISCS.MulLanguage.DotTest
{
    [TestFixture()]
    public class LanguageTypeHelperTests
    {
        [TearDown]
        public void fixtureTearDown()
        {
            LanguageTypeHelper.ReleaseInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+IntzA", "/Pqgig")]
        public void TestLanguageTypeHelperConstructor01()
        {
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelperFactory.CreateLanguageTypeHelper01();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+99QHw", "+/rZvw")]
        public void TestGetInstance01()
        {
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelper.GetInstance();
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+biuHQ", "+kJIww")]
        public void TestSetLanaguageType01()
        {
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelperFactory.CreateLanguageTypeHelper01();
            LanguageType langType = LanguageType.Default;
            languageTypeHelper.SetLanaguageType(langType);
            //Post Condition Check
            Accessor languageTypeHelperaccessor = ReflectionAccessor.Wrap(languageTypeHelper);
            Assert.AreEqual(langType,languageTypeHelperaccessor.GetField("m_langType"));
            Accessor dateTimeFormatterAccessor = ReflectionAccessor.Wrap(DateTimeFormatter.getInstance());
            Assert.AreEqual(languageTypeHelperaccessor.GetField("DateFormat_EN"), dateTimeFormatterAccessor.GetField("m_DateFormatStr"));

            //for chinese language
            langType = LanguageType.Chinese;
            languageTypeHelper.SetLanaguageType(langType);
            //Post Condition Check
            Assert.AreEqual(langType, languageTypeHelperaccessor.GetField("m_langType"));
            Assert.AreEqual(languageTypeHelperaccessor.GetField("DateFormat_CH"), dateTimeFormatterAccessor.GetField("m_DateFormatStr"));
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+biuHQ", "/XOz7w")]
        public void TestSetLanaguageType02()
        {
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelperFactory.CreateLanguageTypeHelper01();
            LanguageType langType = LanguageType.English;
            languageTypeHelper.SetLanaguageType(langType);
        }

        [TestCaseUnverified("Test case not verified")]
        [TestCaseAutogenerated]
        [TestAuthor("user")]
        [Test]
        [HashCode("+ys27w", "+8cTjA")]
        public void TestGetCurrentLanguageType01()
        {
            LanguageTypeHelper languageTypeHelper = LanguageTypeHelperFactory.CreateLanguageTypeHelper01();
            LanguageType langType = LanguageType.English;
            languageTypeHelper.SetLanaguageType(langType);
            LanguageType languageType = languageTypeHelper.GetCurrentLanguageType();
            //Post Condition Check
            Assert.AreEqual(langType, languageType);
        }

    }
}
